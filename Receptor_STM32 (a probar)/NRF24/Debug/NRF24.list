
NRF24.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040c0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080041cc  080041cc  000051cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004278  08004278  00006064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004278  08004278  00005278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004280  08004280  00006064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004280  08004280  00005280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004284  08004284  00005284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08004288  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000064  080042ec  00006064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  080042ec  00006274  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a43c  00000000  00000000  0000608d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c77  00000000  00000000  000104c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  00012140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007d0  00000000  00000000  00012b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a0f  00000000  00000000  00013348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b309  00000000  00000000  0002ad57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084660  00000000  00000000  00036060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ba6c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e38  00000000  00000000  000ba704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000bd53c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	080041b4 	.word	0x080041b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	080041b4 	.word	0x080041b4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <csn_high>:
#include "NRF24.h"

extern SPI_HandleTypeDef hspiX;


void csn_high(void){
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(csn_gpio_port, csn_gpio_pin, 1);
 8000160:	2201      	movs	r2, #1
 8000162:	2108      	movs	r1, #8
 8000164:	4802      	ldr	r0, [pc, #8]	@ (8000170 <csn_high+0x14>)
 8000166:	f001 fa67 	bl	8001638 <HAL_GPIO_WritePin>
}
 800016a:	bf00      	nop
 800016c:	bd80      	pop	{r7, pc}
 800016e:	bf00      	nop
 8000170:	40010800 	.word	0x40010800

08000174 <csn_low>:

void csn_low(void){
 8000174:	b580      	push	{r7, lr}
 8000176:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(csn_gpio_port, csn_gpio_pin, 0);
 8000178:	2200      	movs	r2, #0
 800017a:	2108      	movs	r1, #8
 800017c:	4802      	ldr	r0, [pc, #8]	@ (8000188 <csn_low+0x14>)
 800017e:	f001 fa5b 	bl	8001638 <HAL_GPIO_WritePin>
}
 8000182:	bf00      	nop
 8000184:	bd80      	pop	{r7, pc}
 8000186:	bf00      	nop
 8000188:	40010800 	.word	0x40010800

0800018c <ce_high>:

void ce_high(void){
 800018c:	b580      	push	{r7, lr}
 800018e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ce_gpio_port, ce_gpio_pin, 1);
 8000190:	2201      	movs	r2, #1
 8000192:	2110      	movs	r1, #16
 8000194:	4802      	ldr	r0, [pc, #8]	@ (80001a0 <ce_high+0x14>)
 8000196:	f001 fa4f 	bl	8001638 <HAL_GPIO_WritePin>
}
 800019a:	bf00      	nop
 800019c:	bd80      	pop	{r7, pc}
 800019e:	bf00      	nop
 80001a0:	40010800 	.word	0x40010800

080001a4 <ce_low>:

void ce_low(void){
 80001a4:	b580      	push	{r7, lr}
 80001a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ce_gpio_port, ce_gpio_pin, 0);
 80001a8:	2200      	movs	r2, #0
 80001aa:	2110      	movs	r1, #16
 80001ac:	4802      	ldr	r0, [pc, #8]	@ (80001b8 <ce_low+0x14>)
 80001ae:	f001 fa43 	bl	8001638 <HAL_GPIO_WritePin>
}
 80001b2:	bf00      	nop
 80001b4:	bd80      	pop	{r7, pc}
 80001b6:	bf00      	nop
 80001b8:	40010800 	.word	0x40010800

080001bc <nrf24_w_reg>:

void nrf24_w_reg(uint8_t reg, uint8_t *data, uint8_t size){
 80001bc:	b580      	push	{r7, lr}
 80001be:	b084      	sub	sp, #16
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	4603      	mov	r3, r0
 80001c4:	6039      	str	r1, [r7, #0]
 80001c6:	71fb      	strb	r3, [r7, #7]
 80001c8:	4613      	mov	r3, r2
 80001ca:	71bb      	strb	r3, [r7, #6]

	uint8_t cmd = W_REGISTER | reg;
 80001cc:	79fb      	ldrb	r3, [r7, #7]
 80001ce:	f043 0320 	orr.w	r3, r3, #32
 80001d2:	b2db      	uxtb	r3, r3
 80001d4:	73fb      	strb	r3, [r7, #15]

	csn_low();
 80001d6:	f7ff ffcd 	bl	8000174 <csn_low>

	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 80001da:	f107 010f 	add.w	r1, r7, #15
 80001de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80001e2:	2201      	movs	r2, #1
 80001e4:	4808      	ldr	r0, [pc, #32]	@ (8000208 <nrf24_w_reg+0x4c>)
 80001e6:	f001 fef5 	bl	8001fd4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspiX, data, size, spi_w_timeout);
 80001ea:	79bb      	ldrb	r3, [r7, #6]
 80001ec:	b29a      	uxth	r2, r3
 80001ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80001f2:	6839      	ldr	r1, [r7, #0]
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <nrf24_w_reg+0x4c>)
 80001f6:	f001 feed 	bl	8001fd4 <HAL_SPI_Transmit>

	csn_high();
 80001fa:	f7ff ffaf 	bl	800015c <csn_high>
}
 80001fe:	bf00      	nop
 8000200:	3710      	adds	r7, #16
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	20000080 	.word	0x20000080

0800020c <nrf24_r_reg>:

uint8_t nrf24_r_reg(uint8_t reg, uint8_t size){
 800020c:	b580      	push	{r7, lr}
 800020e:	b084      	sub	sp, #16
 8000210:	af00      	add	r7, sp, #0
 8000212:	4603      	mov	r3, r0
 8000214:	460a      	mov	r2, r1
 8000216:	71fb      	strb	r3, [r7, #7]
 8000218:	4613      	mov	r3, r2
 800021a:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd = R_REGISTER | reg;
 800021c:	79fb      	ldrb	r3, [r7, #7]
 800021e:	73fb      	strb	r3, [r7, #15]
	uint8_t data = 0;
 8000220:	2300      	movs	r3, #0
 8000222:	73bb      	strb	r3, [r7, #14]

	csn_low();
 8000224:	f7ff ffa6 	bl	8000174 <csn_low>

	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 8000228:	f107 010f 	add.w	r1, r7, #15
 800022c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000230:	2201      	movs	r2, #1
 8000232:	4809      	ldr	r0, [pc, #36]	@ (8000258 <nrf24_r_reg+0x4c>)
 8000234:	f001 fece 	bl	8001fd4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspiX, &data, size, spi_r_timeout);
 8000238:	79bb      	ldrb	r3, [r7, #6]
 800023a:	b29a      	uxth	r2, r3
 800023c:	f107 010e 	add.w	r1, r7, #14
 8000240:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <nrf24_r_reg+0x4c>)
 8000246:	f002 f808 	bl	800225a <HAL_SPI_Receive>

	csn_high();
 800024a:	f7ff ff87 	bl	800015c <csn_high>

	return data;
 800024e:	7bbb      	ldrb	r3, [r7, #14]
}
 8000250:	4618      	mov	r0, r3
 8000252:	3710      	adds	r7, #16
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}
 8000258:	20000080 	.word	0x20000080

0800025c <nrf24_w_spec_cmd>:

void nrf24_w_spec_cmd(uint8_t cmd){
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
 8000262:	4603      	mov	r3, r0
 8000264:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 8000266:	1df9      	adds	r1, r7, #7
 8000268:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800026c:	2201      	movs	r2, #1
 800026e:	4803      	ldr	r0, [pc, #12]	@ (800027c <nrf24_w_spec_cmd+0x20>)
 8000270:	f001 feb0 	bl	8001fd4 <HAL_SPI_Transmit>
}
 8000274:	bf00      	nop
 8000276:	3708      	adds	r7, #8
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}
 800027c:	20000080 	.word	0x20000080

08000280 <nrf24_pwr_up>:

void nrf24_r_spec_reg(uint8_t *data, uint8_t size){
	HAL_SPI_Receive(&hspiX, data, size, spi_r_timeout);
}

void nrf24_pwr_up(void){
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8000286:	2300      	movs	r3, #0
 8000288:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 800028a:	2101      	movs	r1, #1
 800028c:	2000      	movs	r0, #0
 800028e:	f7ff ffbd 	bl	800020c <nrf24_r_reg>
 8000292:	4603      	mov	r3, r0
 8000294:	71fb      	strb	r3, [r7, #7]

	data |= (1 << PWR_UP);
 8000296:	79fb      	ldrb	r3, [r7, #7]
 8000298:	f043 0302 	orr.w	r3, r3, #2
 800029c:	b2db      	uxtb	r3, r3
 800029e:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 80002a0:	1dfb      	adds	r3, r7, #7
 80002a2:	2201      	movs	r2, #1
 80002a4:	4619      	mov	r1, r3
 80002a6:	2000      	movs	r0, #0
 80002a8:	f7ff ff88 	bl	80001bc <nrf24_w_reg>
}
 80002ac:	bf00      	nop
 80002ae:	3708      	adds	r7, #8
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}

080002b4 <nrf24_data_rate>:
	data |= (pwr << RF_PWR);

	nrf24_w_reg(RF_SETUP, &data, 1);
}

void nrf24_data_rate(uint8_t bps){
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b084      	sub	sp, #16
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 80002be:	2300      	movs	r3, #0
 80002c0:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(RF_SETUP, 1);
 80002c2:	2101      	movs	r1, #1
 80002c4:	2006      	movs	r0, #6
 80002c6:	f7ff ffa1 	bl	800020c <nrf24_r_reg>
 80002ca:	4603      	mov	r3, r0
 80002cc:	73fb      	strb	r3, [r7, #15]

	data &= ~(1 << RF_DR_LOW) & ~(1 << RF_DR_HIGH);
 80002ce:	7bfb      	ldrb	r3, [r7, #15]
 80002d0:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	73fb      	strb	r3, [r7, #15]

	if(bps == _2mbps){
 80002d8:	79fb      	ldrb	r3, [r7, #7]
 80002da:	2b01      	cmp	r3, #1
 80002dc:	d105      	bne.n	80002ea <nrf24_data_rate+0x36>
		data |= (1 << RF_DR_HIGH);
 80002de:	7bfb      	ldrb	r3, [r7, #15]
 80002e0:	f043 0308 	orr.w	r3, r3, #8
 80002e4:	b2db      	uxtb	r3, r3
 80002e6:	73fb      	strb	r3, [r7, #15]
 80002e8:	e007      	b.n	80002fa <nrf24_data_rate+0x46>
	}else if(bps == _250kbps){
 80002ea:	79fb      	ldrb	r3, [r7, #7]
 80002ec:	2b02      	cmp	r3, #2
 80002ee:	d104      	bne.n	80002fa <nrf24_data_rate+0x46>
		data |= (1 << RF_DR_LOW);
 80002f0:	7bfb      	ldrb	r3, [r7, #15]
 80002f2:	f043 0320 	orr.w	r3, r3, #32
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(RF_SETUP, &data, 1);
 80002fa:	f107 030f 	add.w	r3, r7, #15
 80002fe:	2201      	movs	r2, #1
 8000300:	4619      	mov	r1, r3
 8000302:	2006      	movs	r0, #6
 8000304:	f7ff ff5a 	bl	80001bc <nrf24_w_reg>
}
 8000308:	bf00      	nop
 800030a:	3710      	adds	r7, #16
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}

08000310 <nrf24_set_channel>:

void nrf24_set_channel(uint8_t ch){
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	71fb      	strb	r3, [r7, #7]
	nrf24_w_reg(RF_CH, &ch, 1);
 800031a:	1dfb      	adds	r3, r7, #7
 800031c:	2201      	movs	r2, #1
 800031e:	4619      	mov	r1, r3
 8000320:	2005      	movs	r0, #5
 8000322:	f7ff ff4b 	bl	80001bc <nrf24_w_reg>
}
 8000326:	bf00      	nop
 8000328:	3708      	adds	r7, #8
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
	...

08000330 <nrf24_pipe_pld_size>:

void nrf24_open_tx_pipe(uint8_t *addr){
	nrf24_w_reg(TX_ADDR, addr, 5);
}

void nrf24_pipe_pld_size(uint8_t pipe, uint8_t size){
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
 8000336:	4603      	mov	r3, r0
 8000338:	460a      	mov	r2, r1
 800033a:	71fb      	strb	r3, [r7, #7]
 800033c:	4613      	mov	r3, r2
 800033e:	71bb      	strb	r3, [r7, #6]
	if(size > 32){
 8000340:	79bb      	ldrb	r3, [r7, #6]
 8000342:	2b20      	cmp	r3, #32
 8000344:	d901      	bls.n	800034a <nrf24_pipe_pld_size+0x1a>
		size = 32;
 8000346:	2320      	movs	r3, #32
 8000348:	71bb      	strb	r3, [r7, #6]
	}

	switch(pipe){
 800034a:	79fb      	ldrb	r3, [r7, #7]
 800034c:	2b05      	cmp	r3, #5
 800034e:	d839      	bhi.n	80003c4 <nrf24_pipe_pld_size+0x94>
 8000350:	a201      	add	r2, pc, #4	@ (adr r2, 8000358 <nrf24_pipe_pld_size+0x28>)
 8000352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000356:	bf00      	nop
 8000358:	08000371 	.word	0x08000371
 800035c:	0800037f 	.word	0x0800037f
 8000360:	0800038d 	.word	0x0800038d
 8000364:	0800039b 	.word	0x0800039b
 8000368:	080003a9 	.word	0x080003a9
 800036c:	080003b7 	.word	0x080003b7
	case 0:
		nrf24_w_reg(RX_PW_P0, &size, 1);
 8000370:	1dbb      	adds	r3, r7, #6
 8000372:	2201      	movs	r2, #1
 8000374:	4619      	mov	r1, r3
 8000376:	2011      	movs	r0, #17
 8000378:	f7ff ff20 	bl	80001bc <nrf24_w_reg>

		break;
 800037c:	e022      	b.n	80003c4 <nrf24_pipe_pld_size+0x94>
	case 1:
		nrf24_w_reg(RX_PW_P1, &size, 1);
 800037e:	1dbb      	adds	r3, r7, #6
 8000380:	2201      	movs	r2, #1
 8000382:	4619      	mov	r1, r3
 8000384:	2012      	movs	r0, #18
 8000386:	f7ff ff19 	bl	80001bc <nrf24_w_reg>

		break;
 800038a:	e01b      	b.n	80003c4 <nrf24_pipe_pld_size+0x94>
	case 2:
		nrf24_w_reg(RX_PW_P2, &size, 1);
 800038c:	1dbb      	adds	r3, r7, #6
 800038e:	2201      	movs	r2, #1
 8000390:	4619      	mov	r1, r3
 8000392:	2013      	movs	r0, #19
 8000394:	f7ff ff12 	bl	80001bc <nrf24_w_reg>

		break;
 8000398:	e014      	b.n	80003c4 <nrf24_pipe_pld_size+0x94>
	case 3:
		nrf24_w_reg(RX_PW_P3, &size, 1);
 800039a:	1dbb      	adds	r3, r7, #6
 800039c:	2201      	movs	r2, #1
 800039e:	4619      	mov	r1, r3
 80003a0:	2014      	movs	r0, #20
 80003a2:	f7ff ff0b 	bl	80001bc <nrf24_w_reg>

		break;
 80003a6:	e00d      	b.n	80003c4 <nrf24_pipe_pld_size+0x94>
	case 4:
		nrf24_w_reg(RX_PW_P4, &size, 1);
 80003a8:	1dbb      	adds	r3, r7, #6
 80003aa:	2201      	movs	r2, #1
 80003ac:	4619      	mov	r1, r3
 80003ae:	2015      	movs	r0, #21
 80003b0:	f7ff ff04 	bl	80001bc <nrf24_w_reg>

		break;
 80003b4:	e006      	b.n	80003c4 <nrf24_pipe_pld_size+0x94>
	case 5:
		nrf24_w_reg(RX_PW_P5, &size, 1);
 80003b6:	1dbb      	adds	r3, r7, #6
 80003b8:	2201      	movs	r2, #1
 80003ba:	4619      	mov	r1, r3
 80003bc:	2016      	movs	r0, #22
 80003be:	f7ff fefd 	bl	80001bc <nrf24_w_reg>

		break;
 80003c2:	bf00      	nop
	}
}
 80003c4:	bf00      	nop
 80003c6:	3708      	adds	r7, #8
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}

080003cc <nrf24_open_rx_pipe>:

void nrf24_open_rx_pipe(uint8_t pipe, uint8_t *addr){
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b084      	sub	sp, #16
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	4603      	mov	r3, r0
 80003d4:	6039      	str	r1, [r7, #0]
 80003d6:	71fb      	strb	r3, [r7, #7]

	uint8_t data = 0;
 80003d8:	2300      	movs	r3, #0
 80003da:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(EN_RXADDR, 1);
 80003dc:	2101      	movs	r1, #1
 80003de:	2002      	movs	r0, #2
 80003e0:	f7ff ff14 	bl	800020c <nrf24_r_reg>
 80003e4:	4603      	mov	r3, r0
 80003e6:	73fb      	strb	r3, [r7, #15]

	switch(pipe){
 80003e8:	79fb      	ldrb	r3, [r7, #7]
 80003ea:	2b05      	cmp	r3, #5
 80003ec:	d850      	bhi.n	8000490 <nrf24_open_rx_pipe+0xc4>
 80003ee:	a201      	add	r2, pc, #4	@ (adr r2, 80003f4 <nrf24_open_rx_pipe+0x28>)
 80003f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003f4:	0800040d 	.word	0x0800040d
 80003f8:	08000423 	.word	0x08000423
 80003fc:	08000439 	.word	0x08000439
 8000400:	0800044f 	.word	0x0800044f
 8000404:	08000465 	.word	0x08000465
 8000408:	0800047b 	.word	0x0800047b
	case 0:
		nrf24_w_reg(RX_ADDR_P0, addr, 5);
 800040c:	2205      	movs	r2, #5
 800040e:	6839      	ldr	r1, [r7, #0]
 8000410:	200a      	movs	r0, #10
 8000412:	f7ff fed3 	bl	80001bc <nrf24_w_reg>

		data |= (1 << ERX_P0);
 8000416:	7bfb      	ldrb	r3, [r7, #15]
 8000418:	f043 0301 	orr.w	r3, r3, #1
 800041c:	b2db      	uxtb	r3, r3
 800041e:	73fb      	strb	r3, [r7, #15]
		break;
 8000420:	e036      	b.n	8000490 <nrf24_open_rx_pipe+0xc4>
	case 1:
		nrf24_w_reg(RX_ADDR_P1, addr, 5);
 8000422:	2205      	movs	r2, #5
 8000424:	6839      	ldr	r1, [r7, #0]
 8000426:	200b      	movs	r0, #11
 8000428:	f7ff fec8 	bl	80001bc <nrf24_w_reg>

		data |= (1 << ERX_P1);
 800042c:	7bfb      	ldrb	r3, [r7, #15]
 800042e:	f043 0302 	orr.w	r3, r3, #2
 8000432:	b2db      	uxtb	r3, r3
 8000434:	73fb      	strb	r3, [r7, #15]
		break;
 8000436:	e02b      	b.n	8000490 <nrf24_open_rx_pipe+0xc4>
	case 2:
		nrf24_w_reg(RX_ADDR_P2, addr, 1);
 8000438:	2201      	movs	r2, #1
 800043a:	6839      	ldr	r1, [r7, #0]
 800043c:	200c      	movs	r0, #12
 800043e:	f7ff febd 	bl	80001bc <nrf24_w_reg>

		data |= (1 << ERX_P2);
 8000442:	7bfb      	ldrb	r3, [r7, #15]
 8000444:	f043 0304 	orr.w	r3, r3, #4
 8000448:	b2db      	uxtb	r3, r3
 800044a:	73fb      	strb	r3, [r7, #15]
		break;
 800044c:	e020      	b.n	8000490 <nrf24_open_rx_pipe+0xc4>
	case 3:
		nrf24_w_reg(RX_ADDR_P3, addr, 1);
 800044e:	2201      	movs	r2, #1
 8000450:	6839      	ldr	r1, [r7, #0]
 8000452:	200d      	movs	r0, #13
 8000454:	f7ff feb2 	bl	80001bc <nrf24_w_reg>

		data |= (1 << ERX_P3);
 8000458:	7bfb      	ldrb	r3, [r7, #15]
 800045a:	f043 0308 	orr.w	r3, r3, #8
 800045e:	b2db      	uxtb	r3, r3
 8000460:	73fb      	strb	r3, [r7, #15]
		break;
 8000462:	e015      	b.n	8000490 <nrf24_open_rx_pipe+0xc4>
	case 4:
		nrf24_w_reg(RX_ADDR_P4, addr, 1);
 8000464:	2201      	movs	r2, #1
 8000466:	6839      	ldr	r1, [r7, #0]
 8000468:	200e      	movs	r0, #14
 800046a:	f7ff fea7 	bl	80001bc <nrf24_w_reg>

		data |= (1 << ERX_P4);
 800046e:	7bfb      	ldrb	r3, [r7, #15]
 8000470:	f043 0310 	orr.w	r3, r3, #16
 8000474:	b2db      	uxtb	r3, r3
 8000476:	73fb      	strb	r3, [r7, #15]
		break;
 8000478:	e00a      	b.n	8000490 <nrf24_open_rx_pipe+0xc4>
	case 5:
		nrf24_w_reg(RX_ADDR_P5, addr, 1);
 800047a:	2201      	movs	r2, #1
 800047c:	6839      	ldr	r1, [r7, #0]
 800047e:	200f      	movs	r0, #15
 8000480:	f7ff fe9c 	bl	80001bc <nrf24_w_reg>

		data |= (1 << ERX_P5);
 8000484:	7bfb      	ldrb	r3, [r7, #15]
 8000486:	f043 0320 	orr.w	r3, r3, #32
 800048a:	b2db      	uxtb	r3, r3
 800048c:	73fb      	strb	r3, [r7, #15]
		break;
 800048e:	bf00      	nop
	}

	nrf24_w_reg(EN_RXADDR, &data, 1);
 8000490:	f107 030f 	add.w	r3, r7, #15
 8000494:	2201      	movs	r2, #1
 8000496:	4619      	mov	r1, r3
 8000498:	2002      	movs	r0, #2
 800049a:	f7ff fe8f 	bl	80001bc <nrf24_w_reg>
}
 800049e:	bf00      	nop
 80004a0:	3710      	adds	r7, #16
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop

080004a8 <nrf24_set_crc>:
	data &= ~(1 << pipe);

	nrf24_w_reg(EN_RXADDR, &data, 1);
}

void nrf24_set_crc(uint8_t en_crc, uint8_t crc0){
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	4603      	mov	r3, r0
 80004b0:	460a      	mov	r2, r1
 80004b2:	71fb      	strb	r3, [r7, #7]
 80004b4:	4613      	mov	r3, r2
 80004b6:	71bb      	strb	r3, [r7, #6]
	uint8_t data = nrf24_r_reg(CONFIG, 1);
 80004b8:	2101      	movs	r1, #1
 80004ba:	2000      	movs	r0, #0
 80004bc:	f7ff fea6 	bl	800020c <nrf24_r_reg>
 80004c0:	4603      	mov	r3, r0
 80004c2:	73fb      	strb	r3, [r7, #15]

	data &= ~(1 << EN_CRC) & ~(1 << CRCO);
 80004c4:	7bfb      	ldrb	r3, [r7, #15]
 80004c6:	f023 030c 	bic.w	r3, r3, #12
 80004ca:	b2db      	uxtb	r3, r3
 80004cc:	73fb      	strb	r3, [r7, #15]

	data |= (en_crc << EN_CRC) | (crc0 << CRCO);
 80004ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004d2:	00db      	lsls	r3, r3, #3
 80004d4:	b25a      	sxtb	r2, r3
 80004d6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80004da:	009b      	lsls	r3, r3, #2
 80004dc:	b25b      	sxtb	r3, r3
 80004de:	4313      	orrs	r3, r2
 80004e0:	b25a      	sxtb	r2, r3
 80004e2:	7bfb      	ldrb	r3, [r7, #15]
 80004e4:	b25b      	sxtb	r3, r3
 80004e6:	4313      	orrs	r3, r2
 80004e8:	b25b      	sxtb	r3, r3
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(CONFIG, &data, 1);
 80004ee:	f107 030f 	add.w	r3, r7, #15
 80004f2:	2201      	movs	r2, #1
 80004f4:	4619      	mov	r1, r3
 80004f6:	2000      	movs	r0, #0
 80004f8:	f7ff fe60 	bl	80001bc <nrf24_w_reg>
}
 80004fc:	bf00      	nop
 80004fe:	3710      	adds	r7, #16
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}

08000504 <nrf24_set_addr_width>:

void nrf24_set_addr_width(uint8_t bytes){
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	71fb      	strb	r3, [r7, #7]
	bytes -= 2;
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	3b02      	subs	r3, #2
 8000512:	b2db      	uxtb	r3, r3
 8000514:	71fb      	strb	r3, [r7, #7]
	nrf24_w_reg(SETUP_AW, &bytes, 1);
 8000516:	1dfb      	adds	r3, r7, #7
 8000518:	2201      	movs	r2, #1
 800051a:	4619      	mov	r1, r3
 800051c:	2003      	movs	r0, #3
 800051e:	f7ff fe4d 	bl	80001bc <nrf24_w_reg>
}
 8000522:	bf00      	nop
 8000524:	3708      	adds	r7, #8
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}

0800052a <nrf24_flush_tx>:

void nrf24_flush_tx(void){
 800052a:	b580      	push	{r7, lr}
 800052c:	af00      	add	r7, sp, #0
	csn_low();
 800052e:	f7ff fe21 	bl	8000174 <csn_low>
	nrf24_w_spec_cmd(FLUSH_TX);
 8000532:	20e1      	movs	r0, #225	@ 0xe1
 8000534:	f7ff fe92 	bl	800025c <nrf24_w_spec_cmd>
	csn_high();
 8000538:	f7ff fe10 	bl	800015c <csn_high>
}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}

08000540 <nrf24_flush_rx>:

void nrf24_flush_rx(void){
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	csn_low();
 8000544:	f7ff fe16 	bl	8000174 <csn_low>
	nrf24_w_spec_cmd(FLUSH_RX);
 8000548:	20e2      	movs	r0, #226	@ 0xe2
 800054a:	f7ff fe87 	bl	800025c <nrf24_w_spec_cmd>
	csn_high();
 800054e:	f7ff fe05 	bl	800015c <csn_high>
}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
	...

08000558 <nrf24_r_status>:

uint8_t nrf24_r_status(void){
 8000558:	b580      	push	{r7, lr}
 800055a:	b084      	sub	sp, #16
 800055c:	af02      	add	r7, sp, #8
	uint8_t data = 0;
 800055e:	2300      	movs	r3, #0
 8000560:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = NOP_CMD;
 8000562:	23ff      	movs	r3, #255	@ 0xff
 8000564:	71bb      	strb	r3, [r7, #6]

	csn_low();
 8000566:	f7ff fe05 	bl	8000174 <csn_low>
	HAL_SPI_TransmitReceive(&hspiX, &cmd, &data, 1, spi_rw_timeout);
 800056a:	1dfa      	adds	r2, r7, #7
 800056c:	1db9      	adds	r1, r7, #6
 800056e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000572:	9300      	str	r3, [sp, #0]
 8000574:	2301      	movs	r3, #1
 8000576:	4805      	ldr	r0, [pc, #20]	@ (800058c <nrf24_r_status+0x34>)
 8000578:	f001 ff87 	bl	800248a <HAL_SPI_TransmitReceive>
	csn_high();
 800057c:	f7ff fdee 	bl	800015c <csn_high>

	return data;
 8000580:	79fb      	ldrb	r3, [r7, #7]
}
 8000582:	4618      	mov	r0, r3
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	20000080 	.word	0x20000080

08000590 <nrf24_clear_rx_dr>:

void nrf24_clear_rx_dr(void){
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8000596:	2300      	movs	r3, #0
 8000598:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 800059a:	f7ff ffdd 	bl	8000558 <nrf24_r_status>
 800059e:	4603      	mov	r3, r0
 80005a0:	71fb      	strb	r3, [r7, #7]

	data |= (1 << RX_DR);
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(STATUS, &data, 1);
 80005ac:	1dfb      	adds	r3, r7, #7
 80005ae:	2201      	movs	r2, #1
 80005b0:	4619      	mov	r1, r3
 80005b2:	2007      	movs	r0, #7
 80005b4:	f7ff fe02 	bl	80001bc <nrf24_w_reg>
}
 80005b8:	bf00      	nop
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <nrf24_clear_tx_ds>:

void nrf24_clear_tx_ds(void){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 80005ca:	f7ff ffc5 	bl	8000558 <nrf24_r_status>
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]

	data |= (1 << TX_DS);
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	f043 0320 	orr.w	r3, r3, #32
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	71fb      	strb	r3, [r7, #7]

    nrf24_w_reg(STATUS, &data, 1);
 80005dc:	1dfb      	adds	r3, r7, #7
 80005de:	2201      	movs	r2, #1
 80005e0:	4619      	mov	r1, r3
 80005e2:	2007      	movs	r0, #7
 80005e4:	f7ff fdea 	bl	80001bc <nrf24_w_reg>
}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <nrf24_clear_max_rt>:

void nrf24_clear_max_rt(void){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 80005fa:	f7ff ffad 	bl	8000558 <nrf24_r_status>
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]

	data |= (1 << MAX_RT);
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	f043 0310 	orr.w	r3, r3, #16
 8000608:	b2db      	uxtb	r3, r3
 800060a:	71fb      	strb	r3, [r7, #7]

    nrf24_w_reg(STATUS, &data, 1);
 800060c:	1dfb      	adds	r3, r7, #7
 800060e:	2201      	movs	r2, #1
 8000610:	4619      	mov	r1, r3
 8000612:	2007      	movs	r0, #7
 8000614:	f7ff fdd2 	bl	80001bc <nrf24_w_reg>
}
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <nrf24_listen>:
	csn_high();

	return width;
}

void nrf24_listen(void){
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 800062a:	2101      	movs	r1, #1
 800062c:	2000      	movs	r0, #0
 800062e:	f7ff fded 	bl	800020c <nrf24_r_reg>
 8000632:	4603      	mov	r3, r0
 8000634:	71fb      	strb	r3, [r7, #7]

	data |= (1 << PRIM_RX);
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	b2db      	uxtb	r3, r3
 800063e:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 8000640:	1dfb      	adds	r3, r7, #7
 8000642:	2201      	movs	r2, #1
 8000644:	4619      	mov	r1, r3
 8000646:	2000      	movs	r0, #0
 8000648:	f7ff fdb8 	bl	80001bc <nrf24_w_reg>

	ce_high();
 800064c:	f7ff fd9e 	bl	800018c <ce_high>
}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <nrf24_dpl>:
	data &= ~(1 << PRIM_RX);

	nrf24_w_reg(CONFIG, &data, 1);
}

void nrf24_dpl(uint8_t en){
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
	uint8_t feature = nrf24_r_reg(FEATURE, 1);
 8000662:	2101      	movs	r1, #1
 8000664:	201d      	movs	r0, #29
 8000666:	f7ff fdd1 	bl	800020c <nrf24_r_reg>
 800066a:	4603      	mov	r3, r0
 800066c:	73fb      	strb	r3, [r7, #15]

	if(en == enable){
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	2b01      	cmp	r3, #1
 8000672:	d105      	bne.n	8000680 <nrf24_dpl+0x28>
		feature |= (1 << EN_DPL);
 8000674:	7bfb      	ldrb	r3, [r7, #15]
 8000676:	f043 0304 	orr.w	r3, r3, #4
 800067a:	b2db      	uxtb	r3, r3
 800067c:	73fb      	strb	r3, [r7, #15]
 800067e:	e004      	b.n	800068a <nrf24_dpl+0x32>
	}else{
		feature &= ~(1 << EN_DPL);
 8000680:	7bfb      	ldrb	r3, [r7, #15]
 8000682:	f023 0304 	bic.w	r3, r3, #4
 8000686:	b2db      	uxtb	r3, r3
 8000688:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(FEATURE, &feature, 1);
 800068a:	f107 030f 	add.w	r3, r7, #15
 800068e:	2201      	movs	r2, #1
 8000690:	4619      	mov	r1, r3
 8000692:	201d      	movs	r0, #29
 8000694:	f7ff fd92 	bl	80001bc <nrf24_w_reg>
}
 8000698:	bf00      	nop
 800069a:	3710      	adds	r7, #16
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <nrf24_auto_ack_all>:
	}

	nrf24_w_reg(EN_AA, &enaa, 1);
}

void nrf24_auto_ack_all(uint8_t ack){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nrf24_r_reg(EN_AA, 1);
 80006aa:	2101      	movs	r1, #1
 80006ac:	2001      	movs	r0, #1
 80006ae:	f7ff fdad 	bl	800020c <nrf24_r_reg>
 80006b2:	4603      	mov	r3, r0
 80006b4:	73fb      	strb	r3, [r7, #15]

	if(ack){
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d002      	beq.n	80006c2 <nrf24_auto_ack_all+0x22>
		enaa = 63;
 80006bc:	233f      	movs	r3, #63	@ 0x3f
 80006be:	73fb      	strb	r3, [r7, #15]
 80006c0:	e001      	b.n	80006c6 <nrf24_auto_ack_all+0x26>
	}else{
		enaa = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(EN_AA, &enaa, 1);
 80006c6:	f107 030f 	add.w	r3, r7, #15
 80006ca:	2201      	movs	r2, #1
 80006cc:	4619      	mov	r1, r3
 80006ce:	2001      	movs	r0, #1
 80006d0:	f7ff fd74 	bl	80001bc <nrf24_w_reg>
}
 80006d4:	bf00      	nop
 80006d6:	3710      	adds	r7, #16
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <nrf24_en_ack_pld>:

void nrf24_en_ack_pld(uint8_t en){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
	uint8_t feature = nrf24_r_reg(FEATURE, 1);
 80006e6:	2101      	movs	r1, #1
 80006e8:	201d      	movs	r0, #29
 80006ea:	f7ff fd8f 	bl	800020c <nrf24_r_reg>
 80006ee:	4603      	mov	r3, r0
 80006f0:	73fb      	strb	r3, [r7, #15]

	if(en){
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d005      	beq.n	8000704 <nrf24_en_ack_pld+0x28>
		feature |= (1 << EN_ACK_PAY);
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	f043 0302 	orr.w	r3, r3, #2
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	73fb      	strb	r3, [r7, #15]
 8000702:	e004      	b.n	800070e <nrf24_en_ack_pld+0x32>
	}else{
		feature &= ~(1 << EN_ACK_PAY);
 8000704:	7bfb      	ldrb	r3, [r7, #15]
 8000706:	f023 0302 	bic.w	r3, r3, #2
 800070a:	b2db      	uxtb	r3, r3
 800070c:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(FEATURE, &feature, 1);
 800070e:	f107 030f 	add.w	r3, r7, #15
 8000712:	2201      	movs	r2, #1
 8000714:	4619      	mov	r1, r3
 8000716:	201d      	movs	r0, #29
 8000718:	f7ff fd50 	bl	80001bc <nrf24_w_reg>
}
 800071c:	bf00      	nop
 800071e:	3710      	adds	r7, #16
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <nrf24_en_dyn_ack>:

void nrf24_en_dyn_ack(uint8_t en){
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
	uint8_t feature = nrf24_r_reg(FEATURE, 1);
 800072e:	2101      	movs	r1, #1
 8000730:	201d      	movs	r0, #29
 8000732:	f7ff fd6b 	bl	800020c <nrf24_r_reg>
 8000736:	4603      	mov	r3, r0
 8000738:	73fb      	strb	r3, [r7, #15]

	if(en){
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d005      	beq.n	800074c <nrf24_en_dyn_ack+0x28>
		feature |= (1 << EN_DYN_ACK);
 8000740:	7bfb      	ldrb	r3, [r7, #15]
 8000742:	f043 0301 	orr.w	r3, r3, #1
 8000746:	b2db      	uxtb	r3, r3
 8000748:	73fb      	strb	r3, [r7, #15]
 800074a:	e004      	b.n	8000756 <nrf24_en_dyn_ack+0x32>
	}else{
		feature &= ~(1 << EN_DYN_ACK);
 800074c:	7bfb      	ldrb	r3, [r7, #15]
 800074e:	f023 0301 	bic.w	r3, r3, #1
 8000752:	b2db      	uxtb	r3, r3
 8000754:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(FEATURE, &feature, 1);
 8000756:	f107 030f 	add.w	r3, r7, #15
 800075a:	2201      	movs	r2, #1
 800075c:	4619      	mov	r1, r3
 800075e:	201d      	movs	r0, #29
 8000760:	f7ff fd2c 	bl	80001bc <nrf24_w_reg>
}
 8000764:	bf00      	nop
 8000766:	3710      	adds	r7, #16
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <nrf24_data_available>:

uint8_t nrf24_carrier_detect(void){
	return nrf24_r_reg(RPD, 1);
}

uint8_t nrf24_data_available(void){
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0

 	uint8_t reg_dt = nrf24_r_reg(FIFO_STATUS, 1);
 8000772:	2101      	movs	r1, #1
 8000774:	2017      	movs	r0, #23
 8000776:	f7ff fd49 	bl	800020c <nrf24_r_reg>
 800077a:	4603      	mov	r3, r0
 800077c:	71fb      	strb	r3, [r7, #7]

	if(!(reg_dt & (1 << RX_EMPTY))){
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	f003 0301 	and.w	r3, r3, #1
 8000784:	2b00      	cmp	r3, #0
 8000786:	d101      	bne.n	800078c <nrf24_data_available+0x20>
		return 1;
 8000788:	2301      	movs	r3, #1
 800078a:	e000      	b.n	800078e <nrf24_data_available+0x22>
	}

	return 0;
 800078c:	2300      	movs	r3, #0
}
 800078e:	4618      	mov	r0, r3
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
	...

08000798 <nrf24_receive>:

void nrf24_receive(uint8_t *data, uint8_t size){
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	460b      	mov	r3, r1
 80007a2:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd = R_RX_PAYLOAD;
 80007a4:	2361      	movs	r3, #97	@ 0x61
 80007a6:	73fb      	strb	r3, [r7, #15]

	csn_low();
 80007a8:	f7ff fce4 	bl	8000174 <csn_low>
	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 80007ac:	f107 010f 	add.w	r1, r7, #15
 80007b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007b4:	2201      	movs	r2, #1
 80007b6:	4809      	ldr	r0, [pc, #36]	@ (80007dc <nrf24_receive+0x44>)
 80007b8:	f001 fc0c 	bl	8001fd4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspiX, data, size, spi_r_timeout);
 80007bc:	78fb      	ldrb	r3, [r7, #3]
 80007be:	b29a      	uxth	r2, r3
 80007c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007c4:	6879      	ldr	r1, [r7, #4]
 80007c6:	4805      	ldr	r0, [pc, #20]	@ (80007dc <nrf24_receive+0x44>)
 80007c8:	f001 fd47 	bl	800225a <HAL_SPI_Receive>
	csn_high();
 80007cc:	f7ff fcc6 	bl	800015c <csn_high>

	nrf24_clear_rx_dr();
 80007d0:	f7ff fede 	bl	8000590 <nrf24_clear_rx_dr>
}
 80007d4:	bf00      	nop
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000080 	.word	0x20000080

080007e0 <NRF24_Init>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
bool NRF24_Init(void){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	ce_low();
 80007e4:	f7ff fcde 	bl	80001a4 <ce_low>
	csn_high();
 80007e8:	f7ff fcb8 	bl	800015c <csn_high>

	HAL_Delay(5);
 80007ec:	2005      	movs	r0, #5
 80007ee:	f000 fbbb 	bl	8000f68 <HAL_Delay>

	// Velocidad inicial confiable (1 Mbps)
	nrf24_data_rate(_1mbps);
 80007f2:	2000      	movs	r0, #0
 80007f4:	f7ff fd5e 	bl	80002b4 <nrf24_data_rate>

    // Deshabilitar ACK payload y payload dinámico por defecto
	nrf24_en_ack_pld(disable);
 80007f8:	2000      	movs	r0, #0
 80007fa:	f7ff ff6f 	bl	80006dc <nrf24_en_ack_pld>
	nrf24_en_dyn_ack(disable);
 80007fe:	2000      	movs	r0, #0
 8000800:	f7ff ff90 	bl	8000724 <nrf24_en_dyn_ack>
	nrf24_dpl(disable);
 8000804:	2000      	movs	r0, #0
 8000806:	f7ff ff27 	bl	8000658 <nrf24_dpl>

    // Habilitar auto-ack en todos los pipes (puede ajustarse)
	nrf24_auto_ack_all(enable);
 800080a:	2001      	movs	r0, #1
 800080c:	f7ff ff48 	bl	80006a0 <nrf24_auto_ack_all>

    // Habilitar solo pipes RX 0 y 1 por defecto
	nrf24_open_rx_pipe(0, addr);
 8000810:	4922      	ldr	r1, [pc, #136]	@ (800089c <NRF24_Init+0xbc>)
 8000812:	2000      	movs	r0, #0
 8000814:	f7ff fdda 	bl	80003cc <nrf24_open_rx_pipe>
	nrf24_open_rx_pipe(1, addr);
 8000818:	4920      	ldr	r1, [pc, #128]	@ (800089c <NRF24_Init+0xbc>)
 800081a:	2001      	movs	r0, #1
 800081c:	f7ff fdd6 	bl	80003cc <nrf24_open_rx_pipe>
//	uint8_t data = 0x03
//	nrf24_w_reg(EN_RXADDR, data, sizeof(data));

    // Tamaño fijo de payload (por defecto 32 bytes)
	nrf24_pipe_pld_size(0, PLD_SIZE);
 8000820:	2120      	movs	r1, #32
 8000822:	2000      	movs	r0, #0
 8000824:	f7ff fd84 	bl	8000330 <nrf24_pipe_pld_size>
	nrf24_pipe_pld_size(1, PLD_SIZE);
 8000828:	2120      	movs	r1, #32
 800082a:	2001      	movs	r0, #1
 800082c:	f7ff fd80 	bl	8000330 <nrf24_pipe_pld_size>
	nrf24_pipe_pld_size(2, PLD_SIZE);
 8000830:	2120      	movs	r1, #32
 8000832:	2002      	movs	r0, #2
 8000834:	f7ff fd7c 	bl	8000330 <nrf24_pipe_pld_size>
	nrf24_pipe_pld_size(3, PLD_SIZE);
 8000838:	2120      	movs	r1, #32
 800083a:	2003      	movs	r0, #3
 800083c:	f7ff fd78 	bl	8000330 <nrf24_pipe_pld_size>
	nrf24_pipe_pld_size(4, PLD_SIZE);
 8000840:	2120      	movs	r1, #32
 8000842:	2004      	movs	r0, #4
 8000844:	f7ff fd74 	bl	8000330 <nrf24_pipe_pld_size>
	nrf24_pipe_pld_size(5, PLD_SIZE);
 8000848:	2120      	movs	r1, #32
 800084a:	2005      	movs	r0, #5
 800084c:	f7ff fd70 	bl	8000330 <nrf24_pipe_pld_size>

    // Ancho de dirección: 5 bytes (máximo permitido)
	nrf24_set_addr_width(5);
 8000850:	2005      	movs	r0, #5
 8000852:	f7ff fe57 	bl	8000504 <nrf24_set_addr_width>

	// Canal por defecto (76 → dentro de ISM band y sin interferencia típica)
	nrf24_set_channel(76);
 8000856:	204c      	movs	r0, #76	@ 0x4c
 8000858:	f7ff fd5a 	bl	8000310 <nrf24_set_channel>

    // Limpiar flags de status
	nrf24_clear_max_rt();
 800085c:	f7ff fec8 	bl	80005f0 <nrf24_clear_max_rt>
	nrf24_clear_rx_dr();
 8000860:	f7ff fe96 	bl	8000590 <nrf24_clear_rx_dr>
	nrf24_clear_tx_ds();
 8000864:	f7ff feac 	bl	80005c0 <nrf24_clear_tx_ds>

    // Flush buffers
	nrf24_flush_rx();
 8000868:	f7ff fe6a 	bl	8000540 <nrf24_flush_rx>
	nrf24_flush_tx();
 800086c:	f7ff fe5d 	bl	800052a <nrf24_flush_tx>
    // Configurar registro CONFIG:
    // - CRC de 2 bytes (CRCO)
    // - CRC habilitado (EN_CRC)
    // - Power Up (PWR_UP)
    // - Modo PTX (PRIM_RX = 0)
	nrf24_set_crc(en_crc, _2byte);
 8000870:	2101      	movs	r1, #1
 8000872:	2001      	movs	r0, #1
 8000874:	f7ff fe18 	bl	80004a8 <nrf24_set_crc>
	nrf24_pwr_up();
 8000878:	f7ff fd02 	bl	8000280 <nrf24_pwr_up>


    // Delay de power-up a standby (~1.5ms recomendado)
    HAL_Delay(2);
 800087c:	2002      	movs	r0, #2
 800087e:	f000 fb73 	bl	8000f68 <HAL_Delay>

    // Verificación de escritura de CONFIG
    return (nrf24_r_reg(CONFIG, 1) == (_BV(EN_CRC) | _BV(CRCO) | _BV(PWR_UP))) ? true : false;
 8000882:	2101      	movs	r1, #1
 8000884:	2000      	movs	r0, #0
 8000886:	f7ff fcc1 	bl	800020c <nrf24_r_reg>
 800088a:	4603      	mov	r3, r0
 800088c:	2b0e      	cmp	r3, #14
 800088e:	bf0c      	ite	eq
 8000890:	2301      	moveq	r3, #1
 8000892:	2300      	movne	r3, #0
 8000894:	b2db      	uxtb	r3, r3

}
 8000896:	4618      	mov	r0, r3
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000000 	.word	0x20000000

080008a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b09c      	sub	sp, #112	@ 0x70
 80008a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008a6:	f000 fafd 	bl	8000ea4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008aa:	f000 f88b 	bl	80009c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ae:	f000 f929 	bl	8000b04 <MX_GPIO_Init>
  MX_SPI1_Init();
 80008b2:	f000 f8c7 	bl	8000a44 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80008b6:	f000 f8fb 	bl	8000ab0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  if (NRF24_Init() == 0) {
 80008ba:	f7ff ff91 	bl	80007e0 <NRF24_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	f083 0301 	eor.w	r3, r3, #1
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d012      	beq.n	80008f0 <main+0x50>
    char buffer[100];
	snprintf(buffer,sizeof(buffer),"Error al iniciar la radio.\n");
 80008ca:	463b      	mov	r3, r7
 80008cc:	4a37      	ldr	r2, [pc, #220]	@ (80009ac <main+0x10c>)
 80008ce:	2164      	movs	r1, #100	@ 0x64
 80008d0:	4618      	mov	r0, r3
 80008d2:	f002 ffab 	bl	800382c <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80008d6:	463b      	mov	r3, r7
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff fc37 	bl	800014c <strlen>
 80008de:	4603      	mov	r3, r0
 80008e0:	b29a      	uxth	r2, r3
 80008e2:	4639      	mov	r1, r7
 80008e4:	f04f 33ff 	mov.w	r3, #4294967295
 80008e8:	4831      	ldr	r0, [pc, #196]	@ (80009b0 <main+0x110>)
 80008ea:	f002 f9cb 	bl	8002c84 <HAL_UART_Transmit>
 80008ee:	e011      	b.n	8000914 <main+0x74>
  }
  else{
	    char buffer[100];
		snprintf(buffer,sizeof(buffer),"Radio Iniciada.\n");
 80008f0:	463b      	mov	r3, r7
 80008f2:	4a30      	ldr	r2, [pc, #192]	@ (80009b4 <main+0x114>)
 80008f4:	2164      	movs	r1, #100	@ 0x64
 80008f6:	4618      	mov	r0, r3
 80008f8:	f002 ff98 	bl	800382c <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80008fc:	463b      	mov	r3, r7
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff fc24 	bl	800014c <strlen>
 8000904:	4603      	mov	r3, r0
 8000906:	b29a      	uxth	r2, r3
 8000908:	4639      	mov	r1, r7
 800090a:	f04f 33ff 	mov.w	r3, #4294967295
 800090e:	4828      	ldr	r0, [pc, #160]	@ (80009b0 <main+0x110>)
 8000910:	f002 f9b8 	bl	8002c84 <HAL_UART_Transmit>
  }

  //radio.setDataRate(RF24_250KBPS);
  nrf24_data_rate(_250kbps);
 8000914:	2002      	movs	r0, #2
 8000916:	f7ff fccd 	bl	80002b4 <nrf24_data_rate>
  //radio.openReadingPipe(1, direccion);
  nrf24_open_rx_pipe(1, addr);
 800091a:	4927      	ldr	r1, [pc, #156]	@ (80009b8 <main+0x118>)
 800091c:	2001      	movs	r0, #1
 800091e:	f7ff fd55 	bl	80003cc <nrf24_open_rx_pipe>
  //radio.startListening();
  nrf24_listen();
 8000922:	f7ff fe7d 	bl	8000620 <nrf24_listen>
//	  Serial.print("\nCoord X: ");
//	  Serial.print((int)mensaje.x);
//	  Serial.print("\tCoord Y: ");
//	  Serial.print((int)mensaje.y);
//	}
	if (nrf24_data_available()) {
 8000926:	f7ff ff21 	bl	800076c <nrf24_data_available>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d039      	beq.n	80009a4 <main+0x104>
	  //radio.read(&mensaje, sizeof(mensaje));
		uint8_t rx_buffer[sizeof(mensaje_t)];

		nrf24_receive(rx_buffer, sizeof(mensaje_t));
 8000930:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000934:	2104      	movs	r1, #4
 8000936:	4618      	mov	r0, r3
 8000938:	f7ff ff2e 	bl	8000798 <nrf24_receive>

		mensaje.x = (rx_buffer[1] << 8) | rx_buffer[0];
 800093c:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8000940:	b21b      	sxth	r3, r3
 8000942:	021b      	lsls	r3, r3, #8
 8000944:	b21a      	sxth	r2, r3
 8000946:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800094a:	b21b      	sxth	r3, r3
 800094c:	4313      	orrs	r3, r2
 800094e:	b21b      	sxth	r3, r3
 8000950:	b29a      	uxth	r2, r3
 8000952:	4b1a      	ldr	r3, [pc, #104]	@ (80009bc <main+0x11c>)
 8000954:	801a      	strh	r2, [r3, #0]
		mensaje.y = (rx_buffer[3] << 8) | rx_buffer[2];
 8000956:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800095a:	b21b      	sxth	r3, r3
 800095c:	021b      	lsls	r3, r3, #8
 800095e:	b21a      	sxth	r2, r3
 8000960:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8000964:	b21b      	sxth	r3, r3
 8000966:	4313      	orrs	r3, r2
 8000968:	b21b      	sxth	r3, r3
 800096a:	b29a      	uxth	r2, r3
 800096c:	4b13      	ldr	r3, [pc, #76]	@ (80009bc <main+0x11c>)
 800096e:	805a      	strh	r2, [r3, #2]

	    char buffer[100];
		snprintf(buffer,sizeof(buffer),"\nCoord X: %lu\tCoord Y: %lu",mensaje.x,mensaje.y);
 8000970:	4b12      	ldr	r3, [pc, #72]	@ (80009bc <main+0x11c>)
 8000972:	881b      	ldrh	r3, [r3, #0]
 8000974:	461a      	mov	r2, r3
 8000976:	4b11      	ldr	r3, [pc, #68]	@ (80009bc <main+0x11c>)
 8000978:	885b      	ldrh	r3, [r3, #2]
 800097a:	4638      	mov	r0, r7
 800097c:	9300      	str	r3, [sp, #0]
 800097e:	4613      	mov	r3, r2
 8000980:	4a0f      	ldr	r2, [pc, #60]	@ (80009c0 <main+0x120>)
 8000982:	2164      	movs	r1, #100	@ 0x64
 8000984:	f002 ff52 	bl	800382c <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000988:	463b      	mov	r3, r7
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff fbde 	bl	800014c <strlen>
 8000990:	4603      	mov	r3, r0
 8000992:	b29a      	uxth	r2, r3
 8000994:	4639      	mov	r1, r7
 8000996:	f04f 33ff 	mov.w	r3, #4294967295
 800099a:	4805      	ldr	r0, [pc, #20]	@ (80009b0 <main+0x110>)
 800099c:	f002 f972 	bl	8002c84 <HAL_UART_Transmit>

		nrf24_flush_rx();
 80009a0:	f7ff fdce 	bl	8000540 <nrf24_flush_rx>
	}

	HAL_Delay(5);
 80009a4:	2005      	movs	r0, #5
 80009a6:	f000 fadf 	bl	8000f68 <HAL_Delay>
	if (nrf24_data_available()) {
 80009aa:	e7bc      	b.n	8000926 <main+0x86>
 80009ac:	080041cc 	.word	0x080041cc
 80009b0:	200000d8 	.word	0x200000d8
 80009b4:	080041e8 	.word	0x080041e8
 80009b8:	20000000 	.word	0x20000000
 80009bc:	20000120 	.word	0x20000120
 80009c0:	080041fc 	.word	0x080041fc

080009c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b090      	sub	sp, #64	@ 0x40
 80009c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ca:	f107 0318 	add.w	r3, r7, #24
 80009ce:	2228      	movs	r2, #40	@ 0x28
 80009d0:	2100      	movs	r1, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f002 ff60 	bl	8003898 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
 80009e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009e6:	2302      	movs	r3, #2
 80009e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009ea:	2301      	movs	r3, #1
 80009ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ee:	2310      	movs	r3, #16
 80009f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009f2:	2302      	movs	r3, #2
 80009f4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80009f6:	2300      	movs	r3, #0
 80009f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80009fa:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80009fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a00:	f107 0318 	add.w	r3, r7, #24
 8000a04:	4618      	mov	r0, r3
 8000a06:	f000 fe51 	bl	80016ac <HAL_RCC_OscConfig>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000a10:	f000 f8c0 	bl	8000b94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a14:	230f      	movs	r3, #15
 8000a16:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a20:	2300      	movs	r3, #0
 8000a22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a24:	2300      	movs	r3, #0
 8000a26:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f001 f8bf 	bl	8001bb0 <HAL_RCC_ClockConfig>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000a38:	f000 f8ac 	bl	8000b94 <Error_Handler>
  }
}
 8000a3c:	bf00      	nop
 8000a3e:	3740      	adds	r7, #64	@ 0x40
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a48:	4b17      	ldr	r3, [pc, #92]	@ (8000aa8 <MX_SPI1_Init+0x64>)
 8000a4a:	4a18      	ldr	r2, [pc, #96]	@ (8000aac <MX_SPI1_Init+0x68>)
 8000a4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a4e:	4b16      	ldr	r3, [pc, #88]	@ (8000aa8 <MX_SPI1_Init+0x64>)
 8000a50:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a54:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a56:	4b14      	ldr	r3, [pc, #80]	@ (8000aa8 <MX_SPI1_Init+0x64>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a5c:	4b12      	ldr	r3, [pc, #72]	@ (8000aa8 <MX_SPI1_Init+0x64>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a62:	4b11      	ldr	r3, [pc, #68]	@ (8000aa8 <MX_SPI1_Init+0x64>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa8 <MX_SPI1_Init+0x64>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa8 <MX_SPI1_Init+0x64>)
 8000a70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a74:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a76:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa8 <MX_SPI1_Init+0x64>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa8 <MX_SPI1_Init+0x64>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a82:	4b09      	ldr	r3, [pc, #36]	@ (8000aa8 <MX_SPI1_Init+0x64>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a88:	4b07      	ldr	r3, [pc, #28]	@ (8000aa8 <MX_SPI1_Init+0x64>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a8e:	4b06      	ldr	r3, [pc, #24]	@ (8000aa8 <MX_SPI1_Init+0x64>)
 8000a90:	220a      	movs	r2, #10
 8000a92:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a94:	4804      	ldr	r0, [pc, #16]	@ (8000aa8 <MX_SPI1_Init+0x64>)
 8000a96:	f001 fa19 	bl	8001ecc <HAL_SPI_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000aa0:	f000 f878 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000080 	.word	0x20000080
 8000aac:	40013000 	.word	0x40013000

08000ab0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ab4:	4b11      	ldr	r3, [pc, #68]	@ (8000afc <MX_USART1_UART_Init+0x4c>)
 8000ab6:	4a12      	ldr	r2, [pc, #72]	@ (8000b00 <MX_USART1_UART_Init+0x50>)
 8000ab8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000aba:	4b10      	ldr	r3, [pc, #64]	@ (8000afc <MX_USART1_UART_Init+0x4c>)
 8000abc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ac0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8000afc <MX_USART1_UART_Init+0x4c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8000afc <MX_USART1_UART_Init+0x4c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ace:	4b0b      	ldr	r3, [pc, #44]	@ (8000afc <MX_USART1_UART_Init+0x4c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ad4:	4b09      	ldr	r3, [pc, #36]	@ (8000afc <MX_USART1_UART_Init+0x4c>)
 8000ad6:	220c      	movs	r2, #12
 8000ad8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ada:	4b08      	ldr	r3, [pc, #32]	@ (8000afc <MX_USART1_UART_Init+0x4c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <MX_USART1_UART_Init+0x4c>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ae6:	4805      	ldr	r0, [pc, #20]	@ (8000afc <MX_USART1_UART_Init+0x4c>)
 8000ae8:	f002 f87c 	bl	8002be4 <HAL_UART_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000af2:	f000 f84f 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	200000d8 	.word	0x200000d8
 8000b00:	40013800 	.word	0x40013800

08000b04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0a:	f107 0308 	add.w	r3, r7, #8
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b18:	4b1b      	ldr	r3, [pc, #108]	@ (8000b88 <MX_GPIO_Init+0x84>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	4a1a      	ldr	r2, [pc, #104]	@ (8000b88 <MX_GPIO_Init+0x84>)
 8000b1e:	f043 0304 	orr.w	r3, r3, #4
 8000b22:	6193      	str	r3, [r2, #24]
 8000b24:	4b18      	ldr	r3, [pc, #96]	@ (8000b88 <MX_GPIO_Init+0x84>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	f003 0304 	and.w	r3, r3, #4
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSN_Pin|CE_Pin, GPIO_PIN_RESET);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2118      	movs	r1, #24
 8000b34:	4815      	ldr	r0, [pc, #84]	@ (8000b8c <MX_GPIO_Init+0x88>)
 8000b36:	f000 fd7f 	bl	8001638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b3e:	4b14      	ldr	r3, [pc, #80]	@ (8000b90 <MX_GPIO_Init+0x8c>)
 8000b40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b46:	f107 0308 	add.w	r3, r7, #8
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	480f      	ldr	r0, [pc, #60]	@ (8000b8c <MX_GPIO_Init+0x88>)
 8000b4e:	f000 fbef 	bl	8001330 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSN_Pin CE_Pin */
  GPIO_InitStruct.Pin = CSN_Pin|CE_Pin;
 8000b52:	2318      	movs	r3, #24
 8000b54:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b56:	2301      	movs	r3, #1
 8000b58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b5e:	2303      	movs	r3, #3
 8000b60:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b62:	f107 0308 	add.w	r3, r7, #8
 8000b66:	4619      	mov	r1, r3
 8000b68:	4808      	ldr	r0, [pc, #32]	@ (8000b8c <MX_GPIO_Init+0x88>)
 8000b6a:	f000 fbe1 	bl	8001330 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2100      	movs	r1, #0
 8000b72:	2006      	movs	r0, #6
 8000b74:	f000 faf3 	bl	800115e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b78:	2006      	movs	r0, #6
 8000b7a:	f000 fb0c 	bl	8001196 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b7e:	bf00      	nop
 8000b80:	3718      	adds	r7, #24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	40010800 	.word	0x40010800
 8000b90:	10210000 	.word	0x10210000

08000b94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b98:	b672      	cpsid	i
}
 8000b9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <Error_Handler+0x8>

08000ba0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ba6:	4b15      	ldr	r3, [pc, #84]	@ (8000bfc <HAL_MspInit+0x5c>)
 8000ba8:	699b      	ldr	r3, [r3, #24]
 8000baa:	4a14      	ldr	r2, [pc, #80]	@ (8000bfc <HAL_MspInit+0x5c>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	6193      	str	r3, [r2, #24]
 8000bb2:	4b12      	ldr	r3, [pc, #72]	@ (8000bfc <HAL_MspInit+0x5c>)
 8000bb4:	699b      	ldr	r3, [r3, #24]
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000bfc <HAL_MspInit+0x5c>)
 8000bc0:	69db      	ldr	r3, [r3, #28]
 8000bc2:	4a0e      	ldr	r2, [pc, #56]	@ (8000bfc <HAL_MspInit+0x5c>)
 8000bc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bc8:	61d3      	str	r3, [r2, #28]
 8000bca:	4b0c      	ldr	r3, [pc, #48]	@ (8000bfc <HAL_MspInit+0x5c>)
 8000bcc:	69db      	ldr	r3, [r3, #28]
 8000bce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8000c00 <HAL_MspInit+0x60>)
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	4a04      	ldr	r2, [pc, #16]	@ (8000c00 <HAL_MspInit+0x60>)
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	3714      	adds	r7, #20
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	40010000 	.word	0x40010000

08000c04 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b088      	sub	sp, #32
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 0310 	add.w	r3, r7, #16
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a1f      	ldr	r2, [pc, #124]	@ (8000c9c <HAL_SPI_MspInit+0x98>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d137      	bne.n	8000c94 <HAL_SPI_MspInit+0x90>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c24:	4b1e      	ldr	r3, [pc, #120]	@ (8000ca0 <HAL_SPI_MspInit+0x9c>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	4a1d      	ldr	r2, [pc, #116]	@ (8000ca0 <HAL_SPI_MspInit+0x9c>)
 8000c2a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c2e:	6193      	str	r3, [r2, #24]
 8000c30:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca0 <HAL_SPI_MspInit+0x9c>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3c:	4b18      	ldr	r3, [pc, #96]	@ (8000ca0 <HAL_SPI_MspInit+0x9c>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	4a17      	ldr	r2, [pc, #92]	@ (8000ca0 <HAL_SPI_MspInit+0x9c>)
 8000c42:	f043 0304 	orr.w	r3, r3, #4
 8000c46:	6193      	str	r3, [r2, #24]
 8000c48:	4b15      	ldr	r3, [pc, #84]	@ (8000ca0 <HAL_SPI_MspInit+0x9c>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	f003 0304 	and.w	r3, r3, #4
 8000c50:	60bb      	str	r3, [r7, #8]
 8000c52:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000c54:	23a0      	movs	r3, #160	@ 0xa0
 8000c56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c60:	f107 0310 	add.w	r3, r7, #16
 8000c64:	4619      	mov	r1, r3
 8000c66:	480f      	ldr	r0, [pc, #60]	@ (8000ca4 <HAL_SPI_MspInit+0xa0>)
 8000c68:	f000 fb62 	bl	8001330 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c6c:	2340      	movs	r3, #64	@ 0x40
 8000c6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c78:	f107 0310 	add.w	r3, r7, #16
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4809      	ldr	r0, [pc, #36]	@ (8000ca4 <HAL_SPI_MspInit+0xa0>)
 8000c80:	f000 fb56 	bl	8001330 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000c84:	2200      	movs	r2, #0
 8000c86:	2100      	movs	r1, #0
 8000c88:	2023      	movs	r0, #35	@ 0x23
 8000c8a:	f000 fa68 	bl	800115e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000c8e:	2023      	movs	r0, #35	@ 0x23
 8000c90:	f000 fa81 	bl	8001196 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000c94:	bf00      	nop
 8000c96:	3720      	adds	r7, #32
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40013000 	.word	0x40013000
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	40010800 	.word	0x40010800

08000ca8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b088      	sub	sp, #32
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 0310 	add.w	r3, r7, #16
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a20      	ldr	r2, [pc, #128]	@ (8000d44 <HAL_UART_MspInit+0x9c>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d139      	bne.n	8000d3c <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cc8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d48 <HAL_UART_MspInit+0xa0>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	4a1e      	ldr	r2, [pc, #120]	@ (8000d48 <HAL_UART_MspInit+0xa0>)
 8000cce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cd2:	6193      	str	r3, [r2, #24]
 8000cd4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d48 <HAL_UART_MspInit+0xa0>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce0:	4b19      	ldr	r3, [pc, #100]	@ (8000d48 <HAL_UART_MspInit+0xa0>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	4a18      	ldr	r2, [pc, #96]	@ (8000d48 <HAL_UART_MspInit+0xa0>)
 8000ce6:	f043 0304 	orr.w	r3, r3, #4
 8000cea:	6193      	str	r3, [r2, #24]
 8000cec:	4b16      	ldr	r3, [pc, #88]	@ (8000d48 <HAL_UART_MspInit+0xa0>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	f003 0304 	and.w	r3, r3, #4
 8000cf4:	60bb      	str	r3, [r7, #8]
 8000cf6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cf8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cfc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d02:	2303      	movs	r3, #3
 8000d04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d06:	f107 0310 	add.w	r3, r7, #16
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	480f      	ldr	r0, [pc, #60]	@ (8000d4c <HAL_UART_MspInit+0xa4>)
 8000d0e:	f000 fb0f 	bl	8001330 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d20:	f107 0310 	add.w	r3, r7, #16
 8000d24:	4619      	mov	r1, r3
 8000d26:	4809      	ldr	r0, [pc, #36]	@ (8000d4c <HAL_UART_MspInit+0xa4>)
 8000d28:	f000 fb02 	bl	8001330 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2100      	movs	r1, #0
 8000d30:	2025      	movs	r0, #37	@ 0x25
 8000d32:	f000 fa14 	bl	800115e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d36:	2025      	movs	r0, #37	@ 0x25
 8000d38:	f000 fa2d 	bl	8001196 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000d3c:	bf00      	nop
 8000d3e:	3720      	adds	r7, #32
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40013800 	.word	0x40013800
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	40010800 	.word	0x40010800

08000d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d54:	bf00      	nop
 8000d56:	e7fd      	b.n	8000d54 <NMI_Handler+0x4>

08000d58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d5c:	bf00      	nop
 8000d5e:	e7fd      	b.n	8000d5c <HardFault_Handler+0x4>

08000d60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <MemManage_Handler+0x4>

08000d68 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <BusFault_Handler+0x4>

08000d70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <UsageFault_Handler+0x4>

08000d78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr

08000d84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr

08000d90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr

08000d9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000da0:	f000 f8c6 	bl	8000f30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000dac:	2001      	movs	r0, #1
 8000dae:	f000 fc5b 	bl	8001668 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000dbc:	4802      	ldr	r0, [pc, #8]	@ (8000dc8 <SPI1_IRQHandler+0x10>)
 8000dbe:	f001 fd15 	bl	80027ec <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000080 	.word	0x20000080

08000dcc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000dd0:	4802      	ldr	r0, [pc, #8]	@ (8000ddc <USART1_IRQHandler+0x10>)
 8000dd2:	f001 ffdb 	bl	8002d8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	200000d8 	.word	0x200000d8

08000de0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de8:	4a14      	ldr	r2, [pc, #80]	@ (8000e3c <_sbrk+0x5c>)
 8000dea:	4b15      	ldr	r3, [pc, #84]	@ (8000e40 <_sbrk+0x60>)
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df4:	4b13      	ldr	r3, [pc, #76]	@ (8000e44 <_sbrk+0x64>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d102      	bne.n	8000e02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dfc:	4b11      	ldr	r3, [pc, #68]	@ (8000e44 <_sbrk+0x64>)
 8000dfe:	4a12      	ldr	r2, [pc, #72]	@ (8000e48 <_sbrk+0x68>)
 8000e00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e02:	4b10      	ldr	r3, [pc, #64]	@ (8000e44 <_sbrk+0x64>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d207      	bcs.n	8000e20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e10:	f002 fd4a 	bl	80038a8 <__errno>
 8000e14:	4603      	mov	r3, r0
 8000e16:	220c      	movs	r2, #12
 8000e18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1e:	e009      	b.n	8000e34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e20:	4b08      	ldr	r3, [pc, #32]	@ (8000e44 <_sbrk+0x64>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e26:	4b07      	ldr	r3, [pc, #28]	@ (8000e44 <_sbrk+0x64>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	4a05      	ldr	r2, [pc, #20]	@ (8000e44 <_sbrk+0x64>)
 8000e30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e32:	68fb      	ldr	r3, [r7, #12]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20005000 	.word	0x20005000
 8000e40:	00000400 	.word	0x00000400
 8000e44:	20000124 	.word	0x20000124
 8000e48:	20000278 	.word	0x20000278

08000e4c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr

08000e58 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e58:	f7ff fff8 	bl	8000e4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e5c:	480b      	ldr	r0, [pc, #44]	@ (8000e8c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e5e:	490c      	ldr	r1, [pc, #48]	@ (8000e90 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e60:	4a0c      	ldr	r2, [pc, #48]	@ (8000e94 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e64:	e002      	b.n	8000e6c <LoopCopyDataInit>

08000e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6a:	3304      	adds	r3, #4

08000e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e70:	d3f9      	bcc.n	8000e66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e72:	4a09      	ldr	r2, [pc, #36]	@ (8000e98 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e74:	4c09      	ldr	r4, [pc, #36]	@ (8000e9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e78:	e001      	b.n	8000e7e <LoopFillZerobss>

08000e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e7c:	3204      	adds	r2, #4

08000e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e80:	d3fb      	bcc.n	8000e7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e82:	f002 fd17 	bl	80038b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e86:	f7ff fd0b 	bl	80008a0 <main>
  bx lr
 8000e8a:	4770      	bx	lr
  ldr r0, =_sdata
 8000e8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e90:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000e94:	08004288 	.word	0x08004288
  ldr r2, =_sbss
 8000e98:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000e9c:	20000274 	.word	0x20000274

08000ea0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ea0:	e7fe      	b.n	8000ea0 <ADC1_2_IRQHandler>
	...

08000ea4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea8:	4b08      	ldr	r3, [pc, #32]	@ (8000ecc <HAL_Init+0x28>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a07      	ldr	r2, [pc, #28]	@ (8000ecc <HAL_Init+0x28>)
 8000eae:	f043 0310 	orr.w	r3, r3, #16
 8000eb2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb4:	2003      	movs	r0, #3
 8000eb6:	f000 f947 	bl	8001148 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eba:	200f      	movs	r0, #15
 8000ebc:	f000 f808 	bl	8000ed0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec0:	f7ff fe6e 	bl	8000ba0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40022000 	.word	0x40022000

08000ed0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed8:	4b12      	ldr	r3, [pc, #72]	@ (8000f24 <HAL_InitTick+0x54>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	4b12      	ldr	r3, [pc, #72]	@ (8000f28 <HAL_InitTick+0x58>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ee6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 f95f 	bl	80011b2 <HAL_SYSTICK_Config>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e00e      	b.n	8000f1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d80a      	bhi.n	8000f1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f04:	2200      	movs	r2, #0
 8000f06:	6879      	ldr	r1, [r7, #4]
 8000f08:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0c:	f000 f927 	bl	800115e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f10:	4a06      	ldr	r2, [pc, #24]	@ (8000f2c <HAL_InitTick+0x5c>)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f16:	2300      	movs	r3, #0
 8000f18:	e000      	b.n	8000f1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000008 	.word	0x20000008
 8000f28:	20000010 	.word	0x20000010
 8000f2c:	2000000c 	.word	0x2000000c

08000f30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f34:	4b05      	ldr	r3, [pc, #20]	@ (8000f4c <HAL_IncTick+0x1c>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4b05      	ldr	r3, [pc, #20]	@ (8000f50 <HAL_IncTick+0x20>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4413      	add	r3, r2
 8000f40:	4a03      	ldr	r2, [pc, #12]	@ (8000f50 <HAL_IncTick+0x20>)
 8000f42:	6013      	str	r3, [r2, #0]
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr
 8000f4c:	20000010 	.word	0x20000010
 8000f50:	20000128 	.word	0x20000128

08000f54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return uwTick;
 8000f58:	4b02      	ldr	r3, [pc, #8]	@ (8000f64 <HAL_GetTick+0x10>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc80      	pop	{r7}
 8000f62:	4770      	bx	lr
 8000f64:	20000128 	.word	0x20000128

08000f68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f70:	f7ff fff0 	bl	8000f54 <HAL_GetTick>
 8000f74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f80:	d005      	beq.n	8000f8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f82:	4b0a      	ldr	r3, [pc, #40]	@ (8000fac <HAL_Delay+0x44>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	461a      	mov	r2, r3
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f8e:	bf00      	nop
 8000f90:	f7ff ffe0 	bl	8000f54 <HAL_GetTick>
 8000f94:	4602      	mov	r2, r0
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d8f7      	bhi.n	8000f90 <HAL_Delay+0x28>
  {
  }
}
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000010 	.word	0x20000010

08000fb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fc6:	68ba      	ldr	r2, [r7, #8]
 8000fc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fcc:	4013      	ands	r3, r2
 8000fce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fe0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fe2:	4a04      	ldr	r2, [pc, #16]	@ (8000ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	60d3      	str	r3, [r2, #12]
}
 8000fe8:	bf00      	nop
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bc80      	pop	{r7}
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ffc:	4b04      	ldr	r3, [pc, #16]	@ (8001010 <__NVIC_GetPriorityGrouping+0x18>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	0a1b      	lsrs	r3, r3, #8
 8001002:	f003 0307 	and.w	r3, r3, #7
}
 8001006:	4618      	mov	r0, r3
 8001008:	46bd      	mov	sp, r7
 800100a:	bc80      	pop	{r7}
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	2b00      	cmp	r3, #0
 8001024:	db0b      	blt.n	800103e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	f003 021f 	and.w	r2, r3, #31
 800102c:	4906      	ldr	r1, [pc, #24]	@ (8001048 <__NVIC_EnableIRQ+0x34>)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	095b      	lsrs	r3, r3, #5
 8001034:	2001      	movs	r0, #1
 8001036:	fa00 f202 	lsl.w	r2, r0, r2
 800103a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	bc80      	pop	{r7}
 8001046:	4770      	bx	lr
 8001048:	e000e100 	.word	0xe000e100

0800104c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	6039      	str	r1, [r7, #0]
 8001056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105c:	2b00      	cmp	r3, #0
 800105e:	db0a      	blt.n	8001076 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	b2da      	uxtb	r2, r3
 8001064:	490c      	ldr	r1, [pc, #48]	@ (8001098 <__NVIC_SetPriority+0x4c>)
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	0112      	lsls	r2, r2, #4
 800106c:	b2d2      	uxtb	r2, r2
 800106e:	440b      	add	r3, r1
 8001070:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001074:	e00a      	b.n	800108c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	b2da      	uxtb	r2, r3
 800107a:	4908      	ldr	r1, [pc, #32]	@ (800109c <__NVIC_SetPriority+0x50>)
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	f003 030f 	and.w	r3, r3, #15
 8001082:	3b04      	subs	r3, #4
 8001084:	0112      	lsls	r2, r2, #4
 8001086:	b2d2      	uxtb	r2, r2
 8001088:	440b      	add	r3, r1
 800108a:	761a      	strb	r2, [r3, #24]
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	bc80      	pop	{r7}
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	e000e100 	.word	0xe000e100
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b089      	sub	sp, #36	@ 0x24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	f1c3 0307 	rsb	r3, r3, #7
 80010ba:	2b04      	cmp	r3, #4
 80010bc:	bf28      	it	cs
 80010be:	2304      	movcs	r3, #4
 80010c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3304      	adds	r3, #4
 80010c6:	2b06      	cmp	r3, #6
 80010c8:	d902      	bls.n	80010d0 <NVIC_EncodePriority+0x30>
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3b03      	subs	r3, #3
 80010ce:	e000      	b.n	80010d2 <NVIC_EncodePriority+0x32>
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d4:	f04f 32ff 	mov.w	r2, #4294967295
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43da      	mvns	r2, r3
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	401a      	ands	r2, r3
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e8:	f04f 31ff 	mov.w	r1, #4294967295
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	fa01 f303 	lsl.w	r3, r1, r3
 80010f2:	43d9      	mvns	r1, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f8:	4313      	orrs	r3, r2
         );
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3724      	adds	r7, #36	@ 0x24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr

08001104 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3b01      	subs	r3, #1
 8001110:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001114:	d301      	bcc.n	800111a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001116:	2301      	movs	r3, #1
 8001118:	e00f      	b.n	800113a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800111a:	4a0a      	ldr	r2, [pc, #40]	@ (8001144 <SysTick_Config+0x40>)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3b01      	subs	r3, #1
 8001120:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001122:	210f      	movs	r1, #15
 8001124:	f04f 30ff 	mov.w	r0, #4294967295
 8001128:	f7ff ff90 	bl	800104c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800112c:	4b05      	ldr	r3, [pc, #20]	@ (8001144 <SysTick_Config+0x40>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001132:	4b04      	ldr	r3, [pc, #16]	@ (8001144 <SysTick_Config+0x40>)
 8001134:	2207      	movs	r2, #7
 8001136:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	e000e010 	.word	0xe000e010

08001148 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff ff2d 	bl	8000fb0 <__NVIC_SetPriorityGrouping>
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800115e:	b580      	push	{r7, lr}
 8001160:	b086      	sub	sp, #24
 8001162:	af00      	add	r7, sp, #0
 8001164:	4603      	mov	r3, r0
 8001166:	60b9      	str	r1, [r7, #8]
 8001168:	607a      	str	r2, [r7, #4]
 800116a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001170:	f7ff ff42 	bl	8000ff8 <__NVIC_GetPriorityGrouping>
 8001174:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	68b9      	ldr	r1, [r7, #8]
 800117a:	6978      	ldr	r0, [r7, #20]
 800117c:	f7ff ff90 	bl	80010a0 <NVIC_EncodePriority>
 8001180:	4602      	mov	r2, r0
 8001182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001186:	4611      	mov	r1, r2
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff5f 	bl	800104c <__NVIC_SetPriority>
}
 800118e:	bf00      	nop
 8001190:	3718      	adds	r7, #24
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	4603      	mov	r3, r0
 800119e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff35 	bl	8001014 <__NVIC_EnableIRQ>
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f7ff ffa2 	bl	8001104 <SysTick_Config>
 80011c0:	4603      	mov	r3, r0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011ca:	b480      	push	{r7}
 80011cc:	b085      	sub	sp, #20
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011d2:	2300      	movs	r3, #0
 80011d4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d008      	beq.n	80011f4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2204      	movs	r2, #4
 80011e6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2200      	movs	r2, #0
 80011ec:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e020      	b.n	8001236 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f022 020e 	bic.w	r2, r2, #14
 8001202:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f022 0201 	bic.w	r2, r2, #1
 8001212:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800121c:	2101      	movs	r1, #1
 800121e:	fa01 f202 	lsl.w	r2, r1, r2
 8001222:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2201      	movs	r2, #1
 8001228:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001234:	7bfb      	ldrb	r3, [r7, #15]
}
 8001236:	4618      	mov	r0, r3
 8001238:	3714      	adds	r7, #20
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr

08001240 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001248:	2300      	movs	r3, #0
 800124a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b02      	cmp	r3, #2
 8001256:	d005      	beq.n	8001264 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2204      	movs	r2, #4
 800125c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	73fb      	strb	r3, [r7, #15]
 8001262:	e051      	b.n	8001308 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f022 020e 	bic.w	r2, r2, #14
 8001272:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f022 0201 	bic.w	r2, r2, #1
 8001282:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a22      	ldr	r2, [pc, #136]	@ (8001314 <HAL_DMA_Abort_IT+0xd4>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d029      	beq.n	80012e2 <HAL_DMA_Abort_IT+0xa2>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a21      	ldr	r2, [pc, #132]	@ (8001318 <HAL_DMA_Abort_IT+0xd8>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d022      	beq.n	80012de <HAL_DMA_Abort_IT+0x9e>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a1f      	ldr	r2, [pc, #124]	@ (800131c <HAL_DMA_Abort_IT+0xdc>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d01a      	beq.n	80012d8 <HAL_DMA_Abort_IT+0x98>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001320 <HAL_DMA_Abort_IT+0xe0>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d012      	beq.n	80012d2 <HAL_DMA_Abort_IT+0x92>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a1c      	ldr	r2, [pc, #112]	@ (8001324 <HAL_DMA_Abort_IT+0xe4>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d00a      	beq.n	80012cc <HAL_DMA_Abort_IT+0x8c>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a1b      	ldr	r2, [pc, #108]	@ (8001328 <HAL_DMA_Abort_IT+0xe8>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d102      	bne.n	80012c6 <HAL_DMA_Abort_IT+0x86>
 80012c0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80012c4:	e00e      	b.n	80012e4 <HAL_DMA_Abort_IT+0xa4>
 80012c6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80012ca:	e00b      	b.n	80012e4 <HAL_DMA_Abort_IT+0xa4>
 80012cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012d0:	e008      	b.n	80012e4 <HAL_DMA_Abort_IT+0xa4>
 80012d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012d6:	e005      	b.n	80012e4 <HAL_DMA_Abort_IT+0xa4>
 80012d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012dc:	e002      	b.n	80012e4 <HAL_DMA_Abort_IT+0xa4>
 80012de:	2310      	movs	r3, #16
 80012e0:	e000      	b.n	80012e4 <HAL_DMA_Abort_IT+0xa4>
 80012e2:	2301      	movs	r3, #1
 80012e4:	4a11      	ldr	r2, [pc, #68]	@ (800132c <HAL_DMA_Abort_IT+0xec>)
 80012e6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2201      	movs	r2, #1
 80012ec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d003      	beq.n	8001308 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	4798      	blx	r3
    } 
  }
  return status;
 8001308:	7bfb      	ldrb	r3, [r7, #15]
}
 800130a:	4618      	mov	r0, r3
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40020008 	.word	0x40020008
 8001318:	4002001c 	.word	0x4002001c
 800131c:	40020030 	.word	0x40020030
 8001320:	40020044 	.word	0x40020044
 8001324:	40020058 	.word	0x40020058
 8001328:	4002006c 	.word	0x4002006c
 800132c:	40020000 	.word	0x40020000

08001330 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001330:	b480      	push	{r7}
 8001332:	b08b      	sub	sp, #44	@ 0x2c
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800133a:	2300      	movs	r3, #0
 800133c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800133e:	2300      	movs	r3, #0
 8001340:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001342:	e169      	b.n	8001618 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001344:	2201      	movs	r2, #1
 8001346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	69fa      	ldr	r2, [r7, #28]
 8001354:	4013      	ands	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	429a      	cmp	r2, r3
 800135e:	f040 8158 	bne.w	8001612 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	4a9a      	ldr	r2, [pc, #616]	@ (80015d0 <HAL_GPIO_Init+0x2a0>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d05e      	beq.n	800142a <HAL_GPIO_Init+0xfa>
 800136c:	4a98      	ldr	r2, [pc, #608]	@ (80015d0 <HAL_GPIO_Init+0x2a0>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d875      	bhi.n	800145e <HAL_GPIO_Init+0x12e>
 8001372:	4a98      	ldr	r2, [pc, #608]	@ (80015d4 <HAL_GPIO_Init+0x2a4>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d058      	beq.n	800142a <HAL_GPIO_Init+0xfa>
 8001378:	4a96      	ldr	r2, [pc, #600]	@ (80015d4 <HAL_GPIO_Init+0x2a4>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d86f      	bhi.n	800145e <HAL_GPIO_Init+0x12e>
 800137e:	4a96      	ldr	r2, [pc, #600]	@ (80015d8 <HAL_GPIO_Init+0x2a8>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d052      	beq.n	800142a <HAL_GPIO_Init+0xfa>
 8001384:	4a94      	ldr	r2, [pc, #592]	@ (80015d8 <HAL_GPIO_Init+0x2a8>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d869      	bhi.n	800145e <HAL_GPIO_Init+0x12e>
 800138a:	4a94      	ldr	r2, [pc, #592]	@ (80015dc <HAL_GPIO_Init+0x2ac>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d04c      	beq.n	800142a <HAL_GPIO_Init+0xfa>
 8001390:	4a92      	ldr	r2, [pc, #584]	@ (80015dc <HAL_GPIO_Init+0x2ac>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d863      	bhi.n	800145e <HAL_GPIO_Init+0x12e>
 8001396:	4a92      	ldr	r2, [pc, #584]	@ (80015e0 <HAL_GPIO_Init+0x2b0>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d046      	beq.n	800142a <HAL_GPIO_Init+0xfa>
 800139c:	4a90      	ldr	r2, [pc, #576]	@ (80015e0 <HAL_GPIO_Init+0x2b0>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d85d      	bhi.n	800145e <HAL_GPIO_Init+0x12e>
 80013a2:	2b12      	cmp	r3, #18
 80013a4:	d82a      	bhi.n	80013fc <HAL_GPIO_Init+0xcc>
 80013a6:	2b12      	cmp	r3, #18
 80013a8:	d859      	bhi.n	800145e <HAL_GPIO_Init+0x12e>
 80013aa:	a201      	add	r2, pc, #4	@ (adr r2, 80013b0 <HAL_GPIO_Init+0x80>)
 80013ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b0:	0800142b 	.word	0x0800142b
 80013b4:	08001405 	.word	0x08001405
 80013b8:	08001417 	.word	0x08001417
 80013bc:	08001459 	.word	0x08001459
 80013c0:	0800145f 	.word	0x0800145f
 80013c4:	0800145f 	.word	0x0800145f
 80013c8:	0800145f 	.word	0x0800145f
 80013cc:	0800145f 	.word	0x0800145f
 80013d0:	0800145f 	.word	0x0800145f
 80013d4:	0800145f 	.word	0x0800145f
 80013d8:	0800145f 	.word	0x0800145f
 80013dc:	0800145f 	.word	0x0800145f
 80013e0:	0800145f 	.word	0x0800145f
 80013e4:	0800145f 	.word	0x0800145f
 80013e8:	0800145f 	.word	0x0800145f
 80013ec:	0800145f 	.word	0x0800145f
 80013f0:	0800145f 	.word	0x0800145f
 80013f4:	0800140d 	.word	0x0800140d
 80013f8:	08001421 	.word	0x08001421
 80013fc:	4a79      	ldr	r2, [pc, #484]	@ (80015e4 <HAL_GPIO_Init+0x2b4>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d013      	beq.n	800142a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001402:	e02c      	b.n	800145e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	623b      	str	r3, [r7, #32]
          break;
 800140a:	e029      	b.n	8001460 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	3304      	adds	r3, #4
 8001412:	623b      	str	r3, [r7, #32]
          break;
 8001414:	e024      	b.n	8001460 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	3308      	adds	r3, #8
 800141c:	623b      	str	r3, [r7, #32]
          break;
 800141e:	e01f      	b.n	8001460 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	330c      	adds	r3, #12
 8001426:	623b      	str	r3, [r7, #32]
          break;
 8001428:	e01a      	b.n	8001460 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d102      	bne.n	8001438 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001432:	2304      	movs	r3, #4
 8001434:	623b      	str	r3, [r7, #32]
          break;
 8001436:	e013      	b.n	8001460 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d105      	bne.n	800144c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001440:	2308      	movs	r3, #8
 8001442:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	69fa      	ldr	r2, [r7, #28]
 8001448:	611a      	str	r2, [r3, #16]
          break;
 800144a:	e009      	b.n	8001460 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800144c:	2308      	movs	r3, #8
 800144e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	69fa      	ldr	r2, [r7, #28]
 8001454:	615a      	str	r2, [r3, #20]
          break;
 8001456:	e003      	b.n	8001460 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001458:	2300      	movs	r3, #0
 800145a:	623b      	str	r3, [r7, #32]
          break;
 800145c:	e000      	b.n	8001460 <HAL_GPIO_Init+0x130>
          break;
 800145e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	2bff      	cmp	r3, #255	@ 0xff
 8001464:	d801      	bhi.n	800146a <HAL_GPIO_Init+0x13a>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	e001      	b.n	800146e <HAL_GPIO_Init+0x13e>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	3304      	adds	r3, #4
 800146e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	2bff      	cmp	r3, #255	@ 0xff
 8001474:	d802      	bhi.n	800147c <HAL_GPIO_Init+0x14c>
 8001476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	e002      	b.n	8001482 <HAL_GPIO_Init+0x152>
 800147c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800147e:	3b08      	subs	r3, #8
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	210f      	movs	r1, #15
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	fa01 f303 	lsl.w	r3, r1, r3
 8001490:	43db      	mvns	r3, r3
 8001492:	401a      	ands	r2, r3
 8001494:	6a39      	ldr	r1, [r7, #32]
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	fa01 f303 	lsl.w	r3, r1, r3
 800149c:	431a      	orrs	r2, r3
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f000 80b1 	beq.w	8001612 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014b0:	4b4d      	ldr	r3, [pc, #308]	@ (80015e8 <HAL_GPIO_Init+0x2b8>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	4a4c      	ldr	r2, [pc, #304]	@ (80015e8 <HAL_GPIO_Init+0x2b8>)
 80014b6:	f043 0301 	orr.w	r3, r3, #1
 80014ba:	6193      	str	r3, [r2, #24]
 80014bc:	4b4a      	ldr	r3, [pc, #296]	@ (80015e8 <HAL_GPIO_Init+0x2b8>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	f003 0301 	and.w	r3, r3, #1
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014c8:	4a48      	ldr	r2, [pc, #288]	@ (80015ec <HAL_GPIO_Init+0x2bc>)
 80014ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014cc:	089b      	lsrs	r3, r3, #2
 80014ce:	3302      	adds	r3, #2
 80014d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d8:	f003 0303 	and.w	r3, r3, #3
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	220f      	movs	r2, #15
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	4013      	ands	r3, r2
 80014ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a40      	ldr	r2, [pc, #256]	@ (80015f0 <HAL_GPIO_Init+0x2c0>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d013      	beq.n	800151c <HAL_GPIO_Init+0x1ec>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4a3f      	ldr	r2, [pc, #252]	@ (80015f4 <HAL_GPIO_Init+0x2c4>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d00d      	beq.n	8001518 <HAL_GPIO_Init+0x1e8>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a3e      	ldr	r2, [pc, #248]	@ (80015f8 <HAL_GPIO_Init+0x2c8>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d007      	beq.n	8001514 <HAL_GPIO_Init+0x1e4>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4a3d      	ldr	r2, [pc, #244]	@ (80015fc <HAL_GPIO_Init+0x2cc>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d101      	bne.n	8001510 <HAL_GPIO_Init+0x1e0>
 800150c:	2303      	movs	r3, #3
 800150e:	e006      	b.n	800151e <HAL_GPIO_Init+0x1ee>
 8001510:	2304      	movs	r3, #4
 8001512:	e004      	b.n	800151e <HAL_GPIO_Init+0x1ee>
 8001514:	2302      	movs	r3, #2
 8001516:	e002      	b.n	800151e <HAL_GPIO_Init+0x1ee>
 8001518:	2301      	movs	r3, #1
 800151a:	e000      	b.n	800151e <HAL_GPIO_Init+0x1ee>
 800151c:	2300      	movs	r3, #0
 800151e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001520:	f002 0203 	and.w	r2, r2, #3
 8001524:	0092      	lsls	r2, r2, #2
 8001526:	4093      	lsls	r3, r2
 8001528:	68fa      	ldr	r2, [r7, #12]
 800152a:	4313      	orrs	r3, r2
 800152c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800152e:	492f      	ldr	r1, [pc, #188]	@ (80015ec <HAL_GPIO_Init+0x2bc>)
 8001530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001532:	089b      	lsrs	r3, r3, #2
 8001534:	3302      	adds	r3, #2
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d006      	beq.n	8001556 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001548:	4b2d      	ldr	r3, [pc, #180]	@ (8001600 <HAL_GPIO_Init+0x2d0>)
 800154a:	689a      	ldr	r2, [r3, #8]
 800154c:	492c      	ldr	r1, [pc, #176]	@ (8001600 <HAL_GPIO_Init+0x2d0>)
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	4313      	orrs	r3, r2
 8001552:	608b      	str	r3, [r1, #8]
 8001554:	e006      	b.n	8001564 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001556:	4b2a      	ldr	r3, [pc, #168]	@ (8001600 <HAL_GPIO_Init+0x2d0>)
 8001558:	689a      	ldr	r2, [r3, #8]
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	43db      	mvns	r3, r3
 800155e:	4928      	ldr	r1, [pc, #160]	@ (8001600 <HAL_GPIO_Init+0x2d0>)
 8001560:	4013      	ands	r3, r2
 8001562:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d006      	beq.n	800157e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001570:	4b23      	ldr	r3, [pc, #140]	@ (8001600 <HAL_GPIO_Init+0x2d0>)
 8001572:	68da      	ldr	r2, [r3, #12]
 8001574:	4922      	ldr	r1, [pc, #136]	@ (8001600 <HAL_GPIO_Init+0x2d0>)
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	4313      	orrs	r3, r2
 800157a:	60cb      	str	r3, [r1, #12]
 800157c:	e006      	b.n	800158c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800157e:	4b20      	ldr	r3, [pc, #128]	@ (8001600 <HAL_GPIO_Init+0x2d0>)
 8001580:	68da      	ldr	r2, [r3, #12]
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	43db      	mvns	r3, r3
 8001586:	491e      	ldr	r1, [pc, #120]	@ (8001600 <HAL_GPIO_Init+0x2d0>)
 8001588:	4013      	ands	r3, r2
 800158a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d006      	beq.n	80015a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001598:	4b19      	ldr	r3, [pc, #100]	@ (8001600 <HAL_GPIO_Init+0x2d0>)
 800159a:	685a      	ldr	r2, [r3, #4]
 800159c:	4918      	ldr	r1, [pc, #96]	@ (8001600 <HAL_GPIO_Init+0x2d0>)
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	604b      	str	r3, [r1, #4]
 80015a4:	e006      	b.n	80015b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015a6:	4b16      	ldr	r3, [pc, #88]	@ (8001600 <HAL_GPIO_Init+0x2d0>)
 80015a8:	685a      	ldr	r2, [r3, #4]
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	43db      	mvns	r3, r3
 80015ae:	4914      	ldr	r1, [pc, #80]	@ (8001600 <HAL_GPIO_Init+0x2d0>)
 80015b0:	4013      	ands	r3, r2
 80015b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d021      	beq.n	8001604 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001600 <HAL_GPIO_Init+0x2d0>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	490e      	ldr	r1, [pc, #56]	@ (8001600 <HAL_GPIO_Init+0x2d0>)
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	600b      	str	r3, [r1, #0]
 80015cc:	e021      	b.n	8001612 <HAL_GPIO_Init+0x2e2>
 80015ce:	bf00      	nop
 80015d0:	10320000 	.word	0x10320000
 80015d4:	10310000 	.word	0x10310000
 80015d8:	10220000 	.word	0x10220000
 80015dc:	10210000 	.word	0x10210000
 80015e0:	10120000 	.word	0x10120000
 80015e4:	10110000 	.word	0x10110000
 80015e8:	40021000 	.word	0x40021000
 80015ec:	40010000 	.word	0x40010000
 80015f0:	40010800 	.word	0x40010800
 80015f4:	40010c00 	.word	0x40010c00
 80015f8:	40011000 	.word	0x40011000
 80015fc:	40011400 	.word	0x40011400
 8001600:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001604:	4b0b      	ldr	r3, [pc, #44]	@ (8001634 <HAL_GPIO_Init+0x304>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	43db      	mvns	r3, r3
 800160c:	4909      	ldr	r1, [pc, #36]	@ (8001634 <HAL_GPIO_Init+0x304>)
 800160e:	4013      	ands	r3, r2
 8001610:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001614:	3301      	adds	r3, #1
 8001616:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161e:	fa22 f303 	lsr.w	r3, r2, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	f47f ae8e 	bne.w	8001344 <HAL_GPIO_Init+0x14>
  }
}
 8001628:	bf00      	nop
 800162a:	bf00      	nop
 800162c:	372c      	adds	r7, #44	@ 0x2c
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr
 8001634:	40010400 	.word	0x40010400

08001638 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	460b      	mov	r3, r1
 8001642:	807b      	strh	r3, [r7, #2]
 8001644:	4613      	mov	r3, r2
 8001646:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001648:	787b      	ldrb	r3, [r7, #1]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800164e:	887a      	ldrh	r2, [r7, #2]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001654:	e003      	b.n	800165e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001656:	887b      	ldrh	r3, [r7, #2]
 8001658:	041a      	lsls	r2, r3, #16
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	611a      	str	r2, [r3, #16]
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr

08001668 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001672:	4b08      	ldr	r3, [pc, #32]	@ (8001694 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001674:	695a      	ldr	r2, [r3, #20]
 8001676:	88fb      	ldrh	r3, [r7, #6]
 8001678:	4013      	ands	r3, r2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d006      	beq.n	800168c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800167e:	4a05      	ldr	r2, [pc, #20]	@ (8001694 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001680:	88fb      	ldrh	r3, [r7, #6]
 8001682:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001684:	88fb      	ldrh	r3, [r7, #6]
 8001686:	4618      	mov	r0, r3
 8001688:	f000 f806 	bl	8001698 <HAL_GPIO_EXTI_Callback>
  }
}
 800168c:	bf00      	nop
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40010400 	.word	0x40010400

08001698 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80016a2:	bf00      	nop
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr

080016ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e272      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f000 8087 	beq.w	80017da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016cc:	4b92      	ldr	r3, [pc, #584]	@ (8001918 <HAL_RCC_OscConfig+0x26c>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f003 030c 	and.w	r3, r3, #12
 80016d4:	2b04      	cmp	r3, #4
 80016d6:	d00c      	beq.n	80016f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016d8:	4b8f      	ldr	r3, [pc, #572]	@ (8001918 <HAL_RCC_OscConfig+0x26c>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f003 030c 	and.w	r3, r3, #12
 80016e0:	2b08      	cmp	r3, #8
 80016e2:	d112      	bne.n	800170a <HAL_RCC_OscConfig+0x5e>
 80016e4:	4b8c      	ldr	r3, [pc, #560]	@ (8001918 <HAL_RCC_OscConfig+0x26c>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016f0:	d10b      	bne.n	800170a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f2:	4b89      	ldr	r3, [pc, #548]	@ (8001918 <HAL_RCC_OscConfig+0x26c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d06c      	beq.n	80017d8 <HAL_RCC_OscConfig+0x12c>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d168      	bne.n	80017d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e24c      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001712:	d106      	bne.n	8001722 <HAL_RCC_OscConfig+0x76>
 8001714:	4b80      	ldr	r3, [pc, #512]	@ (8001918 <HAL_RCC_OscConfig+0x26c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a7f      	ldr	r2, [pc, #508]	@ (8001918 <HAL_RCC_OscConfig+0x26c>)
 800171a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800171e:	6013      	str	r3, [r2, #0]
 8001720:	e02e      	b.n	8001780 <HAL_RCC_OscConfig+0xd4>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d10c      	bne.n	8001744 <HAL_RCC_OscConfig+0x98>
 800172a:	4b7b      	ldr	r3, [pc, #492]	@ (8001918 <HAL_RCC_OscConfig+0x26c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a7a      	ldr	r2, [pc, #488]	@ (8001918 <HAL_RCC_OscConfig+0x26c>)
 8001730:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	4b78      	ldr	r3, [pc, #480]	@ (8001918 <HAL_RCC_OscConfig+0x26c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a77      	ldr	r2, [pc, #476]	@ (8001918 <HAL_RCC_OscConfig+0x26c>)
 800173c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001740:	6013      	str	r3, [r2, #0]
 8001742:	e01d      	b.n	8001780 <HAL_RCC_OscConfig+0xd4>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800174c:	d10c      	bne.n	8001768 <HAL_RCC_OscConfig+0xbc>
 800174e:	4b72      	ldr	r3, [pc, #456]	@ (8001918 <HAL_RCC_OscConfig+0x26c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a71      	ldr	r2, [pc, #452]	@ (8001918 <HAL_RCC_OscConfig+0x26c>)
 8001754:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	4b6f      	ldr	r3, [pc, #444]	@ (8001918 <HAL_RCC_OscConfig+0x26c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a6e      	ldr	r2, [pc, #440]	@ (8001918 <HAL_RCC_OscConfig+0x26c>)
 8001760:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	e00b      	b.n	8001780 <HAL_RCC_OscConfig+0xd4>
 8001768:	4b6b      	ldr	r3, [pc, #428]	@ (8001918 <HAL_RCC_OscConfig+0x26c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a6a      	ldr	r2, [pc, #424]	@ (8001918 <HAL_RCC_OscConfig+0x26c>)
 800176e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001772:	6013      	str	r3, [r2, #0]
 8001774:	4b68      	ldr	r3, [pc, #416]	@ (8001918 <HAL_RCC_OscConfig+0x26c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a67      	ldr	r2, [pc, #412]	@ (8001918 <HAL_RCC_OscConfig+0x26c>)
 800177a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800177e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d013      	beq.n	80017b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001788:	f7ff fbe4 	bl	8000f54 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001790:	f7ff fbe0 	bl	8000f54 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b64      	cmp	r3, #100	@ 0x64
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e200      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017a2:	4b5d      	ldr	r3, [pc, #372]	@ (8001918 <HAL_RCC_OscConfig+0x26c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d0f0      	beq.n	8001790 <HAL_RCC_OscConfig+0xe4>
 80017ae:	e014      	b.n	80017da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b0:	f7ff fbd0 	bl	8000f54 <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017b8:	f7ff fbcc 	bl	8000f54 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b64      	cmp	r3, #100	@ 0x64
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e1ec      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ca:	4b53      	ldr	r3, [pc, #332]	@ (8001918 <HAL_RCC_OscConfig+0x26c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1f0      	bne.n	80017b8 <HAL_RCC_OscConfig+0x10c>
 80017d6:	e000      	b.n	80017da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d063      	beq.n	80018ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017e6:	4b4c      	ldr	r3, [pc, #304]	@ (8001918 <HAL_RCC_OscConfig+0x26c>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f003 030c 	and.w	r3, r3, #12
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d00b      	beq.n	800180a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017f2:	4b49      	ldr	r3, [pc, #292]	@ (8001918 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f003 030c 	and.w	r3, r3, #12
 80017fa:	2b08      	cmp	r3, #8
 80017fc:	d11c      	bne.n	8001838 <HAL_RCC_OscConfig+0x18c>
 80017fe:	4b46      	ldr	r3, [pc, #280]	@ (8001918 <HAL_RCC_OscConfig+0x26c>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d116      	bne.n	8001838 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800180a:	4b43      	ldr	r3, [pc, #268]	@ (8001918 <HAL_RCC_OscConfig+0x26c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d005      	beq.n	8001822 <HAL_RCC_OscConfig+0x176>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d001      	beq.n	8001822 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e1c0      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001822:	4b3d      	ldr	r3, [pc, #244]	@ (8001918 <HAL_RCC_OscConfig+0x26c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	4939      	ldr	r1, [pc, #228]	@ (8001918 <HAL_RCC_OscConfig+0x26c>)
 8001832:	4313      	orrs	r3, r2
 8001834:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001836:	e03a      	b.n	80018ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d020      	beq.n	8001882 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001840:	4b36      	ldr	r3, [pc, #216]	@ (800191c <HAL_RCC_OscConfig+0x270>)
 8001842:	2201      	movs	r2, #1
 8001844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001846:	f7ff fb85 	bl	8000f54 <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800184c:	e008      	b.n	8001860 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800184e:	f7ff fb81 	bl	8000f54 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e1a1      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001860:	4b2d      	ldr	r3, [pc, #180]	@ (8001918 <HAL_RCC_OscConfig+0x26c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d0f0      	beq.n	800184e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800186c:	4b2a      	ldr	r3, [pc, #168]	@ (8001918 <HAL_RCC_OscConfig+0x26c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	695b      	ldr	r3, [r3, #20]
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	4927      	ldr	r1, [pc, #156]	@ (8001918 <HAL_RCC_OscConfig+0x26c>)
 800187c:	4313      	orrs	r3, r2
 800187e:	600b      	str	r3, [r1, #0]
 8001880:	e015      	b.n	80018ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001882:	4b26      	ldr	r3, [pc, #152]	@ (800191c <HAL_RCC_OscConfig+0x270>)
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001888:	f7ff fb64 	bl	8000f54 <HAL_GetTick>
 800188c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001890:	f7ff fb60 	bl	8000f54 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e180      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001918 <HAL_RCC_OscConfig+0x26c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1f0      	bne.n	8001890 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0308 	and.w	r3, r3, #8
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d03a      	beq.n	8001930 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d019      	beq.n	80018f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018c2:	4b17      	ldr	r3, [pc, #92]	@ (8001920 <HAL_RCC_OscConfig+0x274>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c8:	f7ff fb44 	bl	8000f54 <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018d0:	f7ff fb40 	bl	8000f54 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e160      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001918 <HAL_RCC_OscConfig+0x26c>)
 80018e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d0f0      	beq.n	80018d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018ee:	2001      	movs	r0, #1
 80018f0:	f000 face 	bl	8001e90 <RCC_Delay>
 80018f4:	e01c      	b.n	8001930 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001920 <HAL_RCC_OscConfig+0x274>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018fc:	f7ff fb2a 	bl	8000f54 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001902:	e00f      	b.n	8001924 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001904:	f7ff fb26 	bl	8000f54 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d908      	bls.n	8001924 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e146      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4f8>
 8001916:	bf00      	nop
 8001918:	40021000 	.word	0x40021000
 800191c:	42420000 	.word	0x42420000
 8001920:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001924:	4b92      	ldr	r3, [pc, #584]	@ (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 8001926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1e9      	bne.n	8001904 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	2b00      	cmp	r3, #0
 800193a:	f000 80a6 	beq.w	8001a8a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800193e:	2300      	movs	r3, #0
 8001940:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001942:	4b8b      	ldr	r3, [pc, #556]	@ (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d10d      	bne.n	800196a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800194e:	4b88      	ldr	r3, [pc, #544]	@ (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 8001950:	69db      	ldr	r3, [r3, #28]
 8001952:	4a87      	ldr	r2, [pc, #540]	@ (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 8001954:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001958:	61d3      	str	r3, [r2, #28]
 800195a:	4b85      	ldr	r3, [pc, #532]	@ (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001962:	60bb      	str	r3, [r7, #8]
 8001964:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001966:	2301      	movs	r3, #1
 8001968:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800196a:	4b82      	ldr	r3, [pc, #520]	@ (8001b74 <HAL_RCC_OscConfig+0x4c8>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001972:	2b00      	cmp	r3, #0
 8001974:	d118      	bne.n	80019a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001976:	4b7f      	ldr	r3, [pc, #508]	@ (8001b74 <HAL_RCC_OscConfig+0x4c8>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a7e      	ldr	r2, [pc, #504]	@ (8001b74 <HAL_RCC_OscConfig+0x4c8>)
 800197c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001980:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001982:	f7ff fae7 	bl	8000f54 <HAL_GetTick>
 8001986:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001988:	e008      	b.n	800199c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800198a:	f7ff fae3 	bl	8000f54 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b64      	cmp	r3, #100	@ 0x64
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e103      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800199c:	4b75      	ldr	r3, [pc, #468]	@ (8001b74 <HAL_RCC_OscConfig+0x4c8>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d0f0      	beq.n	800198a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d106      	bne.n	80019be <HAL_RCC_OscConfig+0x312>
 80019b0:	4b6f      	ldr	r3, [pc, #444]	@ (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 80019b2:	6a1b      	ldr	r3, [r3, #32]
 80019b4:	4a6e      	ldr	r2, [pc, #440]	@ (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 80019b6:	f043 0301 	orr.w	r3, r3, #1
 80019ba:	6213      	str	r3, [r2, #32]
 80019bc:	e02d      	b.n	8001a1a <HAL_RCC_OscConfig+0x36e>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d10c      	bne.n	80019e0 <HAL_RCC_OscConfig+0x334>
 80019c6:	4b6a      	ldr	r3, [pc, #424]	@ (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 80019c8:	6a1b      	ldr	r3, [r3, #32]
 80019ca:	4a69      	ldr	r2, [pc, #420]	@ (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 80019cc:	f023 0301 	bic.w	r3, r3, #1
 80019d0:	6213      	str	r3, [r2, #32]
 80019d2:	4b67      	ldr	r3, [pc, #412]	@ (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 80019d4:	6a1b      	ldr	r3, [r3, #32]
 80019d6:	4a66      	ldr	r2, [pc, #408]	@ (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 80019d8:	f023 0304 	bic.w	r3, r3, #4
 80019dc:	6213      	str	r3, [r2, #32]
 80019de:	e01c      	b.n	8001a1a <HAL_RCC_OscConfig+0x36e>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	2b05      	cmp	r3, #5
 80019e6:	d10c      	bne.n	8001a02 <HAL_RCC_OscConfig+0x356>
 80019e8:	4b61      	ldr	r3, [pc, #388]	@ (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 80019ea:	6a1b      	ldr	r3, [r3, #32]
 80019ec:	4a60      	ldr	r2, [pc, #384]	@ (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 80019ee:	f043 0304 	orr.w	r3, r3, #4
 80019f2:	6213      	str	r3, [r2, #32]
 80019f4:	4b5e      	ldr	r3, [pc, #376]	@ (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 80019f6:	6a1b      	ldr	r3, [r3, #32]
 80019f8:	4a5d      	ldr	r2, [pc, #372]	@ (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 80019fa:	f043 0301 	orr.w	r3, r3, #1
 80019fe:	6213      	str	r3, [r2, #32]
 8001a00:	e00b      	b.n	8001a1a <HAL_RCC_OscConfig+0x36e>
 8001a02:	4b5b      	ldr	r3, [pc, #364]	@ (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 8001a04:	6a1b      	ldr	r3, [r3, #32]
 8001a06:	4a5a      	ldr	r2, [pc, #360]	@ (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 8001a08:	f023 0301 	bic.w	r3, r3, #1
 8001a0c:	6213      	str	r3, [r2, #32]
 8001a0e:	4b58      	ldr	r3, [pc, #352]	@ (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 8001a10:	6a1b      	ldr	r3, [r3, #32]
 8001a12:	4a57      	ldr	r2, [pc, #348]	@ (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 8001a14:	f023 0304 	bic.w	r3, r3, #4
 8001a18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d015      	beq.n	8001a4e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a22:	f7ff fa97 	bl	8000f54 <HAL_GetTick>
 8001a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a28:	e00a      	b.n	8001a40 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a2a:	f7ff fa93 	bl	8000f54 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e0b1      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a40:	4b4b      	ldr	r3, [pc, #300]	@ (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 8001a42:	6a1b      	ldr	r3, [r3, #32]
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d0ee      	beq.n	8001a2a <HAL_RCC_OscConfig+0x37e>
 8001a4c:	e014      	b.n	8001a78 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a4e:	f7ff fa81 	bl	8000f54 <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a54:	e00a      	b.n	8001a6c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a56:	f7ff fa7d 	bl	8000f54 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e09b      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a6c:	4b40      	ldr	r3, [pc, #256]	@ (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 8001a6e:	6a1b      	ldr	r3, [r3, #32]
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d1ee      	bne.n	8001a56 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a78:	7dfb      	ldrb	r3, [r7, #23]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d105      	bne.n	8001a8a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a7e:	4b3c      	ldr	r3, [pc, #240]	@ (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	4a3b      	ldr	r2, [pc, #236]	@ (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 8001a84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a88:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f000 8087 	beq.w	8001ba2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a94:	4b36      	ldr	r3, [pc, #216]	@ (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 030c 	and.w	r3, r3, #12
 8001a9c:	2b08      	cmp	r3, #8
 8001a9e:	d061      	beq.n	8001b64 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	69db      	ldr	r3, [r3, #28]
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d146      	bne.n	8001b36 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aa8:	4b33      	ldr	r3, [pc, #204]	@ (8001b78 <HAL_RCC_OscConfig+0x4cc>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aae:	f7ff fa51 	bl	8000f54 <HAL_GetTick>
 8001ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ab4:	e008      	b.n	8001ac8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab6:	f7ff fa4d 	bl	8000f54 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e06d      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ac8:	4b29      	ldr	r3, [pc, #164]	@ (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1f0      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a1b      	ldr	r3, [r3, #32]
 8001ad8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001adc:	d108      	bne.n	8001af0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ade:	4b24      	ldr	r3, [pc, #144]	@ (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	4921      	ldr	r1, [pc, #132]	@ (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 8001aec:	4313      	orrs	r3, r2
 8001aee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001af0:	4b1f      	ldr	r3, [pc, #124]	@ (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a19      	ldr	r1, [r3, #32]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b00:	430b      	orrs	r3, r1
 8001b02:	491b      	ldr	r1, [pc, #108]	@ (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 8001b04:	4313      	orrs	r3, r2
 8001b06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b08:	4b1b      	ldr	r3, [pc, #108]	@ (8001b78 <HAL_RCC_OscConfig+0x4cc>)
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0e:	f7ff fa21 	bl	8000f54 <HAL_GetTick>
 8001b12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b14:	e008      	b.n	8001b28 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b16:	f7ff fa1d 	bl	8000f54 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e03d      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b28:	4b11      	ldr	r3, [pc, #68]	@ (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d0f0      	beq.n	8001b16 <HAL_RCC_OscConfig+0x46a>
 8001b34:	e035      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b36:	4b10      	ldr	r3, [pc, #64]	@ (8001b78 <HAL_RCC_OscConfig+0x4cc>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3c:	f7ff fa0a 	bl	8000f54 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b44:	f7ff fa06 	bl	8000f54 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e026      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b56:	4b06      	ldr	r3, [pc, #24]	@ (8001b70 <HAL_RCC_OscConfig+0x4c4>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1f0      	bne.n	8001b44 <HAL_RCC_OscConfig+0x498>
 8001b62:	e01e      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	69db      	ldr	r3, [r3, #28]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d107      	bne.n	8001b7c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e019      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4f8>
 8001b70:	40021000 	.word	0x40021000
 8001b74:	40007000 	.word	0x40007000
 8001b78:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001bac <HAL_RCC_OscConfig+0x500>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d106      	bne.n	8001b9e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d001      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e000      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3718      	adds	r7, #24
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40021000 	.word	0x40021000

08001bb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d101      	bne.n	8001bc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e0d0      	b.n	8001d66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bc4:	4b6a      	ldr	r3, [pc, #424]	@ (8001d70 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0307 	and.w	r3, r3, #7
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d910      	bls.n	8001bf4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd2:	4b67      	ldr	r3, [pc, #412]	@ (8001d70 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f023 0207 	bic.w	r2, r3, #7
 8001bda:	4965      	ldr	r1, [pc, #404]	@ (8001d70 <HAL_RCC_ClockConfig+0x1c0>)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be2:	4b63      	ldr	r3, [pc, #396]	@ (8001d70 <HAL_RCC_ClockConfig+0x1c0>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d001      	beq.n	8001bf4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e0b8      	b.n	8001d66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d020      	beq.n	8001c42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d005      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c0c:	4b59      	ldr	r3, [pc, #356]	@ (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	4a58      	ldr	r2, [pc, #352]	@ (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001c12:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0308 	and.w	r3, r3, #8
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d005      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c24:	4b53      	ldr	r3, [pc, #332]	@ (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	4a52      	ldr	r2, [pc, #328]	@ (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001c2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c30:	4b50      	ldr	r3, [pc, #320]	@ (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	494d      	ldr	r1, [pc, #308]	@ (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d040      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d107      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c56:	4b47      	ldr	r3, [pc, #284]	@ (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d115      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e07f      	b.n	8001d66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d107      	bne.n	8001c7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c6e:	4b41      	ldr	r3, [pc, #260]	@ (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d109      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e073      	b.n	8001d66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c7e:	4b3d      	ldr	r3, [pc, #244]	@ (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e06b      	b.n	8001d66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c8e:	4b39      	ldr	r3, [pc, #228]	@ (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f023 0203 	bic.w	r2, r3, #3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	4936      	ldr	r1, [pc, #216]	@ (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ca0:	f7ff f958 	bl	8000f54 <HAL_GetTick>
 8001ca4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ca6:	e00a      	b.n	8001cbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ca8:	f7ff f954 	bl	8000f54 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e053      	b.n	8001d66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cbe:	4b2d      	ldr	r3, [pc, #180]	@ (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f003 020c 	and.w	r2, r3, #12
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d1eb      	bne.n	8001ca8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cd0:	4b27      	ldr	r3, [pc, #156]	@ (8001d70 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d210      	bcs.n	8001d00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cde:	4b24      	ldr	r3, [pc, #144]	@ (8001d70 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f023 0207 	bic.w	r2, r3, #7
 8001ce6:	4922      	ldr	r1, [pc, #136]	@ (8001d70 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cee:	4b20      	ldr	r3, [pc, #128]	@ (8001d70 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d001      	beq.n	8001d00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e032      	b.n	8001d66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d008      	beq.n	8001d1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d0c:	4b19      	ldr	r3, [pc, #100]	@ (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	4916      	ldr	r1, [pc, #88]	@ (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0308 	and.w	r3, r3, #8
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d009      	beq.n	8001d3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d2a:	4b12      	ldr	r3, [pc, #72]	@ (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	490e      	ldr	r1, [pc, #56]	@ (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d3e:	f000 f821 	bl	8001d84 <HAL_RCC_GetSysClockFreq>
 8001d42:	4602      	mov	r2, r0
 8001d44:	4b0b      	ldr	r3, [pc, #44]	@ (8001d74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	091b      	lsrs	r3, r3, #4
 8001d4a:	f003 030f 	and.w	r3, r3, #15
 8001d4e:	490a      	ldr	r1, [pc, #40]	@ (8001d78 <HAL_RCC_ClockConfig+0x1c8>)
 8001d50:	5ccb      	ldrb	r3, [r1, r3]
 8001d52:	fa22 f303 	lsr.w	r3, r2, r3
 8001d56:	4a09      	ldr	r2, [pc, #36]	@ (8001d7c <HAL_RCC_ClockConfig+0x1cc>)
 8001d58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d5a:	4b09      	ldr	r3, [pc, #36]	@ (8001d80 <HAL_RCC_ClockConfig+0x1d0>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff f8b6 	bl	8000ed0 <HAL_InitTick>

  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40022000 	.word	0x40022000
 8001d74:	40021000 	.word	0x40021000
 8001d78:	08004218 	.word	0x08004218
 8001d7c:	20000008 	.word	0x20000008
 8001d80:	2000000c 	.word	0x2000000c

08001d84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b087      	sub	sp, #28
 8001d88:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	2300      	movs	r3, #0
 8001d94:	617b      	str	r3, [r7, #20]
 8001d96:	2300      	movs	r3, #0
 8001d98:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d9e:	4b1e      	ldr	r3, [pc, #120]	@ (8001e18 <HAL_RCC_GetSysClockFreq+0x94>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f003 030c 	and.w	r3, r3, #12
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	d002      	beq.n	8001db4 <HAL_RCC_GetSysClockFreq+0x30>
 8001dae:	2b08      	cmp	r3, #8
 8001db0:	d003      	beq.n	8001dba <HAL_RCC_GetSysClockFreq+0x36>
 8001db2:	e027      	b.n	8001e04 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001db4:	4b19      	ldr	r3, [pc, #100]	@ (8001e1c <HAL_RCC_GetSysClockFreq+0x98>)
 8001db6:	613b      	str	r3, [r7, #16]
      break;
 8001db8:	e027      	b.n	8001e0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	0c9b      	lsrs	r3, r3, #18
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	4a17      	ldr	r2, [pc, #92]	@ (8001e20 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001dc4:	5cd3      	ldrb	r3, [r2, r3]
 8001dc6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d010      	beq.n	8001df4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001dd2:	4b11      	ldr	r3, [pc, #68]	@ (8001e18 <HAL_RCC_GetSysClockFreq+0x94>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	0c5b      	lsrs	r3, r3, #17
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	4a11      	ldr	r2, [pc, #68]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001dde:	5cd3      	ldrb	r3, [r2, r3]
 8001de0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a0d      	ldr	r2, [pc, #52]	@ (8001e1c <HAL_RCC_GetSysClockFreq+0x98>)
 8001de6:	fb03 f202 	mul.w	r2, r3, r2
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df0:	617b      	str	r3, [r7, #20]
 8001df2:	e004      	b.n	8001dfe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4a0c      	ldr	r2, [pc, #48]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001df8:	fb02 f303 	mul.w	r3, r2, r3
 8001dfc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	613b      	str	r3, [r7, #16]
      break;
 8001e02:	e002      	b.n	8001e0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e04:	4b05      	ldr	r3, [pc, #20]	@ (8001e1c <HAL_RCC_GetSysClockFreq+0x98>)
 8001e06:	613b      	str	r3, [r7, #16]
      break;
 8001e08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e0a:	693b      	ldr	r3, [r7, #16]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	371c      	adds	r7, #28
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bc80      	pop	{r7}
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	007a1200 	.word	0x007a1200
 8001e20:	08004230 	.word	0x08004230
 8001e24:	08004240 	.word	0x08004240
 8001e28:	003d0900 	.word	0x003d0900

08001e2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e30:	4b02      	ldr	r3, [pc, #8]	@ (8001e3c <HAL_RCC_GetHCLKFreq+0x10>)
 8001e32:	681b      	ldr	r3, [r3, #0]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr
 8001e3c:	20000008 	.word	0x20000008

08001e40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e44:	f7ff fff2 	bl	8001e2c <HAL_RCC_GetHCLKFreq>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	4b05      	ldr	r3, [pc, #20]	@ (8001e60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	0a1b      	lsrs	r3, r3, #8
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	4903      	ldr	r1, [pc, #12]	@ (8001e64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e56:	5ccb      	ldrb	r3, [r1, r3]
 8001e58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40021000 	.word	0x40021000
 8001e64:	08004228 	.word	0x08004228

08001e68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e6c:	f7ff ffde 	bl	8001e2c <HAL_RCC_GetHCLKFreq>
 8001e70:	4602      	mov	r2, r0
 8001e72:	4b05      	ldr	r3, [pc, #20]	@ (8001e88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	0adb      	lsrs	r3, r3, #11
 8001e78:	f003 0307 	and.w	r3, r3, #7
 8001e7c:	4903      	ldr	r1, [pc, #12]	@ (8001e8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e7e:	5ccb      	ldrb	r3, [r1, r3]
 8001e80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	08004228 	.word	0x08004228

08001e90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e98:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec4 <RCC_Delay+0x34>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a0a      	ldr	r2, [pc, #40]	@ (8001ec8 <RCC_Delay+0x38>)
 8001e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea2:	0a5b      	lsrs	r3, r3, #9
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	fb02 f303 	mul.w	r3, r2, r3
 8001eaa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001eac:	bf00      	nop
  }
  while (Delay --);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	1e5a      	subs	r2, r3, #1
 8001eb2:	60fa      	str	r2, [r7, #12]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d1f9      	bne.n	8001eac <RCC_Delay+0x1c>
}
 8001eb8:	bf00      	nop
 8001eba:	bf00      	nop
 8001ebc:	3714      	adds	r7, #20
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr
 8001ec4:	20000008 	.word	0x20000008
 8001ec8:	10624dd3 	.word	0x10624dd3

08001ecc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e076      	b.n	8001fcc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d108      	bne.n	8001ef8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001eee:	d009      	beq.n	8001f04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	61da      	str	r2, [r3, #28]
 8001ef6:	e005      	b.n	8001f04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d106      	bne.n	8001f24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7fe fe70 	bl	8000c04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2202      	movs	r2, #2
 8001f28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f3a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001f4c:	431a      	orrs	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f56:	431a      	orrs	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	431a      	orrs	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f74:	431a      	orrs	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f88:	ea42 0103 	orr.w	r1, r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f90:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	0c1a      	lsrs	r2, r3, #16
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f002 0204 	and.w	r2, r2, #4
 8001faa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	69da      	ldr	r2, [r3, #28]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b088      	sub	sp, #32
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	603b      	str	r3, [r7, #0]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d101      	bne.n	8001ff6 <HAL_SPI_Transmit+0x22>
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	e12d      	b.n	8002252 <HAL_SPI_Transmit+0x27e>
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ffe:	f7fe ffa9 	bl	8000f54 <HAL_GetTick>
 8002002:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002004:	88fb      	ldrh	r3, [r7, #6]
 8002006:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b01      	cmp	r3, #1
 8002012:	d002      	beq.n	800201a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002014:	2302      	movs	r3, #2
 8002016:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002018:	e116      	b.n	8002248 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d002      	beq.n	8002026 <HAL_SPI_Transmit+0x52>
 8002020:	88fb      	ldrh	r3, [r7, #6]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d102      	bne.n	800202c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	77fb      	strb	r3, [r7, #31]
    goto error;
 800202a:	e10d      	b.n	8002248 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2203      	movs	r2, #3
 8002030:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2200      	movs	r2, #0
 8002038:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	68ba      	ldr	r2, [r7, #8]
 800203e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	88fa      	ldrh	r2, [r7, #6]
 8002044:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	88fa      	ldrh	r2, [r7, #6]
 800204a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2200      	movs	r2, #0
 8002050:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2200      	movs	r2, #0
 8002056:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2200      	movs	r2, #0
 800205c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002072:	d10f      	bne.n	8002094 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002082:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002092:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800209e:	2b40      	cmp	r3, #64	@ 0x40
 80020a0:	d007      	beq.n	80020b2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80020b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80020ba:	d14f      	bne.n	800215c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d002      	beq.n	80020ca <HAL_SPI_Transmit+0xf6>
 80020c4:	8afb      	ldrh	r3, [r7, #22]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d142      	bne.n	8002150 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ce:	881a      	ldrh	r2, [r3, #0]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020da:	1c9a      	adds	r2, r3, #2
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	3b01      	subs	r3, #1
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80020ee:	e02f      	b.n	8002150 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d112      	bne.n	8002124 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002102:	881a      	ldrh	r2, [r3, #0]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210e:	1c9a      	adds	r2, r3, #2
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002118:	b29b      	uxth	r3, r3
 800211a:	3b01      	subs	r3, #1
 800211c:	b29a      	uxth	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002122:	e015      	b.n	8002150 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002124:	f7fe ff16 	bl	8000f54 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	429a      	cmp	r2, r3
 8002132:	d803      	bhi.n	800213c <HAL_SPI_Transmit+0x168>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800213a:	d102      	bne.n	8002142 <HAL_SPI_Transmit+0x16e>
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d106      	bne.n	8002150 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800214e:	e07b      	b.n	8002248 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002154:	b29b      	uxth	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1ca      	bne.n	80020f0 <HAL_SPI_Transmit+0x11c>
 800215a:	e050      	b.n	80021fe <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d002      	beq.n	800216a <HAL_SPI_Transmit+0x196>
 8002164:	8afb      	ldrh	r3, [r7, #22]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d144      	bne.n	80021f4 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	330c      	adds	r3, #12
 8002174:	7812      	ldrb	r2, [r2, #0]
 8002176:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217c:	1c5a      	adds	r2, r3, #1
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002186:	b29b      	uxth	r3, r3
 8002188:	3b01      	subs	r3, #1
 800218a:	b29a      	uxth	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002190:	e030      	b.n	80021f4 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b02      	cmp	r3, #2
 800219e:	d113      	bne.n	80021c8 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	330c      	adds	r3, #12
 80021aa:	7812      	ldrb	r2, [r2, #0]
 80021ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b2:	1c5a      	adds	r2, r3, #1
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80021bc:	b29b      	uxth	r3, r3
 80021be:	3b01      	subs	r3, #1
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80021c6:	e015      	b.n	80021f4 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021c8:	f7fe fec4 	bl	8000f54 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d803      	bhi.n	80021e0 <HAL_SPI_Transmit+0x20c>
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021de:	d102      	bne.n	80021e6 <HAL_SPI_Transmit+0x212>
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d106      	bne.n	80021f4 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80021f2:	e029      	b.n	8002248 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1c9      	bne.n	8002192 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	6839      	ldr	r1, [r7, #0]
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 fcd0 	bl	8002ba8 <SPI_EndRxTxTransaction>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d002      	beq.n	8002214 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2220      	movs	r2, #32
 8002212:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d10a      	bne.n	8002232 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800221c:	2300      	movs	r3, #0
 800221e:	613b      	str	r3, [r7, #16]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	613b      	str	r3, [r7, #16]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	613b      	str	r3, [r7, #16]
 8002230:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002236:	2b00      	cmp	r3, #0
 8002238:	d002      	beq.n	8002240 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	77fb      	strb	r3, [r7, #31]
 800223e:	e003      	b.n	8002248 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002250:	7ffb      	ldrb	r3, [r7, #31]
}
 8002252:	4618      	mov	r0, r3
 8002254:	3720      	adds	r7, #32
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b088      	sub	sp, #32
 800225e:	af02      	add	r7, sp, #8
 8002260:	60f8      	str	r0, [r7, #12]
 8002262:	60b9      	str	r1, [r7, #8]
 8002264:	603b      	str	r3, [r7, #0]
 8002266:	4613      	mov	r3, r2
 8002268:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800226a:	2300      	movs	r3, #0
 800226c:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b01      	cmp	r3, #1
 8002278:	d002      	beq.n	8002280 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800227a:	2302      	movs	r3, #2
 800227c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800227e:	e0fb      	b.n	8002478 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002288:	d112      	bne.n	80022b0 <HAL_SPI_Receive+0x56>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10e      	bne.n	80022b0 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2204      	movs	r2, #4
 8002296:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800229a:	88fa      	ldrh	r2, [r7, #6]
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	9300      	str	r3, [sp, #0]
 80022a0:	4613      	mov	r3, r2
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	68b9      	ldr	r1, [r7, #8]
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 f8ef 	bl	800248a <HAL_SPI_TransmitReceive>
 80022ac:	4603      	mov	r3, r0
 80022ae:	e0e8      	b.n	8002482 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d101      	bne.n	80022be <HAL_SPI_Receive+0x64>
 80022ba:	2302      	movs	r3, #2
 80022bc:	e0e1      	b.n	8002482 <HAL_SPI_Receive+0x228>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022c6:	f7fe fe45 	bl	8000f54 <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d002      	beq.n	80022d8 <HAL_SPI_Receive+0x7e>
 80022d2:	88fb      	ldrh	r3, [r7, #6]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d102      	bne.n	80022de <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	75fb      	strb	r3, [r7, #23]
    goto error;
 80022dc:	e0cc      	b.n	8002478 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2204      	movs	r2, #4
 80022e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	68ba      	ldr	r2, [r7, #8]
 80022f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	88fa      	ldrh	r2, [r7, #6]
 80022f6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	88fa      	ldrh	r2, [r7, #6]
 80022fc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2200      	movs	r2, #0
 8002308:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002324:	d10f      	bne.n	8002346 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002334:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002344:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002350:	2b40      	cmp	r3, #64	@ 0x40
 8002352:	d007      	beq.n	8002364 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002362:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d16a      	bne.n	8002442 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800236c:	e032      	b.n	80023d4 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	2b01      	cmp	r3, #1
 800237a:	d115      	bne.n	80023a8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f103 020c 	add.w	r2, r3, #12
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002388:	7812      	ldrb	r2, [r2, #0]
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002392:	1c5a      	adds	r2, r3, #1
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800239c:	b29b      	uxth	r3, r3
 800239e:	3b01      	subs	r3, #1
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80023a6:	e015      	b.n	80023d4 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023a8:	f7fe fdd4 	bl	8000f54 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d803      	bhi.n	80023c0 <HAL_SPI_Receive+0x166>
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023be:	d102      	bne.n	80023c6 <HAL_SPI_Receive+0x16c>
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d106      	bne.n	80023d4 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80023d2:	e051      	b.n	8002478 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023d8:	b29b      	uxth	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1c7      	bne.n	800236e <HAL_SPI_Receive+0x114>
 80023de:	e035      	b.n	800244c <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d113      	bne.n	8002416 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68da      	ldr	r2, [r3, #12]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023f8:	b292      	uxth	r2, r2
 80023fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002400:	1c9a      	adds	r2, r3, #2
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800240a:	b29b      	uxth	r3, r3
 800240c:	3b01      	subs	r3, #1
 800240e:	b29a      	uxth	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002414:	e015      	b.n	8002442 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002416:	f7fe fd9d 	bl	8000f54 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	429a      	cmp	r2, r3
 8002424:	d803      	bhi.n	800242e <HAL_SPI_Receive+0x1d4>
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800242c:	d102      	bne.n	8002434 <HAL_SPI_Receive+0x1da>
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d106      	bne.n	8002442 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002440:	e01a      	b.n	8002478 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002446:	b29b      	uxth	r3, r3
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1c9      	bne.n	80023e0 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	6839      	ldr	r1, [r7, #0]
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	f000 fb57 	bl	8002b04 <SPI_EndRxTransaction>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d002      	beq.n	8002462 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2220      	movs	r2, #32
 8002460:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002466:	2b00      	cmp	r3, #0
 8002468:	d002      	beq.n	8002470 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	75fb      	strb	r3, [r7, #23]
 800246e:	e003      	b.n	8002478 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002480:	7dfb      	ldrb	r3, [r7, #23]
}
 8002482:	4618      	mov	r0, r3
 8002484:	3718      	adds	r7, #24
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b08c      	sub	sp, #48	@ 0x30
 800248e:	af00      	add	r7, sp, #0
 8002490:	60f8      	str	r0, [r7, #12]
 8002492:	60b9      	str	r1, [r7, #8]
 8002494:	607a      	str	r2, [r7, #4]
 8002496:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002498:	2301      	movs	r3, #1
 800249a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800249c:	2300      	movs	r3, #0
 800249e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d101      	bne.n	80024b0 <HAL_SPI_TransmitReceive+0x26>
 80024ac:	2302      	movs	r3, #2
 80024ae:	e198      	b.n	80027e2 <HAL_SPI_TransmitReceive+0x358>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024b8:	f7fe fd4c 	bl	8000f54 <HAL_GetTick>
 80024bc:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80024c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80024ce:	887b      	ldrh	r3, [r7, #2]
 80024d0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80024d2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d00f      	beq.n	80024fa <HAL_SPI_TransmitReceive+0x70>
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80024e0:	d107      	bne.n	80024f2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d103      	bne.n	80024f2 <HAL_SPI_TransmitReceive+0x68>
 80024ea:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	d003      	beq.n	80024fa <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80024f2:	2302      	movs	r3, #2
 80024f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80024f8:	e16d      	b.n	80027d6 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d005      	beq.n	800250c <HAL_SPI_TransmitReceive+0x82>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d002      	beq.n	800250c <HAL_SPI_TransmitReceive+0x82>
 8002506:	887b      	ldrh	r3, [r7, #2]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d103      	bne.n	8002514 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8002512:	e160      	b.n	80027d6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800251a:	b2db      	uxtb	r3, r3
 800251c:	2b04      	cmp	r3, #4
 800251e:	d003      	beq.n	8002528 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2205      	movs	r2, #5
 8002524:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2200      	movs	r2, #0
 800252c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	887a      	ldrh	r2, [r7, #2]
 8002538:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	887a      	ldrh	r2, [r7, #2]
 800253e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	887a      	ldrh	r2, [r7, #2]
 800254a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	887a      	ldrh	r2, [r7, #2]
 8002550:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002568:	2b40      	cmp	r3, #64	@ 0x40
 800256a:	d007      	beq.n	800257c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800257a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002584:	d17c      	bne.n	8002680 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d002      	beq.n	8002594 <HAL_SPI_TransmitReceive+0x10a>
 800258e:	8b7b      	ldrh	r3, [r7, #26]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d16a      	bne.n	800266a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002598:	881a      	ldrh	r2, [r3, #0]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a4:	1c9a      	adds	r2, r3, #2
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	3b01      	subs	r3, #1
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025b8:	e057      	b.n	800266a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d11b      	bne.n	8002600 <HAL_SPI_TransmitReceive+0x176>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d016      	beq.n	8002600 <HAL_SPI_TransmitReceive+0x176>
 80025d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d113      	bne.n	8002600 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025dc:	881a      	ldrh	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e8:	1c9a      	adds	r2, r3, #2
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	3b01      	subs	r3, #1
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80025fc:	2300      	movs	r3, #0
 80025fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b01      	cmp	r3, #1
 800260c:	d119      	bne.n	8002642 <HAL_SPI_TransmitReceive+0x1b8>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002612:	b29b      	uxth	r3, r3
 8002614:	2b00      	cmp	r3, #0
 8002616:	d014      	beq.n	8002642 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68da      	ldr	r2, [r3, #12]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002622:	b292      	uxth	r2, r2
 8002624:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800262a:	1c9a      	adds	r2, r3, #2
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002634:	b29b      	uxth	r3, r3
 8002636:	3b01      	subs	r3, #1
 8002638:	b29a      	uxth	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800263e:	2301      	movs	r3, #1
 8002640:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002642:	f7fe fc87 	bl	8000f54 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800264e:	429a      	cmp	r2, r3
 8002650:	d80b      	bhi.n	800266a <HAL_SPI_TransmitReceive+0x1e0>
 8002652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002658:	d007      	beq.n	800266a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8002668:	e0b5      	b.n	80027d6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800266e:	b29b      	uxth	r3, r3
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1a2      	bne.n	80025ba <HAL_SPI_TransmitReceive+0x130>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002678:	b29b      	uxth	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d19d      	bne.n	80025ba <HAL_SPI_TransmitReceive+0x130>
 800267e:	e080      	b.n	8002782 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d002      	beq.n	800268e <HAL_SPI_TransmitReceive+0x204>
 8002688:	8b7b      	ldrh	r3, [r7, #26]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d16f      	bne.n	800276e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	330c      	adds	r3, #12
 8002698:	7812      	ldrb	r2, [r2, #0]
 800269a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a0:	1c5a      	adds	r2, r3, #1
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	3b01      	subs	r3, #1
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026b4:	e05b      	b.n	800276e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d11c      	bne.n	80026fe <HAL_SPI_TransmitReceive+0x274>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d017      	beq.n	80026fe <HAL_SPI_TransmitReceive+0x274>
 80026ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d114      	bne.n	80026fe <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	330c      	adds	r3, #12
 80026de:	7812      	ldrb	r2, [r2, #0]
 80026e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e6:	1c5a      	adds	r2, r3, #1
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	3b01      	subs	r3, #1
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80026fa:	2300      	movs	r3, #0
 80026fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b01      	cmp	r3, #1
 800270a:	d119      	bne.n	8002740 <HAL_SPI_TransmitReceive+0x2b6>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002710:	b29b      	uxth	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d014      	beq.n	8002740 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68da      	ldr	r2, [r3, #12]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002720:	b2d2      	uxtb	r2, r2
 8002722:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002728:	1c5a      	adds	r2, r3, #1
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002732:	b29b      	uxth	r3, r3
 8002734:	3b01      	subs	r3, #1
 8002736:	b29a      	uxth	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800273c:	2301      	movs	r3, #1
 800273e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002740:	f7fe fc08 	bl	8000f54 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800274c:	429a      	cmp	r2, r3
 800274e:	d803      	bhi.n	8002758 <HAL_SPI_TransmitReceive+0x2ce>
 8002750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002756:	d102      	bne.n	800275e <HAL_SPI_TransmitReceive+0x2d4>
 8002758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800275a:	2b00      	cmp	r3, #0
 800275c:	d107      	bne.n	800276e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800276c:	e033      	b.n	80027d6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002772:	b29b      	uxth	r3, r3
 8002774:	2b00      	cmp	r3, #0
 8002776:	d19e      	bne.n	80026b6 <HAL_SPI_TransmitReceive+0x22c>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800277c:	b29b      	uxth	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d199      	bne.n	80026b6 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002782:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002784:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f000 fa0e 	bl	8002ba8 <SPI_EndRxTxTransaction>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d006      	beq.n	80027a0 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2220      	movs	r2, #32
 800279c:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800279e:	e01a      	b.n	80027d6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d10a      	bne.n	80027be <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027a8:	2300      	movs	r3, #0
 80027aa:	617b      	str	r3, [r7, #20]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	617b      	str	r3, [r7, #20]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	617b      	str	r3, [r7, #20]
 80027bc:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80027cc:	e003      	b.n	80027d6 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80027de:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3730      	adds	r7, #48	@ 0x30
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
	...

080027ec <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b088      	sub	sp, #32
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	099b      	lsrs	r3, r3, #6
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10f      	bne.n	8002830 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00a      	beq.n	8002830 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	099b      	lsrs	r3, r3, #6
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	d004      	beq.n	8002830 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	4798      	blx	r3
    return;
 800282e:	e0be      	b.n	80029ae <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	085b      	lsrs	r3, r3, #1
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00a      	beq.n	8002852 <HAL_SPI_IRQHandler+0x66>
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	09db      	lsrs	r3, r3, #7
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	2b00      	cmp	r3, #0
 8002846:	d004      	beq.n	8002852 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	4798      	blx	r3
    return;
 8002850:	e0ad      	b.n	80029ae <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	095b      	lsrs	r3, r3, #5
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b00      	cmp	r3, #0
 800285c:	d106      	bne.n	800286c <HAL_SPI_IRQHandler+0x80>
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	099b      	lsrs	r3, r3, #6
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b00      	cmp	r3, #0
 8002868:	f000 80a1 	beq.w	80029ae <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	095b      	lsrs	r3, r3, #5
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 809a 	beq.w	80029ae <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	099b      	lsrs	r3, r3, #6
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d023      	beq.n	80028ce <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b03      	cmp	r3, #3
 8002890:	d011      	beq.n	80028b6 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002896:	f043 0204 	orr.w	r2, r3, #4
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800289e:	2300      	movs	r3, #0
 80028a0:	617b      	str	r3, [r7, #20]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	617b      	str	r3, [r7, #20]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	617b      	str	r3, [r7, #20]
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	e00b      	b.n	80028ce <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028b6:	2300      	movs	r3, #0
 80028b8:	613b      	str	r3, [r7, #16]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	613b      	str	r3, [r7, #16]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	613b      	str	r3, [r7, #16]
 80028ca:	693b      	ldr	r3, [r7, #16]
        return;
 80028cc:	e06f      	b.n	80029ae <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	095b      	lsrs	r3, r3, #5
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d014      	beq.n	8002904 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028de:	f043 0201 	orr.w	r2, r3, #1
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80028e6:	2300      	movs	r3, #0
 80028e8:	60fb      	str	r3, [r7, #12]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002908:	2b00      	cmp	r3, #0
 800290a:	d04f      	beq.n	80029ac <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800291a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d104      	bne.n	8002938 <HAL_SPI_IRQHandler+0x14c>
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	2b00      	cmp	r3, #0
 8002936:	d034      	beq.n	80029a2 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f022 0203 	bic.w	r2, r2, #3
 8002946:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800294c:	2b00      	cmp	r3, #0
 800294e:	d011      	beq.n	8002974 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002954:	4a17      	ldr	r2, [pc, #92]	@ (80029b4 <HAL_SPI_IRQHandler+0x1c8>)
 8002956:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800295c:	4618      	mov	r0, r3
 800295e:	f7fe fc6f 	bl	8001240 <HAL_DMA_Abort_IT>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d005      	beq.n	8002974 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800296c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002978:	2b00      	cmp	r3, #0
 800297a:	d016      	beq.n	80029aa <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002980:	4a0c      	ldr	r2, [pc, #48]	@ (80029b4 <HAL_SPI_IRQHandler+0x1c8>)
 8002982:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002988:	4618      	mov	r0, r3
 800298a:	f7fe fc59 	bl	8001240 <HAL_DMA_Abort_IT>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00a      	beq.n	80029aa <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002998:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80029a0:	e003      	b.n	80029aa <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 f808 	bl	80029b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80029a8:	e000      	b.n	80029ac <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80029aa:	bf00      	nop
    return;
 80029ac:	bf00      	nop
  }
}
 80029ae:	3720      	adds	r7, #32
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	080029cb 	.word	0x080029cb

080029b8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr

080029ca <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b084      	sub	sp, #16
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d6:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f7ff ffe7 	bl	80029b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80029ea:	bf00      	nop
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
	...

080029f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b088      	sub	sp, #32
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	603b      	str	r3, [r7, #0]
 8002a00:	4613      	mov	r3, r2
 8002a02:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a04:	f7fe faa6 	bl	8000f54 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a0c:	1a9b      	subs	r3, r3, r2
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	4413      	add	r3, r2
 8002a12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a14:	f7fe fa9e 	bl	8000f54 <HAL_GetTick>
 8002a18:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a1a:	4b39      	ldr	r3, [pc, #228]	@ (8002b00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	015b      	lsls	r3, r3, #5
 8002a20:	0d1b      	lsrs	r3, r3, #20
 8002a22:	69fa      	ldr	r2, [r7, #28]
 8002a24:	fb02 f303 	mul.w	r3, r2, r3
 8002a28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a2a:	e054      	b.n	8002ad6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a32:	d050      	beq.n	8002ad6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a34:	f7fe fa8e 	bl	8000f54 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	69fa      	ldr	r2, [r7, #28]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d902      	bls.n	8002a4a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d13d      	bne.n	8002ac6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002a58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a62:	d111      	bne.n	8002a88 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a6c:	d004      	beq.n	8002a78 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a76:	d107      	bne.n	8002a88 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a90:	d10f      	bne.n	8002ab2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ab0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e017      	b.n	8002af6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d101      	bne.n	8002ad0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002acc:	2300      	movs	r3, #0
 8002ace:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	68ba      	ldr	r2, [r7, #8]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	bf0c      	ite	eq
 8002ae6:	2301      	moveq	r3, #1
 8002ae8:	2300      	movne	r3, #0
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	461a      	mov	r2, r3
 8002aee:	79fb      	ldrb	r3, [r7, #7]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d19b      	bne.n	8002a2c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3720      	adds	r7, #32
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	20000008 	.word	0x20000008

08002b04 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af02      	add	r7, sp, #8
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b18:	d111      	bne.n	8002b3e <SPI_EndRxTransaction+0x3a>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b22:	d004      	beq.n	8002b2e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b2c:	d107      	bne.n	8002b3e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b3c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b46:	d117      	bne.n	8002b78 <SPI_EndRxTransaction+0x74>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b50:	d112      	bne.n	8002b78 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	9300      	str	r3, [sp, #0]
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f7ff ff49 	bl	80029f4 <SPI_WaitFlagStateUntilTimeout>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d01a      	beq.n	8002b9e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b6c:	f043 0220 	orr.w	r2, r3, #32
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e013      	b.n	8002ba0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	2180      	movs	r1, #128	@ 0x80
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f7ff ff36 	bl	80029f4 <SPI_WaitFlagStateUntilTimeout>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d007      	beq.n	8002b9e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b92:	f043 0220 	orr.w	r2, r3, #32
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e000      	b.n	8002ba0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af02      	add	r7, sp, #8
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	2180      	movs	r1, #128	@ 0x80
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f7ff ff18 	bl	80029f4 <SPI_WaitFlagStateUntilTimeout>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d007      	beq.n	8002bda <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bce:	f043 0220 	orr.w	r2, r3, #32
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e000      	b.n	8002bdc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e042      	b.n	8002c7c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d106      	bne.n	8002c10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7fe f84c 	bl	8000ca8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2224      	movs	r2, #36	@ 0x24
 8002c14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68da      	ldr	r2, [r3, #12]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f000 fd71 	bl	8003710 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	691a      	ldr	r2, [r3, #16]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	695a      	ldr	r2, [r3, #20]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68da      	ldr	r2, [r3, #12]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2220      	movs	r2, #32
 8002c70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3708      	adds	r7, #8
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b08a      	sub	sp, #40	@ 0x28
 8002c88:	af02      	add	r7, sp, #8
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	603b      	str	r3, [r7, #0]
 8002c90:	4613      	mov	r3, r2
 8002c92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c94:	2300      	movs	r3, #0
 8002c96:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	2b20      	cmp	r3, #32
 8002ca2:	d16d      	bne.n	8002d80 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d002      	beq.n	8002cb0 <HAL_UART_Transmit+0x2c>
 8002caa:	88fb      	ldrh	r3, [r7, #6]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e066      	b.n	8002d82 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2221      	movs	r2, #33	@ 0x21
 8002cbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cc2:	f7fe f947 	bl	8000f54 <HAL_GetTick>
 8002cc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	88fa      	ldrh	r2, [r7, #6]
 8002ccc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	88fa      	ldrh	r2, [r7, #6]
 8002cd2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cdc:	d108      	bne.n	8002cf0 <HAL_UART_Transmit+0x6c>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d104      	bne.n	8002cf0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	61bb      	str	r3, [r7, #24]
 8002cee:	e003      	b.n	8002cf8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002cf8:	e02a      	b.n	8002d50 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	2200      	movs	r2, #0
 8002d02:	2180      	movs	r1, #128	@ 0x80
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f000 faf9 	bl	80032fc <UART_WaitOnFlagUntilTimeout>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e036      	b.n	8002d82 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10b      	bne.n	8002d32 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	881b      	ldrh	r3, [r3, #0]
 8002d1e:	461a      	mov	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	3302      	adds	r3, #2
 8002d2e:	61bb      	str	r3, [r7, #24]
 8002d30:	e007      	b.n	8002d42 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	781a      	ldrb	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	3301      	adds	r3, #1
 8002d40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1cf      	bne.n	8002cfa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	2200      	movs	r2, #0
 8002d62:	2140      	movs	r1, #64	@ 0x40
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 fac9 	bl	80032fc <UART_WaitOnFlagUntilTimeout>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e006      	b.n	8002d82 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2220      	movs	r2, #32
 8002d78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	e000      	b.n	8002d82 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002d80:	2302      	movs	r3, #2
  }
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3720      	adds	r7, #32
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
	...

08002d8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b0ba      	sub	sp, #232	@ 0xe8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002db2:	2300      	movs	r3, #0
 8002db4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002db8:	2300      	movs	r3, #0
 8002dba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dc2:	f003 030f 	and.w	r3, r3, #15
 8002dc6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002dca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10f      	bne.n	8002df2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dd6:	f003 0320 	and.w	r3, r3, #32
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d009      	beq.n	8002df2 <HAL_UART_IRQHandler+0x66>
 8002dde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002de2:	f003 0320 	and.w	r3, r3, #32
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d003      	beq.n	8002df2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 fbd1 	bl	8003592 <UART_Receive_IT>
      return;
 8002df0:	e25b      	b.n	80032aa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002df2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 80de 	beq.w	8002fb8 <HAL_UART_IRQHandler+0x22c>
 8002dfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d106      	bne.n	8002e16 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e0c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 80d1 	beq.w	8002fb8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00b      	beq.n	8002e3a <HAL_UART_IRQHandler+0xae>
 8002e22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d005      	beq.n	8002e3a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e32:	f043 0201 	orr.w	r2, r3, #1
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e3e:	f003 0304 	and.w	r3, r3, #4
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00b      	beq.n	8002e5e <HAL_UART_IRQHandler+0xd2>
 8002e46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d005      	beq.n	8002e5e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e56:	f043 0202 	orr.w	r2, r3, #2
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00b      	beq.n	8002e82 <HAL_UART_IRQHandler+0xf6>
 8002e6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d005      	beq.n	8002e82 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e7a:	f043 0204 	orr.w	r2, r3, #4
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d011      	beq.n	8002eb2 <HAL_UART_IRQHandler+0x126>
 8002e8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e92:	f003 0320 	and.w	r3, r3, #32
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d105      	bne.n	8002ea6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d005      	beq.n	8002eb2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eaa:	f043 0208 	orr.w	r2, r3, #8
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f000 81f2 	beq.w	80032a0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ec0:	f003 0320 	and.w	r3, r3, #32
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d008      	beq.n	8002eda <HAL_UART_IRQHandler+0x14e>
 8002ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ecc:	f003 0320 	and.w	r3, r3, #32
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d002      	beq.n	8002eda <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f000 fb5c 	bl	8003592 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	695b      	ldr	r3, [r3, #20]
 8002ee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	bf14      	ite	ne
 8002ee8:	2301      	movne	r3, #1
 8002eea:	2300      	moveq	r3, #0
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ef6:	f003 0308 	and.w	r3, r3, #8
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d103      	bne.n	8002f06 <HAL_UART_IRQHandler+0x17a>
 8002efe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d04f      	beq.n	8002fa6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 fa66 	bl	80033d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d041      	beq.n	8002f9e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	3314      	adds	r3, #20
 8002f20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f24:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f28:	e853 3f00 	ldrex	r3, [r3]
 8002f2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002f30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	3314      	adds	r3, #20
 8002f42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002f46:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002f4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002f52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002f56:	e841 2300 	strex	r3, r2, [r1]
 8002f5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002f5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1d9      	bne.n	8002f1a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d013      	beq.n	8002f96 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f72:	4a7e      	ldr	r2, [pc, #504]	@ (800316c <HAL_UART_IRQHandler+0x3e0>)
 8002f74:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fe f960 	bl	8001240 <HAL_DMA_Abort_IT>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d016      	beq.n	8002fb4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002f90:	4610      	mov	r0, r2
 8002f92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f94:	e00e      	b.n	8002fb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 f99c 	bl	80032d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f9c:	e00a      	b.n	8002fb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 f998 	bl	80032d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fa4:	e006      	b.n	8002fb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f994 	bl	80032d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002fb2:	e175      	b.n	80032a0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fb4:	bf00      	nop
    return;
 8002fb6:	e173      	b.n	80032a0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	f040 814f 	bne.w	8003260 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fc6:	f003 0310 	and.w	r3, r3, #16
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 8148 	beq.w	8003260 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002fd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fd4:	f003 0310 	and.w	r3, r3, #16
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f000 8141 	beq.w	8003260 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60bb      	str	r3, [r7, #8]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	60bb      	str	r3, [r7, #8]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	60bb      	str	r3, [r7, #8]
 8002ff2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f000 80b6 	beq.w	8003170 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003010:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003014:	2b00      	cmp	r3, #0
 8003016:	f000 8145 	beq.w	80032a4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800301e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003022:	429a      	cmp	r2, r3
 8003024:	f080 813e 	bcs.w	80032a4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800302e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	2b20      	cmp	r3, #32
 8003038:	f000 8088 	beq.w	800314c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	330c      	adds	r3, #12
 8003042:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003046:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800304a:	e853 3f00 	ldrex	r3, [r3]
 800304e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003052:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003056:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800305a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	330c      	adds	r3, #12
 8003064:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003068:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800306c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003070:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003074:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003078:	e841 2300 	strex	r3, r2, [r1]
 800307c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003080:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1d9      	bne.n	800303c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	3314      	adds	r3, #20
 800308e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003090:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003092:	e853 3f00 	ldrex	r3, [r3]
 8003096:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003098:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800309a:	f023 0301 	bic.w	r3, r3, #1
 800309e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	3314      	adds	r3, #20
 80030a8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80030ac:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80030b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80030b4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80030b8:	e841 2300 	strex	r3, r2, [r1]
 80030bc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80030be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1e1      	bne.n	8003088 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	3314      	adds	r3, #20
 80030ca:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80030ce:	e853 3f00 	ldrex	r3, [r3]
 80030d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80030d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80030da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	3314      	adds	r3, #20
 80030e4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80030e8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80030ea:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ec:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80030ee:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80030f0:	e841 2300 	strex	r3, r2, [r1]
 80030f4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80030f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1e3      	bne.n	80030c4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2220      	movs	r2, #32
 8003100:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	330c      	adds	r3, #12
 8003110:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003112:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003114:	e853 3f00 	ldrex	r3, [r3]
 8003118:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800311a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800311c:	f023 0310 	bic.w	r3, r3, #16
 8003120:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	330c      	adds	r3, #12
 800312a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800312e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003130:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003132:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003134:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003136:	e841 2300 	strex	r3, r2, [r1]
 800313a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800313c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1e3      	bne.n	800310a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003146:	4618      	mov	r0, r3
 8003148:	f7fe f83f 	bl	80011ca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2202      	movs	r2, #2
 8003150:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800315a:	b29b      	uxth	r3, r3
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	b29b      	uxth	r3, r3
 8003160:	4619      	mov	r1, r3
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f8bf 	bl	80032e6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003168:	e09c      	b.n	80032a4 <HAL_UART_IRQHandler+0x518>
 800316a:	bf00      	nop
 800316c:	0800349d 	.word	0x0800349d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003178:	b29b      	uxth	r3, r3
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003184:	b29b      	uxth	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	f000 808e 	beq.w	80032a8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800318c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003190:	2b00      	cmp	r3, #0
 8003192:	f000 8089 	beq.w	80032a8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	330c      	adds	r3, #12
 800319c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800319e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031a0:	e853 3f00 	ldrex	r3, [r3]
 80031a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80031a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	330c      	adds	r3, #12
 80031b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80031ba:	647a      	str	r2, [r7, #68]	@ 0x44
 80031bc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80031c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80031c2:	e841 2300 	strex	r3, r2, [r1]
 80031c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80031c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1e3      	bne.n	8003196 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	3314      	adds	r3, #20
 80031d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d8:	e853 3f00 	ldrex	r3, [r3]
 80031dc:	623b      	str	r3, [r7, #32]
   return(result);
 80031de:	6a3b      	ldr	r3, [r7, #32]
 80031e0:	f023 0301 	bic.w	r3, r3, #1
 80031e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	3314      	adds	r3, #20
 80031ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80031f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80031f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80031f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031fa:	e841 2300 	strex	r3, r2, [r1]
 80031fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1e3      	bne.n	80031ce <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2220      	movs	r2, #32
 800320a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	330c      	adds	r3, #12
 800321a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	e853 3f00 	ldrex	r3, [r3]
 8003222:	60fb      	str	r3, [r7, #12]
   return(result);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f023 0310 	bic.w	r3, r3, #16
 800322a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	330c      	adds	r3, #12
 8003234:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003238:	61fa      	str	r2, [r7, #28]
 800323a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800323c:	69b9      	ldr	r1, [r7, #24]
 800323e:	69fa      	ldr	r2, [r7, #28]
 8003240:	e841 2300 	strex	r3, r2, [r1]
 8003244:	617b      	str	r3, [r7, #20]
   return(result);
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1e3      	bne.n	8003214 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2202      	movs	r2, #2
 8003250:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003252:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003256:	4619      	mov	r1, r3
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 f844 	bl	80032e6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800325e:	e023      	b.n	80032a8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003264:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003268:	2b00      	cmp	r3, #0
 800326a:	d009      	beq.n	8003280 <HAL_UART_IRQHandler+0x4f4>
 800326c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003270:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003274:	2b00      	cmp	r3, #0
 8003276:	d003      	beq.n	8003280 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f000 f923 	bl	80034c4 <UART_Transmit_IT>
    return;
 800327e:	e014      	b.n	80032aa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00e      	beq.n	80032aa <HAL_UART_IRQHandler+0x51e>
 800328c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003294:	2b00      	cmp	r3, #0
 8003296:	d008      	beq.n	80032aa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f000 f962 	bl	8003562 <UART_EndTransmit_IT>
    return;
 800329e:	e004      	b.n	80032aa <HAL_UART_IRQHandler+0x51e>
    return;
 80032a0:	bf00      	nop
 80032a2:	e002      	b.n	80032aa <HAL_UART_IRQHandler+0x51e>
      return;
 80032a4:	bf00      	nop
 80032a6:	e000      	b.n	80032aa <HAL_UART_IRQHandler+0x51e>
      return;
 80032a8:	bf00      	nop
  }
}
 80032aa:	37e8      	adds	r7, #232	@ 0xe8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	bc80      	pop	{r7}
 80032c0:	4770      	bx	lr

080032c2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80032c2:	b480      	push	{r7}
 80032c4:	b083      	sub	sp, #12
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80032ca:	bf00      	nop
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bc80      	pop	{r7}
 80032d2:	4770      	bx	lr

080032d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bc80      	pop	{r7}
 80032e4:	4770      	bx	lr

080032e6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
 80032ee:	460b      	mov	r3, r1
 80032f0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80032f2:	bf00      	nop
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bc80      	pop	{r7}
 80032fa:	4770      	bx	lr

080032fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b090      	sub	sp, #64	@ 0x40
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	603b      	str	r3, [r7, #0]
 8003308:	4613      	mov	r3, r2
 800330a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800330c:	e050      	b.n	80033b0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800330e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003314:	d04c      	beq.n	80033b0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003316:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003318:	2b00      	cmp	r3, #0
 800331a:	d007      	beq.n	800332c <UART_WaitOnFlagUntilTimeout+0x30>
 800331c:	f7fd fe1a 	bl	8000f54 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003328:	429a      	cmp	r2, r3
 800332a:	d241      	bcs.n	80033b0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	330c      	adds	r3, #12
 8003332:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003336:	e853 3f00 	ldrex	r3, [r3]
 800333a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800333c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800333e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003342:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	330c      	adds	r3, #12
 800334a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800334c:	637a      	str	r2, [r7, #52]	@ 0x34
 800334e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003350:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003352:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003354:	e841 2300 	strex	r3, r2, [r1]
 8003358:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800335a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1e5      	bne.n	800332c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	3314      	adds	r3, #20
 8003366:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	e853 3f00 	ldrex	r3, [r3]
 800336e:	613b      	str	r3, [r7, #16]
   return(result);
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	f023 0301 	bic.w	r3, r3, #1
 8003376:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	3314      	adds	r3, #20
 800337e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003380:	623a      	str	r2, [r7, #32]
 8003382:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003384:	69f9      	ldr	r1, [r7, #28]
 8003386:	6a3a      	ldr	r2, [r7, #32]
 8003388:	e841 2300 	strex	r3, r2, [r1]
 800338c:	61bb      	str	r3, [r7, #24]
   return(result);
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1e5      	bne.n	8003360 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2220      	movs	r2, #32
 8003398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2220      	movs	r2, #32
 80033a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e00f      	b.n	80033d0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	4013      	ands	r3, r2
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	429a      	cmp	r2, r3
 80033be:	bf0c      	ite	eq
 80033c0:	2301      	moveq	r3, #1
 80033c2:	2300      	movne	r3, #0
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	461a      	mov	r2, r3
 80033c8:	79fb      	ldrb	r3, [r7, #7]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d09f      	beq.n	800330e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3740      	adds	r7, #64	@ 0x40
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033d8:	b480      	push	{r7}
 80033da:	b095      	sub	sp, #84	@ 0x54
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	330c      	adds	r3, #12
 80033e6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033ea:	e853 3f00 	ldrex	r3, [r3]
 80033ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80033f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80033f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	330c      	adds	r3, #12
 80033fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003400:	643a      	str	r2, [r7, #64]	@ 0x40
 8003402:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003404:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003406:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003408:	e841 2300 	strex	r3, r2, [r1]
 800340c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800340e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1e5      	bne.n	80033e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	3314      	adds	r3, #20
 800341a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341c:	6a3b      	ldr	r3, [r7, #32]
 800341e:	e853 3f00 	ldrex	r3, [r3]
 8003422:	61fb      	str	r3, [r7, #28]
   return(result);
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	f023 0301 	bic.w	r3, r3, #1
 800342a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	3314      	adds	r3, #20
 8003432:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003434:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003436:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003438:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800343a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800343c:	e841 2300 	strex	r3, r2, [r1]
 8003440:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1e5      	bne.n	8003414 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800344c:	2b01      	cmp	r3, #1
 800344e:	d119      	bne.n	8003484 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	330c      	adds	r3, #12
 8003456:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	e853 3f00 	ldrex	r3, [r3]
 800345e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	f023 0310 	bic.w	r3, r3, #16
 8003466:	647b      	str	r3, [r7, #68]	@ 0x44
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	330c      	adds	r3, #12
 800346e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003470:	61ba      	str	r2, [r7, #24]
 8003472:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003474:	6979      	ldr	r1, [r7, #20]
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	e841 2300 	strex	r3, r2, [r1]
 800347c:	613b      	str	r3, [r7, #16]
   return(result);
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1e5      	bne.n	8003450 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2220      	movs	r2, #32
 8003488:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003492:	bf00      	nop
 8003494:	3754      	adds	r7, #84	@ 0x54
 8003496:	46bd      	mov	sp, r7
 8003498:	bc80      	pop	{r7}
 800349a:	4770      	bx	lr

0800349c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	f7ff ff0c 	bl	80032d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034bc:	bf00      	nop
 80034be:	3710      	adds	r7, #16
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b21      	cmp	r3, #33	@ 0x21
 80034d6:	d13e      	bne.n	8003556 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034e0:	d114      	bne.n	800350c <UART_Transmit_IT+0x48>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d110      	bne.n	800350c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	881b      	ldrh	r3, [r3, #0]
 80034f4:	461a      	mov	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034fe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	1c9a      	adds	r2, r3, #2
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	621a      	str	r2, [r3, #32]
 800350a:	e008      	b.n	800351e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	1c59      	adds	r1, r3, #1
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	6211      	str	r1, [r2, #32]
 8003516:	781a      	ldrb	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003522:	b29b      	uxth	r3, r3
 8003524:	3b01      	subs	r3, #1
 8003526:	b29b      	uxth	r3, r3
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	4619      	mov	r1, r3
 800352c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10f      	bne.n	8003552 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68da      	ldr	r2, [r3, #12]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003540:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68da      	ldr	r2, [r3, #12]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003550:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003552:	2300      	movs	r3, #0
 8003554:	e000      	b.n	8003558 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003556:	2302      	movs	r3, #2
  }
}
 8003558:	4618      	mov	r0, r3
 800355a:	3714      	adds	r7, #20
 800355c:	46bd      	mov	sp, r7
 800355e:	bc80      	pop	{r7}
 8003560:	4770      	bx	lr

08003562 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b082      	sub	sp, #8
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68da      	ldr	r2, [r3, #12]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003578:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2220      	movs	r2, #32
 800357e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7ff fe94 	bl	80032b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b08c      	sub	sp, #48	@ 0x30
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b22      	cmp	r3, #34	@ 0x22
 80035a4:	f040 80ae 	bne.w	8003704 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035b0:	d117      	bne.n	80035e2 <UART_Receive_IT+0x50>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d113      	bne.n	80035e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80035ba:	2300      	movs	r3, #0
 80035bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035da:	1c9a      	adds	r2, r3, #2
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	629a      	str	r2, [r3, #40]	@ 0x28
 80035e0:	e026      	b.n	8003630 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80035e8:	2300      	movs	r3, #0
 80035ea:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035f4:	d007      	beq.n	8003606 <UART_Receive_IT+0x74>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10a      	bne.n	8003614 <UART_Receive_IT+0x82>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d106      	bne.n	8003614 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	b2da      	uxtb	r2, r3
 800360e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003610:	701a      	strb	r2, [r3, #0]
 8003612:	e008      	b.n	8003626 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	b2db      	uxtb	r3, r3
 800361c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003620:	b2da      	uxtb	r2, r3
 8003622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003624:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800362a:	1c5a      	adds	r2, r3, #1
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003634:	b29b      	uxth	r3, r3
 8003636:	3b01      	subs	r3, #1
 8003638:	b29b      	uxth	r3, r3
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	4619      	mov	r1, r3
 800363e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003640:	2b00      	cmp	r3, #0
 8003642:	d15d      	bne.n	8003700 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68da      	ldr	r2, [r3, #12]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f022 0220 	bic.w	r2, r2, #32
 8003652:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68da      	ldr	r2, [r3, #12]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003662:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	695a      	ldr	r2, [r3, #20]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 0201 	bic.w	r2, r2, #1
 8003672:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2220      	movs	r2, #32
 8003678:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003686:	2b01      	cmp	r3, #1
 8003688:	d135      	bne.n	80036f6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	330c      	adds	r3, #12
 8003696:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	e853 3f00 	ldrex	r3, [r3]
 800369e:	613b      	str	r3, [r7, #16]
   return(result);
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	f023 0310 	bic.w	r3, r3, #16
 80036a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	330c      	adds	r3, #12
 80036ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036b0:	623a      	str	r2, [r7, #32]
 80036b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b4:	69f9      	ldr	r1, [r7, #28]
 80036b6:	6a3a      	ldr	r2, [r7, #32]
 80036b8:	e841 2300 	strex	r3, r2, [r1]
 80036bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1e5      	bne.n	8003690 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0310 	and.w	r3, r3, #16
 80036ce:	2b10      	cmp	r3, #16
 80036d0:	d10a      	bne.n	80036e8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80036d2:	2300      	movs	r3, #0
 80036d4:	60fb      	str	r3, [r7, #12]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	60fb      	str	r3, [r7, #12]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	60fb      	str	r3, [r7, #12]
 80036e6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80036ec:	4619      	mov	r1, r3
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f7ff fdf9 	bl	80032e6 <HAL_UARTEx_RxEventCallback>
 80036f4:	e002      	b.n	80036fc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f7ff fde3 	bl	80032c2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80036fc:	2300      	movs	r3, #0
 80036fe:	e002      	b.n	8003706 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003700:	2300      	movs	r3, #0
 8003702:	e000      	b.n	8003706 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003704:	2302      	movs	r3, #2
  }
}
 8003706:	4618      	mov	r0, r3
 8003708:	3730      	adds	r7, #48	@ 0x30
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
	...

08003710 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	68da      	ldr	r2, [r3, #12]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	430a      	orrs	r2, r1
 800372c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	689a      	ldr	r2, [r3, #8]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	431a      	orrs	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	4313      	orrs	r3, r2
 800373e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800374a:	f023 030c 	bic.w	r3, r3, #12
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	6812      	ldr	r2, [r2, #0]
 8003752:	68b9      	ldr	r1, [r7, #8]
 8003754:	430b      	orrs	r3, r1
 8003756:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	699a      	ldr	r2, [r3, #24]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	430a      	orrs	r2, r1
 800376c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a2c      	ldr	r2, [pc, #176]	@ (8003824 <UART_SetConfig+0x114>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d103      	bne.n	8003780 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003778:	f7fe fb76 	bl	8001e68 <HAL_RCC_GetPCLK2Freq>
 800377c:	60f8      	str	r0, [r7, #12]
 800377e:	e002      	b.n	8003786 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003780:	f7fe fb5e 	bl	8001e40 <HAL_RCC_GetPCLK1Freq>
 8003784:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	4613      	mov	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4413      	add	r3, r2
 800378e:	009a      	lsls	r2, r3, #2
 8003790:	441a      	add	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	fbb2 f3f3 	udiv	r3, r2, r3
 800379c:	4a22      	ldr	r2, [pc, #136]	@ (8003828 <UART_SetConfig+0x118>)
 800379e:	fba2 2303 	umull	r2, r3, r2, r3
 80037a2:	095b      	lsrs	r3, r3, #5
 80037a4:	0119      	lsls	r1, r3, #4
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	4613      	mov	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4413      	add	r3, r2
 80037ae:	009a      	lsls	r2, r3, #2
 80037b0:	441a      	add	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80037bc:	4b1a      	ldr	r3, [pc, #104]	@ (8003828 <UART_SetConfig+0x118>)
 80037be:	fba3 0302 	umull	r0, r3, r3, r2
 80037c2:	095b      	lsrs	r3, r3, #5
 80037c4:	2064      	movs	r0, #100	@ 0x64
 80037c6:	fb00 f303 	mul.w	r3, r0, r3
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	011b      	lsls	r3, r3, #4
 80037ce:	3332      	adds	r3, #50	@ 0x32
 80037d0:	4a15      	ldr	r2, [pc, #84]	@ (8003828 <UART_SetConfig+0x118>)
 80037d2:	fba2 2303 	umull	r2, r3, r2, r3
 80037d6:	095b      	lsrs	r3, r3, #5
 80037d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037dc:	4419      	add	r1, r3
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	4613      	mov	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	4413      	add	r3, r2
 80037e6:	009a      	lsls	r2, r3, #2
 80037e8:	441a      	add	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80037f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003828 <UART_SetConfig+0x118>)
 80037f6:	fba3 0302 	umull	r0, r3, r3, r2
 80037fa:	095b      	lsrs	r3, r3, #5
 80037fc:	2064      	movs	r0, #100	@ 0x64
 80037fe:	fb00 f303 	mul.w	r3, r0, r3
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	011b      	lsls	r3, r3, #4
 8003806:	3332      	adds	r3, #50	@ 0x32
 8003808:	4a07      	ldr	r2, [pc, #28]	@ (8003828 <UART_SetConfig+0x118>)
 800380a:	fba2 2303 	umull	r2, r3, r2, r3
 800380e:	095b      	lsrs	r3, r3, #5
 8003810:	f003 020f 	and.w	r2, r3, #15
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	440a      	add	r2, r1
 800381a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800381c:	bf00      	nop
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	40013800 	.word	0x40013800
 8003828:	51eb851f 	.word	0x51eb851f

0800382c <sniprintf>:
 800382c:	b40c      	push	{r2, r3}
 800382e:	b530      	push	{r4, r5, lr}
 8003830:	4b18      	ldr	r3, [pc, #96]	@ (8003894 <sniprintf+0x68>)
 8003832:	1e0c      	subs	r4, r1, #0
 8003834:	681d      	ldr	r5, [r3, #0]
 8003836:	b09d      	sub	sp, #116	@ 0x74
 8003838:	da08      	bge.n	800384c <sniprintf+0x20>
 800383a:	238b      	movs	r3, #139	@ 0x8b
 800383c:	f04f 30ff 	mov.w	r0, #4294967295
 8003840:	602b      	str	r3, [r5, #0]
 8003842:	b01d      	add	sp, #116	@ 0x74
 8003844:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003848:	b002      	add	sp, #8
 800384a:	4770      	bx	lr
 800384c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003850:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003854:	f04f 0300 	mov.w	r3, #0
 8003858:	931b      	str	r3, [sp, #108]	@ 0x6c
 800385a:	bf0c      	ite	eq
 800385c:	4623      	moveq	r3, r4
 800385e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003862:	9304      	str	r3, [sp, #16]
 8003864:	9307      	str	r3, [sp, #28]
 8003866:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800386a:	9002      	str	r0, [sp, #8]
 800386c:	9006      	str	r0, [sp, #24]
 800386e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003872:	4628      	mov	r0, r5
 8003874:	ab21      	add	r3, sp, #132	@ 0x84
 8003876:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003878:	a902      	add	r1, sp, #8
 800387a:	9301      	str	r3, [sp, #4]
 800387c:	f000 f992 	bl	8003ba4 <_svfiprintf_r>
 8003880:	1c43      	adds	r3, r0, #1
 8003882:	bfbc      	itt	lt
 8003884:	238b      	movlt	r3, #139	@ 0x8b
 8003886:	602b      	strlt	r3, [r5, #0]
 8003888:	2c00      	cmp	r4, #0
 800388a:	d0da      	beq.n	8003842 <sniprintf+0x16>
 800388c:	2200      	movs	r2, #0
 800388e:	9b02      	ldr	r3, [sp, #8]
 8003890:	701a      	strb	r2, [r3, #0]
 8003892:	e7d6      	b.n	8003842 <sniprintf+0x16>
 8003894:	20000014 	.word	0x20000014

08003898 <memset>:
 8003898:	4603      	mov	r3, r0
 800389a:	4402      	add	r2, r0
 800389c:	4293      	cmp	r3, r2
 800389e:	d100      	bne.n	80038a2 <memset+0xa>
 80038a0:	4770      	bx	lr
 80038a2:	f803 1b01 	strb.w	r1, [r3], #1
 80038a6:	e7f9      	b.n	800389c <memset+0x4>

080038a8 <__errno>:
 80038a8:	4b01      	ldr	r3, [pc, #4]	@ (80038b0 <__errno+0x8>)
 80038aa:	6818      	ldr	r0, [r3, #0]
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	20000014 	.word	0x20000014

080038b4 <__libc_init_array>:
 80038b4:	b570      	push	{r4, r5, r6, lr}
 80038b6:	2600      	movs	r6, #0
 80038b8:	4d0c      	ldr	r5, [pc, #48]	@ (80038ec <__libc_init_array+0x38>)
 80038ba:	4c0d      	ldr	r4, [pc, #52]	@ (80038f0 <__libc_init_array+0x3c>)
 80038bc:	1b64      	subs	r4, r4, r5
 80038be:	10a4      	asrs	r4, r4, #2
 80038c0:	42a6      	cmp	r6, r4
 80038c2:	d109      	bne.n	80038d8 <__libc_init_array+0x24>
 80038c4:	f000 fc76 	bl	80041b4 <_init>
 80038c8:	2600      	movs	r6, #0
 80038ca:	4d0a      	ldr	r5, [pc, #40]	@ (80038f4 <__libc_init_array+0x40>)
 80038cc:	4c0a      	ldr	r4, [pc, #40]	@ (80038f8 <__libc_init_array+0x44>)
 80038ce:	1b64      	subs	r4, r4, r5
 80038d0:	10a4      	asrs	r4, r4, #2
 80038d2:	42a6      	cmp	r6, r4
 80038d4:	d105      	bne.n	80038e2 <__libc_init_array+0x2e>
 80038d6:	bd70      	pop	{r4, r5, r6, pc}
 80038d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80038dc:	4798      	blx	r3
 80038de:	3601      	adds	r6, #1
 80038e0:	e7ee      	b.n	80038c0 <__libc_init_array+0xc>
 80038e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80038e6:	4798      	blx	r3
 80038e8:	3601      	adds	r6, #1
 80038ea:	e7f2      	b.n	80038d2 <__libc_init_array+0x1e>
 80038ec:	08004280 	.word	0x08004280
 80038f0:	08004280 	.word	0x08004280
 80038f4:	08004280 	.word	0x08004280
 80038f8:	08004284 	.word	0x08004284

080038fc <__retarget_lock_acquire_recursive>:
 80038fc:	4770      	bx	lr

080038fe <__retarget_lock_release_recursive>:
 80038fe:	4770      	bx	lr

08003900 <_free_r>:
 8003900:	b538      	push	{r3, r4, r5, lr}
 8003902:	4605      	mov	r5, r0
 8003904:	2900      	cmp	r1, #0
 8003906:	d040      	beq.n	800398a <_free_r+0x8a>
 8003908:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800390c:	1f0c      	subs	r4, r1, #4
 800390e:	2b00      	cmp	r3, #0
 8003910:	bfb8      	it	lt
 8003912:	18e4      	addlt	r4, r4, r3
 8003914:	f000 f8de 	bl	8003ad4 <__malloc_lock>
 8003918:	4a1c      	ldr	r2, [pc, #112]	@ (800398c <_free_r+0x8c>)
 800391a:	6813      	ldr	r3, [r2, #0]
 800391c:	b933      	cbnz	r3, 800392c <_free_r+0x2c>
 800391e:	6063      	str	r3, [r4, #4]
 8003920:	6014      	str	r4, [r2, #0]
 8003922:	4628      	mov	r0, r5
 8003924:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003928:	f000 b8da 	b.w	8003ae0 <__malloc_unlock>
 800392c:	42a3      	cmp	r3, r4
 800392e:	d908      	bls.n	8003942 <_free_r+0x42>
 8003930:	6820      	ldr	r0, [r4, #0]
 8003932:	1821      	adds	r1, r4, r0
 8003934:	428b      	cmp	r3, r1
 8003936:	bf01      	itttt	eq
 8003938:	6819      	ldreq	r1, [r3, #0]
 800393a:	685b      	ldreq	r3, [r3, #4]
 800393c:	1809      	addeq	r1, r1, r0
 800393e:	6021      	streq	r1, [r4, #0]
 8003940:	e7ed      	b.n	800391e <_free_r+0x1e>
 8003942:	461a      	mov	r2, r3
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	b10b      	cbz	r3, 800394c <_free_r+0x4c>
 8003948:	42a3      	cmp	r3, r4
 800394a:	d9fa      	bls.n	8003942 <_free_r+0x42>
 800394c:	6811      	ldr	r1, [r2, #0]
 800394e:	1850      	adds	r0, r2, r1
 8003950:	42a0      	cmp	r0, r4
 8003952:	d10b      	bne.n	800396c <_free_r+0x6c>
 8003954:	6820      	ldr	r0, [r4, #0]
 8003956:	4401      	add	r1, r0
 8003958:	1850      	adds	r0, r2, r1
 800395a:	4283      	cmp	r3, r0
 800395c:	6011      	str	r1, [r2, #0]
 800395e:	d1e0      	bne.n	8003922 <_free_r+0x22>
 8003960:	6818      	ldr	r0, [r3, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	4408      	add	r0, r1
 8003966:	6010      	str	r0, [r2, #0]
 8003968:	6053      	str	r3, [r2, #4]
 800396a:	e7da      	b.n	8003922 <_free_r+0x22>
 800396c:	d902      	bls.n	8003974 <_free_r+0x74>
 800396e:	230c      	movs	r3, #12
 8003970:	602b      	str	r3, [r5, #0]
 8003972:	e7d6      	b.n	8003922 <_free_r+0x22>
 8003974:	6820      	ldr	r0, [r4, #0]
 8003976:	1821      	adds	r1, r4, r0
 8003978:	428b      	cmp	r3, r1
 800397a:	bf01      	itttt	eq
 800397c:	6819      	ldreq	r1, [r3, #0]
 800397e:	685b      	ldreq	r3, [r3, #4]
 8003980:	1809      	addeq	r1, r1, r0
 8003982:	6021      	streq	r1, [r4, #0]
 8003984:	6063      	str	r3, [r4, #4]
 8003986:	6054      	str	r4, [r2, #4]
 8003988:	e7cb      	b.n	8003922 <_free_r+0x22>
 800398a:	bd38      	pop	{r3, r4, r5, pc}
 800398c:	20000270 	.word	0x20000270

08003990 <sbrk_aligned>:
 8003990:	b570      	push	{r4, r5, r6, lr}
 8003992:	4e0f      	ldr	r6, [pc, #60]	@ (80039d0 <sbrk_aligned+0x40>)
 8003994:	460c      	mov	r4, r1
 8003996:	6831      	ldr	r1, [r6, #0]
 8003998:	4605      	mov	r5, r0
 800399a:	b911      	cbnz	r1, 80039a2 <sbrk_aligned+0x12>
 800399c:	f000 fba8 	bl	80040f0 <_sbrk_r>
 80039a0:	6030      	str	r0, [r6, #0]
 80039a2:	4621      	mov	r1, r4
 80039a4:	4628      	mov	r0, r5
 80039a6:	f000 fba3 	bl	80040f0 <_sbrk_r>
 80039aa:	1c43      	adds	r3, r0, #1
 80039ac:	d103      	bne.n	80039b6 <sbrk_aligned+0x26>
 80039ae:	f04f 34ff 	mov.w	r4, #4294967295
 80039b2:	4620      	mov	r0, r4
 80039b4:	bd70      	pop	{r4, r5, r6, pc}
 80039b6:	1cc4      	adds	r4, r0, #3
 80039b8:	f024 0403 	bic.w	r4, r4, #3
 80039bc:	42a0      	cmp	r0, r4
 80039be:	d0f8      	beq.n	80039b2 <sbrk_aligned+0x22>
 80039c0:	1a21      	subs	r1, r4, r0
 80039c2:	4628      	mov	r0, r5
 80039c4:	f000 fb94 	bl	80040f0 <_sbrk_r>
 80039c8:	3001      	adds	r0, #1
 80039ca:	d1f2      	bne.n	80039b2 <sbrk_aligned+0x22>
 80039cc:	e7ef      	b.n	80039ae <sbrk_aligned+0x1e>
 80039ce:	bf00      	nop
 80039d0:	2000026c 	.word	0x2000026c

080039d4 <_malloc_r>:
 80039d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039d8:	1ccd      	adds	r5, r1, #3
 80039da:	f025 0503 	bic.w	r5, r5, #3
 80039de:	3508      	adds	r5, #8
 80039e0:	2d0c      	cmp	r5, #12
 80039e2:	bf38      	it	cc
 80039e4:	250c      	movcc	r5, #12
 80039e6:	2d00      	cmp	r5, #0
 80039e8:	4606      	mov	r6, r0
 80039ea:	db01      	blt.n	80039f0 <_malloc_r+0x1c>
 80039ec:	42a9      	cmp	r1, r5
 80039ee:	d904      	bls.n	80039fa <_malloc_r+0x26>
 80039f0:	230c      	movs	r3, #12
 80039f2:	6033      	str	r3, [r6, #0]
 80039f4:	2000      	movs	r0, #0
 80039f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003ad0 <_malloc_r+0xfc>
 80039fe:	f000 f869 	bl	8003ad4 <__malloc_lock>
 8003a02:	f8d8 3000 	ldr.w	r3, [r8]
 8003a06:	461c      	mov	r4, r3
 8003a08:	bb44      	cbnz	r4, 8003a5c <_malloc_r+0x88>
 8003a0a:	4629      	mov	r1, r5
 8003a0c:	4630      	mov	r0, r6
 8003a0e:	f7ff ffbf 	bl	8003990 <sbrk_aligned>
 8003a12:	1c43      	adds	r3, r0, #1
 8003a14:	4604      	mov	r4, r0
 8003a16:	d158      	bne.n	8003aca <_malloc_r+0xf6>
 8003a18:	f8d8 4000 	ldr.w	r4, [r8]
 8003a1c:	4627      	mov	r7, r4
 8003a1e:	2f00      	cmp	r7, #0
 8003a20:	d143      	bne.n	8003aaa <_malloc_r+0xd6>
 8003a22:	2c00      	cmp	r4, #0
 8003a24:	d04b      	beq.n	8003abe <_malloc_r+0xea>
 8003a26:	6823      	ldr	r3, [r4, #0]
 8003a28:	4639      	mov	r1, r7
 8003a2a:	4630      	mov	r0, r6
 8003a2c:	eb04 0903 	add.w	r9, r4, r3
 8003a30:	f000 fb5e 	bl	80040f0 <_sbrk_r>
 8003a34:	4581      	cmp	r9, r0
 8003a36:	d142      	bne.n	8003abe <_malloc_r+0xea>
 8003a38:	6821      	ldr	r1, [r4, #0]
 8003a3a:	4630      	mov	r0, r6
 8003a3c:	1a6d      	subs	r5, r5, r1
 8003a3e:	4629      	mov	r1, r5
 8003a40:	f7ff ffa6 	bl	8003990 <sbrk_aligned>
 8003a44:	3001      	adds	r0, #1
 8003a46:	d03a      	beq.n	8003abe <_malloc_r+0xea>
 8003a48:	6823      	ldr	r3, [r4, #0]
 8003a4a:	442b      	add	r3, r5
 8003a4c:	6023      	str	r3, [r4, #0]
 8003a4e:	f8d8 3000 	ldr.w	r3, [r8]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	bb62      	cbnz	r2, 8003ab0 <_malloc_r+0xdc>
 8003a56:	f8c8 7000 	str.w	r7, [r8]
 8003a5a:	e00f      	b.n	8003a7c <_malloc_r+0xa8>
 8003a5c:	6822      	ldr	r2, [r4, #0]
 8003a5e:	1b52      	subs	r2, r2, r5
 8003a60:	d420      	bmi.n	8003aa4 <_malloc_r+0xd0>
 8003a62:	2a0b      	cmp	r2, #11
 8003a64:	d917      	bls.n	8003a96 <_malloc_r+0xc2>
 8003a66:	1961      	adds	r1, r4, r5
 8003a68:	42a3      	cmp	r3, r4
 8003a6a:	6025      	str	r5, [r4, #0]
 8003a6c:	bf18      	it	ne
 8003a6e:	6059      	strne	r1, [r3, #4]
 8003a70:	6863      	ldr	r3, [r4, #4]
 8003a72:	bf08      	it	eq
 8003a74:	f8c8 1000 	streq.w	r1, [r8]
 8003a78:	5162      	str	r2, [r4, r5]
 8003a7a:	604b      	str	r3, [r1, #4]
 8003a7c:	4630      	mov	r0, r6
 8003a7e:	f000 f82f 	bl	8003ae0 <__malloc_unlock>
 8003a82:	f104 000b 	add.w	r0, r4, #11
 8003a86:	1d23      	adds	r3, r4, #4
 8003a88:	f020 0007 	bic.w	r0, r0, #7
 8003a8c:	1ac2      	subs	r2, r0, r3
 8003a8e:	bf1c      	itt	ne
 8003a90:	1a1b      	subne	r3, r3, r0
 8003a92:	50a3      	strne	r3, [r4, r2]
 8003a94:	e7af      	b.n	80039f6 <_malloc_r+0x22>
 8003a96:	6862      	ldr	r2, [r4, #4]
 8003a98:	42a3      	cmp	r3, r4
 8003a9a:	bf0c      	ite	eq
 8003a9c:	f8c8 2000 	streq.w	r2, [r8]
 8003aa0:	605a      	strne	r2, [r3, #4]
 8003aa2:	e7eb      	b.n	8003a7c <_malloc_r+0xa8>
 8003aa4:	4623      	mov	r3, r4
 8003aa6:	6864      	ldr	r4, [r4, #4]
 8003aa8:	e7ae      	b.n	8003a08 <_malloc_r+0x34>
 8003aaa:	463c      	mov	r4, r7
 8003aac:	687f      	ldr	r7, [r7, #4]
 8003aae:	e7b6      	b.n	8003a1e <_malloc_r+0x4a>
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	42a3      	cmp	r3, r4
 8003ab6:	d1fb      	bne.n	8003ab0 <_malloc_r+0xdc>
 8003ab8:	2300      	movs	r3, #0
 8003aba:	6053      	str	r3, [r2, #4]
 8003abc:	e7de      	b.n	8003a7c <_malloc_r+0xa8>
 8003abe:	230c      	movs	r3, #12
 8003ac0:	4630      	mov	r0, r6
 8003ac2:	6033      	str	r3, [r6, #0]
 8003ac4:	f000 f80c 	bl	8003ae0 <__malloc_unlock>
 8003ac8:	e794      	b.n	80039f4 <_malloc_r+0x20>
 8003aca:	6005      	str	r5, [r0, #0]
 8003acc:	e7d6      	b.n	8003a7c <_malloc_r+0xa8>
 8003ace:	bf00      	nop
 8003ad0:	20000270 	.word	0x20000270

08003ad4 <__malloc_lock>:
 8003ad4:	4801      	ldr	r0, [pc, #4]	@ (8003adc <__malloc_lock+0x8>)
 8003ad6:	f7ff bf11 	b.w	80038fc <__retarget_lock_acquire_recursive>
 8003ada:	bf00      	nop
 8003adc:	20000268 	.word	0x20000268

08003ae0 <__malloc_unlock>:
 8003ae0:	4801      	ldr	r0, [pc, #4]	@ (8003ae8 <__malloc_unlock+0x8>)
 8003ae2:	f7ff bf0c 	b.w	80038fe <__retarget_lock_release_recursive>
 8003ae6:	bf00      	nop
 8003ae8:	20000268 	.word	0x20000268

08003aec <__ssputs_r>:
 8003aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003af0:	461f      	mov	r7, r3
 8003af2:	688e      	ldr	r6, [r1, #8]
 8003af4:	4682      	mov	sl, r0
 8003af6:	42be      	cmp	r6, r7
 8003af8:	460c      	mov	r4, r1
 8003afa:	4690      	mov	r8, r2
 8003afc:	680b      	ldr	r3, [r1, #0]
 8003afe:	d82d      	bhi.n	8003b5c <__ssputs_r+0x70>
 8003b00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003b04:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003b08:	d026      	beq.n	8003b58 <__ssputs_r+0x6c>
 8003b0a:	6965      	ldr	r5, [r4, #20]
 8003b0c:	6909      	ldr	r1, [r1, #16]
 8003b0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b12:	eba3 0901 	sub.w	r9, r3, r1
 8003b16:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003b1a:	1c7b      	adds	r3, r7, #1
 8003b1c:	444b      	add	r3, r9
 8003b1e:	106d      	asrs	r5, r5, #1
 8003b20:	429d      	cmp	r5, r3
 8003b22:	bf38      	it	cc
 8003b24:	461d      	movcc	r5, r3
 8003b26:	0553      	lsls	r3, r2, #21
 8003b28:	d527      	bpl.n	8003b7a <__ssputs_r+0x8e>
 8003b2a:	4629      	mov	r1, r5
 8003b2c:	f7ff ff52 	bl	80039d4 <_malloc_r>
 8003b30:	4606      	mov	r6, r0
 8003b32:	b360      	cbz	r0, 8003b8e <__ssputs_r+0xa2>
 8003b34:	464a      	mov	r2, r9
 8003b36:	6921      	ldr	r1, [r4, #16]
 8003b38:	f000 faf8 	bl	800412c <memcpy>
 8003b3c:	89a3      	ldrh	r3, [r4, #12]
 8003b3e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003b42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b46:	81a3      	strh	r3, [r4, #12]
 8003b48:	6126      	str	r6, [r4, #16]
 8003b4a:	444e      	add	r6, r9
 8003b4c:	6026      	str	r6, [r4, #0]
 8003b4e:	463e      	mov	r6, r7
 8003b50:	6165      	str	r5, [r4, #20]
 8003b52:	eba5 0509 	sub.w	r5, r5, r9
 8003b56:	60a5      	str	r5, [r4, #8]
 8003b58:	42be      	cmp	r6, r7
 8003b5a:	d900      	bls.n	8003b5e <__ssputs_r+0x72>
 8003b5c:	463e      	mov	r6, r7
 8003b5e:	4632      	mov	r2, r6
 8003b60:	4641      	mov	r1, r8
 8003b62:	6820      	ldr	r0, [r4, #0]
 8003b64:	f000 faaa 	bl	80040bc <memmove>
 8003b68:	2000      	movs	r0, #0
 8003b6a:	68a3      	ldr	r3, [r4, #8]
 8003b6c:	1b9b      	subs	r3, r3, r6
 8003b6e:	60a3      	str	r3, [r4, #8]
 8003b70:	6823      	ldr	r3, [r4, #0]
 8003b72:	4433      	add	r3, r6
 8003b74:	6023      	str	r3, [r4, #0]
 8003b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b7a:	462a      	mov	r2, r5
 8003b7c:	f000 fae4 	bl	8004148 <_realloc_r>
 8003b80:	4606      	mov	r6, r0
 8003b82:	2800      	cmp	r0, #0
 8003b84:	d1e0      	bne.n	8003b48 <__ssputs_r+0x5c>
 8003b86:	4650      	mov	r0, sl
 8003b88:	6921      	ldr	r1, [r4, #16]
 8003b8a:	f7ff feb9 	bl	8003900 <_free_r>
 8003b8e:	230c      	movs	r3, #12
 8003b90:	f8ca 3000 	str.w	r3, [sl]
 8003b94:	89a3      	ldrh	r3, [r4, #12]
 8003b96:	f04f 30ff 	mov.w	r0, #4294967295
 8003b9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b9e:	81a3      	strh	r3, [r4, #12]
 8003ba0:	e7e9      	b.n	8003b76 <__ssputs_r+0x8a>
	...

08003ba4 <_svfiprintf_r>:
 8003ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ba8:	4698      	mov	r8, r3
 8003baa:	898b      	ldrh	r3, [r1, #12]
 8003bac:	4607      	mov	r7, r0
 8003bae:	061b      	lsls	r3, r3, #24
 8003bb0:	460d      	mov	r5, r1
 8003bb2:	4614      	mov	r4, r2
 8003bb4:	b09d      	sub	sp, #116	@ 0x74
 8003bb6:	d510      	bpl.n	8003bda <_svfiprintf_r+0x36>
 8003bb8:	690b      	ldr	r3, [r1, #16]
 8003bba:	b973      	cbnz	r3, 8003bda <_svfiprintf_r+0x36>
 8003bbc:	2140      	movs	r1, #64	@ 0x40
 8003bbe:	f7ff ff09 	bl	80039d4 <_malloc_r>
 8003bc2:	6028      	str	r0, [r5, #0]
 8003bc4:	6128      	str	r0, [r5, #16]
 8003bc6:	b930      	cbnz	r0, 8003bd6 <_svfiprintf_r+0x32>
 8003bc8:	230c      	movs	r3, #12
 8003bca:	603b      	str	r3, [r7, #0]
 8003bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8003bd0:	b01d      	add	sp, #116	@ 0x74
 8003bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bd6:	2340      	movs	r3, #64	@ 0x40
 8003bd8:	616b      	str	r3, [r5, #20]
 8003bda:	2300      	movs	r3, #0
 8003bdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8003bde:	2320      	movs	r3, #32
 8003be0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003be4:	2330      	movs	r3, #48	@ 0x30
 8003be6:	f04f 0901 	mov.w	r9, #1
 8003bea:	f8cd 800c 	str.w	r8, [sp, #12]
 8003bee:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003d88 <_svfiprintf_r+0x1e4>
 8003bf2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003bf6:	4623      	mov	r3, r4
 8003bf8:	469a      	mov	sl, r3
 8003bfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003bfe:	b10a      	cbz	r2, 8003c04 <_svfiprintf_r+0x60>
 8003c00:	2a25      	cmp	r2, #37	@ 0x25
 8003c02:	d1f9      	bne.n	8003bf8 <_svfiprintf_r+0x54>
 8003c04:	ebba 0b04 	subs.w	fp, sl, r4
 8003c08:	d00b      	beq.n	8003c22 <_svfiprintf_r+0x7e>
 8003c0a:	465b      	mov	r3, fp
 8003c0c:	4622      	mov	r2, r4
 8003c0e:	4629      	mov	r1, r5
 8003c10:	4638      	mov	r0, r7
 8003c12:	f7ff ff6b 	bl	8003aec <__ssputs_r>
 8003c16:	3001      	adds	r0, #1
 8003c18:	f000 80a7 	beq.w	8003d6a <_svfiprintf_r+0x1c6>
 8003c1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003c1e:	445a      	add	r2, fp
 8003c20:	9209      	str	r2, [sp, #36]	@ 0x24
 8003c22:	f89a 3000 	ldrb.w	r3, [sl]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f000 809f 	beq.w	8003d6a <_svfiprintf_r+0x1c6>
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8003c32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c36:	f10a 0a01 	add.w	sl, sl, #1
 8003c3a:	9304      	str	r3, [sp, #16]
 8003c3c:	9307      	str	r3, [sp, #28]
 8003c3e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003c42:	931a      	str	r3, [sp, #104]	@ 0x68
 8003c44:	4654      	mov	r4, sl
 8003c46:	2205      	movs	r2, #5
 8003c48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c4c:	484e      	ldr	r0, [pc, #312]	@ (8003d88 <_svfiprintf_r+0x1e4>)
 8003c4e:	f000 fa5f 	bl	8004110 <memchr>
 8003c52:	9a04      	ldr	r2, [sp, #16]
 8003c54:	b9d8      	cbnz	r0, 8003c8e <_svfiprintf_r+0xea>
 8003c56:	06d0      	lsls	r0, r2, #27
 8003c58:	bf44      	itt	mi
 8003c5a:	2320      	movmi	r3, #32
 8003c5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c60:	0711      	lsls	r1, r2, #28
 8003c62:	bf44      	itt	mi
 8003c64:	232b      	movmi	r3, #43	@ 0x2b
 8003c66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c6a:	f89a 3000 	ldrb.w	r3, [sl]
 8003c6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c70:	d015      	beq.n	8003c9e <_svfiprintf_r+0xfa>
 8003c72:	4654      	mov	r4, sl
 8003c74:	2000      	movs	r0, #0
 8003c76:	f04f 0c0a 	mov.w	ip, #10
 8003c7a:	9a07      	ldr	r2, [sp, #28]
 8003c7c:	4621      	mov	r1, r4
 8003c7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c82:	3b30      	subs	r3, #48	@ 0x30
 8003c84:	2b09      	cmp	r3, #9
 8003c86:	d94b      	bls.n	8003d20 <_svfiprintf_r+0x17c>
 8003c88:	b1b0      	cbz	r0, 8003cb8 <_svfiprintf_r+0x114>
 8003c8a:	9207      	str	r2, [sp, #28]
 8003c8c:	e014      	b.n	8003cb8 <_svfiprintf_r+0x114>
 8003c8e:	eba0 0308 	sub.w	r3, r0, r8
 8003c92:	fa09 f303 	lsl.w	r3, r9, r3
 8003c96:	4313      	orrs	r3, r2
 8003c98:	46a2      	mov	sl, r4
 8003c9a:	9304      	str	r3, [sp, #16]
 8003c9c:	e7d2      	b.n	8003c44 <_svfiprintf_r+0xa0>
 8003c9e:	9b03      	ldr	r3, [sp, #12]
 8003ca0:	1d19      	adds	r1, r3, #4
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	9103      	str	r1, [sp, #12]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	bfbb      	ittet	lt
 8003caa:	425b      	neglt	r3, r3
 8003cac:	f042 0202 	orrlt.w	r2, r2, #2
 8003cb0:	9307      	strge	r3, [sp, #28]
 8003cb2:	9307      	strlt	r3, [sp, #28]
 8003cb4:	bfb8      	it	lt
 8003cb6:	9204      	strlt	r2, [sp, #16]
 8003cb8:	7823      	ldrb	r3, [r4, #0]
 8003cba:	2b2e      	cmp	r3, #46	@ 0x2e
 8003cbc:	d10a      	bne.n	8003cd4 <_svfiprintf_r+0x130>
 8003cbe:	7863      	ldrb	r3, [r4, #1]
 8003cc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8003cc2:	d132      	bne.n	8003d2a <_svfiprintf_r+0x186>
 8003cc4:	9b03      	ldr	r3, [sp, #12]
 8003cc6:	3402      	adds	r4, #2
 8003cc8:	1d1a      	adds	r2, r3, #4
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	9203      	str	r2, [sp, #12]
 8003cce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003cd2:	9305      	str	r3, [sp, #20]
 8003cd4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003d8c <_svfiprintf_r+0x1e8>
 8003cd8:	2203      	movs	r2, #3
 8003cda:	4650      	mov	r0, sl
 8003cdc:	7821      	ldrb	r1, [r4, #0]
 8003cde:	f000 fa17 	bl	8004110 <memchr>
 8003ce2:	b138      	cbz	r0, 8003cf4 <_svfiprintf_r+0x150>
 8003ce4:	2240      	movs	r2, #64	@ 0x40
 8003ce6:	9b04      	ldr	r3, [sp, #16]
 8003ce8:	eba0 000a 	sub.w	r0, r0, sl
 8003cec:	4082      	lsls	r2, r0
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	3401      	adds	r4, #1
 8003cf2:	9304      	str	r3, [sp, #16]
 8003cf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cf8:	2206      	movs	r2, #6
 8003cfa:	4825      	ldr	r0, [pc, #148]	@ (8003d90 <_svfiprintf_r+0x1ec>)
 8003cfc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003d00:	f000 fa06 	bl	8004110 <memchr>
 8003d04:	2800      	cmp	r0, #0
 8003d06:	d036      	beq.n	8003d76 <_svfiprintf_r+0x1d2>
 8003d08:	4b22      	ldr	r3, [pc, #136]	@ (8003d94 <_svfiprintf_r+0x1f0>)
 8003d0a:	bb1b      	cbnz	r3, 8003d54 <_svfiprintf_r+0x1b0>
 8003d0c:	9b03      	ldr	r3, [sp, #12]
 8003d0e:	3307      	adds	r3, #7
 8003d10:	f023 0307 	bic.w	r3, r3, #7
 8003d14:	3308      	adds	r3, #8
 8003d16:	9303      	str	r3, [sp, #12]
 8003d18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d1a:	4433      	add	r3, r6
 8003d1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d1e:	e76a      	b.n	8003bf6 <_svfiprintf_r+0x52>
 8003d20:	460c      	mov	r4, r1
 8003d22:	2001      	movs	r0, #1
 8003d24:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d28:	e7a8      	b.n	8003c7c <_svfiprintf_r+0xd8>
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	f04f 0c0a 	mov.w	ip, #10
 8003d30:	4619      	mov	r1, r3
 8003d32:	3401      	adds	r4, #1
 8003d34:	9305      	str	r3, [sp, #20]
 8003d36:	4620      	mov	r0, r4
 8003d38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d3c:	3a30      	subs	r2, #48	@ 0x30
 8003d3e:	2a09      	cmp	r2, #9
 8003d40:	d903      	bls.n	8003d4a <_svfiprintf_r+0x1a6>
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d0c6      	beq.n	8003cd4 <_svfiprintf_r+0x130>
 8003d46:	9105      	str	r1, [sp, #20]
 8003d48:	e7c4      	b.n	8003cd4 <_svfiprintf_r+0x130>
 8003d4a:	4604      	mov	r4, r0
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d52:	e7f0      	b.n	8003d36 <_svfiprintf_r+0x192>
 8003d54:	ab03      	add	r3, sp, #12
 8003d56:	9300      	str	r3, [sp, #0]
 8003d58:	462a      	mov	r2, r5
 8003d5a:	4638      	mov	r0, r7
 8003d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8003d98 <_svfiprintf_r+0x1f4>)
 8003d5e:	a904      	add	r1, sp, #16
 8003d60:	f3af 8000 	nop.w
 8003d64:	1c42      	adds	r2, r0, #1
 8003d66:	4606      	mov	r6, r0
 8003d68:	d1d6      	bne.n	8003d18 <_svfiprintf_r+0x174>
 8003d6a:	89ab      	ldrh	r3, [r5, #12]
 8003d6c:	065b      	lsls	r3, r3, #25
 8003d6e:	f53f af2d 	bmi.w	8003bcc <_svfiprintf_r+0x28>
 8003d72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003d74:	e72c      	b.n	8003bd0 <_svfiprintf_r+0x2c>
 8003d76:	ab03      	add	r3, sp, #12
 8003d78:	9300      	str	r3, [sp, #0]
 8003d7a:	462a      	mov	r2, r5
 8003d7c:	4638      	mov	r0, r7
 8003d7e:	4b06      	ldr	r3, [pc, #24]	@ (8003d98 <_svfiprintf_r+0x1f4>)
 8003d80:	a904      	add	r1, sp, #16
 8003d82:	f000 f87d 	bl	8003e80 <_printf_i>
 8003d86:	e7ed      	b.n	8003d64 <_svfiprintf_r+0x1c0>
 8003d88:	08004242 	.word	0x08004242
 8003d8c:	08004248 	.word	0x08004248
 8003d90:	0800424c 	.word	0x0800424c
 8003d94:	00000000 	.word	0x00000000
 8003d98:	08003aed 	.word	0x08003aed

08003d9c <_printf_common>:
 8003d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003da0:	4616      	mov	r6, r2
 8003da2:	4698      	mov	r8, r3
 8003da4:	688a      	ldr	r2, [r1, #8]
 8003da6:	690b      	ldr	r3, [r1, #16]
 8003da8:	4607      	mov	r7, r0
 8003daa:	4293      	cmp	r3, r2
 8003dac:	bfb8      	it	lt
 8003dae:	4613      	movlt	r3, r2
 8003db0:	6033      	str	r3, [r6, #0]
 8003db2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003db6:	460c      	mov	r4, r1
 8003db8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003dbc:	b10a      	cbz	r2, 8003dc2 <_printf_common+0x26>
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	6033      	str	r3, [r6, #0]
 8003dc2:	6823      	ldr	r3, [r4, #0]
 8003dc4:	0699      	lsls	r1, r3, #26
 8003dc6:	bf42      	ittt	mi
 8003dc8:	6833      	ldrmi	r3, [r6, #0]
 8003dca:	3302      	addmi	r3, #2
 8003dcc:	6033      	strmi	r3, [r6, #0]
 8003dce:	6825      	ldr	r5, [r4, #0]
 8003dd0:	f015 0506 	ands.w	r5, r5, #6
 8003dd4:	d106      	bne.n	8003de4 <_printf_common+0x48>
 8003dd6:	f104 0a19 	add.w	sl, r4, #25
 8003dda:	68e3      	ldr	r3, [r4, #12]
 8003ddc:	6832      	ldr	r2, [r6, #0]
 8003dde:	1a9b      	subs	r3, r3, r2
 8003de0:	42ab      	cmp	r3, r5
 8003de2:	dc2b      	bgt.n	8003e3c <_printf_common+0xa0>
 8003de4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003de8:	6822      	ldr	r2, [r4, #0]
 8003dea:	3b00      	subs	r3, #0
 8003dec:	bf18      	it	ne
 8003dee:	2301      	movne	r3, #1
 8003df0:	0692      	lsls	r2, r2, #26
 8003df2:	d430      	bmi.n	8003e56 <_printf_common+0xba>
 8003df4:	4641      	mov	r1, r8
 8003df6:	4638      	mov	r0, r7
 8003df8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003dfc:	47c8      	blx	r9
 8003dfe:	3001      	adds	r0, #1
 8003e00:	d023      	beq.n	8003e4a <_printf_common+0xae>
 8003e02:	6823      	ldr	r3, [r4, #0]
 8003e04:	6922      	ldr	r2, [r4, #16]
 8003e06:	f003 0306 	and.w	r3, r3, #6
 8003e0a:	2b04      	cmp	r3, #4
 8003e0c:	bf14      	ite	ne
 8003e0e:	2500      	movne	r5, #0
 8003e10:	6833      	ldreq	r3, [r6, #0]
 8003e12:	f04f 0600 	mov.w	r6, #0
 8003e16:	bf08      	it	eq
 8003e18:	68e5      	ldreq	r5, [r4, #12]
 8003e1a:	f104 041a 	add.w	r4, r4, #26
 8003e1e:	bf08      	it	eq
 8003e20:	1aed      	subeq	r5, r5, r3
 8003e22:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003e26:	bf08      	it	eq
 8003e28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	bfc4      	itt	gt
 8003e30:	1a9b      	subgt	r3, r3, r2
 8003e32:	18ed      	addgt	r5, r5, r3
 8003e34:	42b5      	cmp	r5, r6
 8003e36:	d11a      	bne.n	8003e6e <_printf_common+0xd2>
 8003e38:	2000      	movs	r0, #0
 8003e3a:	e008      	b.n	8003e4e <_printf_common+0xb2>
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	4652      	mov	r2, sl
 8003e40:	4641      	mov	r1, r8
 8003e42:	4638      	mov	r0, r7
 8003e44:	47c8      	blx	r9
 8003e46:	3001      	adds	r0, #1
 8003e48:	d103      	bne.n	8003e52 <_printf_common+0xb6>
 8003e4a:	f04f 30ff 	mov.w	r0, #4294967295
 8003e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e52:	3501      	adds	r5, #1
 8003e54:	e7c1      	b.n	8003dda <_printf_common+0x3e>
 8003e56:	2030      	movs	r0, #48	@ 0x30
 8003e58:	18e1      	adds	r1, r4, r3
 8003e5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003e5e:	1c5a      	adds	r2, r3, #1
 8003e60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003e64:	4422      	add	r2, r4
 8003e66:	3302      	adds	r3, #2
 8003e68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003e6c:	e7c2      	b.n	8003df4 <_printf_common+0x58>
 8003e6e:	2301      	movs	r3, #1
 8003e70:	4622      	mov	r2, r4
 8003e72:	4641      	mov	r1, r8
 8003e74:	4638      	mov	r0, r7
 8003e76:	47c8      	blx	r9
 8003e78:	3001      	adds	r0, #1
 8003e7a:	d0e6      	beq.n	8003e4a <_printf_common+0xae>
 8003e7c:	3601      	adds	r6, #1
 8003e7e:	e7d9      	b.n	8003e34 <_printf_common+0x98>

08003e80 <_printf_i>:
 8003e80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e84:	7e0f      	ldrb	r7, [r1, #24]
 8003e86:	4691      	mov	r9, r2
 8003e88:	2f78      	cmp	r7, #120	@ 0x78
 8003e8a:	4680      	mov	r8, r0
 8003e8c:	460c      	mov	r4, r1
 8003e8e:	469a      	mov	sl, r3
 8003e90:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003e92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003e96:	d807      	bhi.n	8003ea8 <_printf_i+0x28>
 8003e98:	2f62      	cmp	r7, #98	@ 0x62
 8003e9a:	d80a      	bhi.n	8003eb2 <_printf_i+0x32>
 8003e9c:	2f00      	cmp	r7, #0
 8003e9e:	f000 80d1 	beq.w	8004044 <_printf_i+0x1c4>
 8003ea2:	2f58      	cmp	r7, #88	@ 0x58
 8003ea4:	f000 80b8 	beq.w	8004018 <_printf_i+0x198>
 8003ea8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003eac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003eb0:	e03a      	b.n	8003f28 <_printf_i+0xa8>
 8003eb2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003eb6:	2b15      	cmp	r3, #21
 8003eb8:	d8f6      	bhi.n	8003ea8 <_printf_i+0x28>
 8003eba:	a101      	add	r1, pc, #4	@ (adr r1, 8003ec0 <_printf_i+0x40>)
 8003ebc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ec0:	08003f19 	.word	0x08003f19
 8003ec4:	08003f2d 	.word	0x08003f2d
 8003ec8:	08003ea9 	.word	0x08003ea9
 8003ecc:	08003ea9 	.word	0x08003ea9
 8003ed0:	08003ea9 	.word	0x08003ea9
 8003ed4:	08003ea9 	.word	0x08003ea9
 8003ed8:	08003f2d 	.word	0x08003f2d
 8003edc:	08003ea9 	.word	0x08003ea9
 8003ee0:	08003ea9 	.word	0x08003ea9
 8003ee4:	08003ea9 	.word	0x08003ea9
 8003ee8:	08003ea9 	.word	0x08003ea9
 8003eec:	0800402b 	.word	0x0800402b
 8003ef0:	08003f57 	.word	0x08003f57
 8003ef4:	08003fe5 	.word	0x08003fe5
 8003ef8:	08003ea9 	.word	0x08003ea9
 8003efc:	08003ea9 	.word	0x08003ea9
 8003f00:	0800404d 	.word	0x0800404d
 8003f04:	08003ea9 	.word	0x08003ea9
 8003f08:	08003f57 	.word	0x08003f57
 8003f0c:	08003ea9 	.word	0x08003ea9
 8003f10:	08003ea9 	.word	0x08003ea9
 8003f14:	08003fed 	.word	0x08003fed
 8003f18:	6833      	ldr	r3, [r6, #0]
 8003f1a:	1d1a      	adds	r2, r3, #4
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6032      	str	r2, [r6, #0]
 8003f20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e09c      	b.n	8004066 <_printf_i+0x1e6>
 8003f2c:	6833      	ldr	r3, [r6, #0]
 8003f2e:	6820      	ldr	r0, [r4, #0]
 8003f30:	1d19      	adds	r1, r3, #4
 8003f32:	6031      	str	r1, [r6, #0]
 8003f34:	0606      	lsls	r6, r0, #24
 8003f36:	d501      	bpl.n	8003f3c <_printf_i+0xbc>
 8003f38:	681d      	ldr	r5, [r3, #0]
 8003f3a:	e003      	b.n	8003f44 <_printf_i+0xc4>
 8003f3c:	0645      	lsls	r5, r0, #25
 8003f3e:	d5fb      	bpl.n	8003f38 <_printf_i+0xb8>
 8003f40:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003f44:	2d00      	cmp	r5, #0
 8003f46:	da03      	bge.n	8003f50 <_printf_i+0xd0>
 8003f48:	232d      	movs	r3, #45	@ 0x2d
 8003f4a:	426d      	negs	r5, r5
 8003f4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f50:	230a      	movs	r3, #10
 8003f52:	4858      	ldr	r0, [pc, #352]	@ (80040b4 <_printf_i+0x234>)
 8003f54:	e011      	b.n	8003f7a <_printf_i+0xfa>
 8003f56:	6821      	ldr	r1, [r4, #0]
 8003f58:	6833      	ldr	r3, [r6, #0]
 8003f5a:	0608      	lsls	r0, r1, #24
 8003f5c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003f60:	d402      	bmi.n	8003f68 <_printf_i+0xe8>
 8003f62:	0649      	lsls	r1, r1, #25
 8003f64:	bf48      	it	mi
 8003f66:	b2ad      	uxthmi	r5, r5
 8003f68:	2f6f      	cmp	r7, #111	@ 0x6f
 8003f6a:	6033      	str	r3, [r6, #0]
 8003f6c:	bf14      	ite	ne
 8003f6e:	230a      	movne	r3, #10
 8003f70:	2308      	moveq	r3, #8
 8003f72:	4850      	ldr	r0, [pc, #320]	@ (80040b4 <_printf_i+0x234>)
 8003f74:	2100      	movs	r1, #0
 8003f76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003f7a:	6866      	ldr	r6, [r4, #4]
 8003f7c:	2e00      	cmp	r6, #0
 8003f7e:	60a6      	str	r6, [r4, #8]
 8003f80:	db05      	blt.n	8003f8e <_printf_i+0x10e>
 8003f82:	6821      	ldr	r1, [r4, #0]
 8003f84:	432e      	orrs	r6, r5
 8003f86:	f021 0104 	bic.w	r1, r1, #4
 8003f8a:	6021      	str	r1, [r4, #0]
 8003f8c:	d04b      	beq.n	8004026 <_printf_i+0x1a6>
 8003f8e:	4616      	mov	r6, r2
 8003f90:	fbb5 f1f3 	udiv	r1, r5, r3
 8003f94:	fb03 5711 	mls	r7, r3, r1, r5
 8003f98:	5dc7      	ldrb	r7, [r0, r7]
 8003f9a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003f9e:	462f      	mov	r7, r5
 8003fa0:	42bb      	cmp	r3, r7
 8003fa2:	460d      	mov	r5, r1
 8003fa4:	d9f4      	bls.n	8003f90 <_printf_i+0x110>
 8003fa6:	2b08      	cmp	r3, #8
 8003fa8:	d10b      	bne.n	8003fc2 <_printf_i+0x142>
 8003faa:	6823      	ldr	r3, [r4, #0]
 8003fac:	07df      	lsls	r7, r3, #31
 8003fae:	d508      	bpl.n	8003fc2 <_printf_i+0x142>
 8003fb0:	6923      	ldr	r3, [r4, #16]
 8003fb2:	6861      	ldr	r1, [r4, #4]
 8003fb4:	4299      	cmp	r1, r3
 8003fb6:	bfde      	ittt	le
 8003fb8:	2330      	movle	r3, #48	@ 0x30
 8003fba:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003fbe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003fc2:	1b92      	subs	r2, r2, r6
 8003fc4:	6122      	str	r2, [r4, #16]
 8003fc6:	464b      	mov	r3, r9
 8003fc8:	4621      	mov	r1, r4
 8003fca:	4640      	mov	r0, r8
 8003fcc:	f8cd a000 	str.w	sl, [sp]
 8003fd0:	aa03      	add	r2, sp, #12
 8003fd2:	f7ff fee3 	bl	8003d9c <_printf_common>
 8003fd6:	3001      	adds	r0, #1
 8003fd8:	d14a      	bne.n	8004070 <_printf_i+0x1f0>
 8003fda:	f04f 30ff 	mov.w	r0, #4294967295
 8003fde:	b004      	add	sp, #16
 8003fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fe4:	6823      	ldr	r3, [r4, #0]
 8003fe6:	f043 0320 	orr.w	r3, r3, #32
 8003fea:	6023      	str	r3, [r4, #0]
 8003fec:	2778      	movs	r7, #120	@ 0x78
 8003fee:	4832      	ldr	r0, [pc, #200]	@ (80040b8 <_printf_i+0x238>)
 8003ff0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003ff4:	6823      	ldr	r3, [r4, #0]
 8003ff6:	6831      	ldr	r1, [r6, #0]
 8003ff8:	061f      	lsls	r7, r3, #24
 8003ffa:	f851 5b04 	ldr.w	r5, [r1], #4
 8003ffe:	d402      	bmi.n	8004006 <_printf_i+0x186>
 8004000:	065f      	lsls	r7, r3, #25
 8004002:	bf48      	it	mi
 8004004:	b2ad      	uxthmi	r5, r5
 8004006:	6031      	str	r1, [r6, #0]
 8004008:	07d9      	lsls	r1, r3, #31
 800400a:	bf44      	itt	mi
 800400c:	f043 0320 	orrmi.w	r3, r3, #32
 8004010:	6023      	strmi	r3, [r4, #0]
 8004012:	b11d      	cbz	r5, 800401c <_printf_i+0x19c>
 8004014:	2310      	movs	r3, #16
 8004016:	e7ad      	b.n	8003f74 <_printf_i+0xf4>
 8004018:	4826      	ldr	r0, [pc, #152]	@ (80040b4 <_printf_i+0x234>)
 800401a:	e7e9      	b.n	8003ff0 <_printf_i+0x170>
 800401c:	6823      	ldr	r3, [r4, #0]
 800401e:	f023 0320 	bic.w	r3, r3, #32
 8004022:	6023      	str	r3, [r4, #0]
 8004024:	e7f6      	b.n	8004014 <_printf_i+0x194>
 8004026:	4616      	mov	r6, r2
 8004028:	e7bd      	b.n	8003fa6 <_printf_i+0x126>
 800402a:	6833      	ldr	r3, [r6, #0]
 800402c:	6825      	ldr	r5, [r4, #0]
 800402e:	1d18      	adds	r0, r3, #4
 8004030:	6961      	ldr	r1, [r4, #20]
 8004032:	6030      	str	r0, [r6, #0]
 8004034:	062e      	lsls	r6, r5, #24
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	d501      	bpl.n	800403e <_printf_i+0x1be>
 800403a:	6019      	str	r1, [r3, #0]
 800403c:	e002      	b.n	8004044 <_printf_i+0x1c4>
 800403e:	0668      	lsls	r0, r5, #25
 8004040:	d5fb      	bpl.n	800403a <_printf_i+0x1ba>
 8004042:	8019      	strh	r1, [r3, #0]
 8004044:	2300      	movs	r3, #0
 8004046:	4616      	mov	r6, r2
 8004048:	6123      	str	r3, [r4, #16]
 800404a:	e7bc      	b.n	8003fc6 <_printf_i+0x146>
 800404c:	6833      	ldr	r3, [r6, #0]
 800404e:	2100      	movs	r1, #0
 8004050:	1d1a      	adds	r2, r3, #4
 8004052:	6032      	str	r2, [r6, #0]
 8004054:	681e      	ldr	r6, [r3, #0]
 8004056:	6862      	ldr	r2, [r4, #4]
 8004058:	4630      	mov	r0, r6
 800405a:	f000 f859 	bl	8004110 <memchr>
 800405e:	b108      	cbz	r0, 8004064 <_printf_i+0x1e4>
 8004060:	1b80      	subs	r0, r0, r6
 8004062:	6060      	str	r0, [r4, #4]
 8004064:	6863      	ldr	r3, [r4, #4]
 8004066:	6123      	str	r3, [r4, #16]
 8004068:	2300      	movs	r3, #0
 800406a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800406e:	e7aa      	b.n	8003fc6 <_printf_i+0x146>
 8004070:	4632      	mov	r2, r6
 8004072:	4649      	mov	r1, r9
 8004074:	4640      	mov	r0, r8
 8004076:	6923      	ldr	r3, [r4, #16]
 8004078:	47d0      	blx	sl
 800407a:	3001      	adds	r0, #1
 800407c:	d0ad      	beq.n	8003fda <_printf_i+0x15a>
 800407e:	6823      	ldr	r3, [r4, #0]
 8004080:	079b      	lsls	r3, r3, #30
 8004082:	d413      	bmi.n	80040ac <_printf_i+0x22c>
 8004084:	68e0      	ldr	r0, [r4, #12]
 8004086:	9b03      	ldr	r3, [sp, #12]
 8004088:	4298      	cmp	r0, r3
 800408a:	bfb8      	it	lt
 800408c:	4618      	movlt	r0, r3
 800408e:	e7a6      	b.n	8003fde <_printf_i+0x15e>
 8004090:	2301      	movs	r3, #1
 8004092:	4632      	mov	r2, r6
 8004094:	4649      	mov	r1, r9
 8004096:	4640      	mov	r0, r8
 8004098:	47d0      	blx	sl
 800409a:	3001      	adds	r0, #1
 800409c:	d09d      	beq.n	8003fda <_printf_i+0x15a>
 800409e:	3501      	adds	r5, #1
 80040a0:	68e3      	ldr	r3, [r4, #12]
 80040a2:	9903      	ldr	r1, [sp, #12]
 80040a4:	1a5b      	subs	r3, r3, r1
 80040a6:	42ab      	cmp	r3, r5
 80040a8:	dcf2      	bgt.n	8004090 <_printf_i+0x210>
 80040aa:	e7eb      	b.n	8004084 <_printf_i+0x204>
 80040ac:	2500      	movs	r5, #0
 80040ae:	f104 0619 	add.w	r6, r4, #25
 80040b2:	e7f5      	b.n	80040a0 <_printf_i+0x220>
 80040b4:	08004253 	.word	0x08004253
 80040b8:	08004264 	.word	0x08004264

080040bc <memmove>:
 80040bc:	4288      	cmp	r0, r1
 80040be:	b510      	push	{r4, lr}
 80040c0:	eb01 0402 	add.w	r4, r1, r2
 80040c4:	d902      	bls.n	80040cc <memmove+0x10>
 80040c6:	4284      	cmp	r4, r0
 80040c8:	4623      	mov	r3, r4
 80040ca:	d807      	bhi.n	80040dc <memmove+0x20>
 80040cc:	1e43      	subs	r3, r0, #1
 80040ce:	42a1      	cmp	r1, r4
 80040d0:	d008      	beq.n	80040e4 <memmove+0x28>
 80040d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80040d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80040da:	e7f8      	b.n	80040ce <memmove+0x12>
 80040dc:	4601      	mov	r1, r0
 80040de:	4402      	add	r2, r0
 80040e0:	428a      	cmp	r2, r1
 80040e2:	d100      	bne.n	80040e6 <memmove+0x2a>
 80040e4:	bd10      	pop	{r4, pc}
 80040e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80040ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80040ee:	e7f7      	b.n	80040e0 <memmove+0x24>

080040f0 <_sbrk_r>:
 80040f0:	b538      	push	{r3, r4, r5, lr}
 80040f2:	2300      	movs	r3, #0
 80040f4:	4d05      	ldr	r5, [pc, #20]	@ (800410c <_sbrk_r+0x1c>)
 80040f6:	4604      	mov	r4, r0
 80040f8:	4608      	mov	r0, r1
 80040fa:	602b      	str	r3, [r5, #0]
 80040fc:	f7fc fe70 	bl	8000de0 <_sbrk>
 8004100:	1c43      	adds	r3, r0, #1
 8004102:	d102      	bne.n	800410a <_sbrk_r+0x1a>
 8004104:	682b      	ldr	r3, [r5, #0]
 8004106:	b103      	cbz	r3, 800410a <_sbrk_r+0x1a>
 8004108:	6023      	str	r3, [r4, #0]
 800410a:	bd38      	pop	{r3, r4, r5, pc}
 800410c:	20000264 	.word	0x20000264

08004110 <memchr>:
 8004110:	4603      	mov	r3, r0
 8004112:	b510      	push	{r4, lr}
 8004114:	b2c9      	uxtb	r1, r1
 8004116:	4402      	add	r2, r0
 8004118:	4293      	cmp	r3, r2
 800411a:	4618      	mov	r0, r3
 800411c:	d101      	bne.n	8004122 <memchr+0x12>
 800411e:	2000      	movs	r0, #0
 8004120:	e003      	b.n	800412a <memchr+0x1a>
 8004122:	7804      	ldrb	r4, [r0, #0]
 8004124:	3301      	adds	r3, #1
 8004126:	428c      	cmp	r4, r1
 8004128:	d1f6      	bne.n	8004118 <memchr+0x8>
 800412a:	bd10      	pop	{r4, pc}

0800412c <memcpy>:
 800412c:	440a      	add	r2, r1
 800412e:	4291      	cmp	r1, r2
 8004130:	f100 33ff 	add.w	r3, r0, #4294967295
 8004134:	d100      	bne.n	8004138 <memcpy+0xc>
 8004136:	4770      	bx	lr
 8004138:	b510      	push	{r4, lr}
 800413a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800413e:	4291      	cmp	r1, r2
 8004140:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004144:	d1f9      	bne.n	800413a <memcpy+0xe>
 8004146:	bd10      	pop	{r4, pc}

08004148 <_realloc_r>:
 8004148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800414c:	4607      	mov	r7, r0
 800414e:	4614      	mov	r4, r2
 8004150:	460d      	mov	r5, r1
 8004152:	b921      	cbnz	r1, 800415e <_realloc_r+0x16>
 8004154:	4611      	mov	r1, r2
 8004156:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800415a:	f7ff bc3b 	b.w	80039d4 <_malloc_r>
 800415e:	b92a      	cbnz	r2, 800416c <_realloc_r+0x24>
 8004160:	f7ff fbce 	bl	8003900 <_free_r>
 8004164:	4625      	mov	r5, r4
 8004166:	4628      	mov	r0, r5
 8004168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800416c:	f000 f81a 	bl	80041a4 <_malloc_usable_size_r>
 8004170:	4284      	cmp	r4, r0
 8004172:	4606      	mov	r6, r0
 8004174:	d802      	bhi.n	800417c <_realloc_r+0x34>
 8004176:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800417a:	d8f4      	bhi.n	8004166 <_realloc_r+0x1e>
 800417c:	4621      	mov	r1, r4
 800417e:	4638      	mov	r0, r7
 8004180:	f7ff fc28 	bl	80039d4 <_malloc_r>
 8004184:	4680      	mov	r8, r0
 8004186:	b908      	cbnz	r0, 800418c <_realloc_r+0x44>
 8004188:	4645      	mov	r5, r8
 800418a:	e7ec      	b.n	8004166 <_realloc_r+0x1e>
 800418c:	42b4      	cmp	r4, r6
 800418e:	4622      	mov	r2, r4
 8004190:	4629      	mov	r1, r5
 8004192:	bf28      	it	cs
 8004194:	4632      	movcs	r2, r6
 8004196:	f7ff ffc9 	bl	800412c <memcpy>
 800419a:	4629      	mov	r1, r5
 800419c:	4638      	mov	r0, r7
 800419e:	f7ff fbaf 	bl	8003900 <_free_r>
 80041a2:	e7f1      	b.n	8004188 <_realloc_r+0x40>

080041a4 <_malloc_usable_size_r>:
 80041a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041a8:	1f18      	subs	r0, r3, #4
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	bfbc      	itt	lt
 80041ae:	580b      	ldrlt	r3, [r1, r0]
 80041b0:	18c0      	addlt	r0, r0, r3
 80041b2:	4770      	bx	lr

080041b4 <_init>:
 80041b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041b6:	bf00      	nop
 80041b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ba:	bc08      	pop	{r3}
 80041bc:	469e      	mov	lr, r3
 80041be:	4770      	bx	lr

080041c0 <_fini>:
 80041c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041c2:	bf00      	nop
 80041c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041c6:	bc08      	pop	{r3}
 80041c8:	469e      	mov	lr, r3
 80041ca:	4770      	bx	lr
