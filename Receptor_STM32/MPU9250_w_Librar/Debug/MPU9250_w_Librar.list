
MPU9250_w_Librar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054d8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  080055e8  080055e8  000065e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056f0  080056f0  00007044  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080056f0  080056f0  00007044  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080056f0  080056f0  00007044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056f0  080056f0  000066f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080056f4  080056f4  000066f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000044  20000000  080056f8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000044  0800573c  00007044  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  0800573c  000070f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007044  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009504  00000000  00000000  0000706d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a24  00000000  00000000  00010571  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad8  00000000  00000000  00011f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000087f  00000000  00000000  00012a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a56  00000000  00000000  000132ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d238  00000000  00000000  0002ad45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085380  00000000  00000000  00037f7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bd2fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003080  00000000  00000000  000bd340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000c03c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000044 	.word	0x20000044
 800012c:	00000000 	.word	0x00000000
 8000130:	080055d0 	.word	0x080055d0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000048 	.word	0x20000048
 800014c:	080055d0 	.word	0x080055d0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2f>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a04:	bf24      	itt	cs
 8000a06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a0e:	d90d      	bls.n	8000a2c <__aeabi_d2f+0x30>
 8000a10:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a1c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a24:	bf08      	it	eq
 8000a26:	f020 0001 	biceq.w	r0, r0, #1
 8000a2a:	4770      	bx	lr
 8000a2c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a30:	d121      	bne.n	8000a76 <__aeabi_d2f+0x7a>
 8000a32:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a36:	bfbc      	itt	lt
 8000a38:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a3c:	4770      	bxlt	lr
 8000a3e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a46:	f1c2 0218 	rsb	r2, r2, #24
 8000a4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a52:	fa20 f002 	lsr.w	r0, r0, r2
 8000a56:	bf18      	it	ne
 8000a58:	f040 0001 	orrne.w	r0, r0, #1
 8000a5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a68:	ea40 000c 	orr.w	r0, r0, ip
 8000a6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a74:	e7cc      	b.n	8000a10 <__aeabi_d2f+0x14>
 8000a76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a7a:	d107      	bne.n	8000a8c <__aeabi_d2f+0x90>
 8000a7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a80:	bf1e      	ittt	ne
 8000a82:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a86:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a8a:	4770      	bxne	lr
 8000a8c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a90:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a94:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_frsub>:
 8000a9c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000aa0:	e002      	b.n	8000aa8 <__addsf3>
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_fsub>:
 8000aa4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000aa8 <__addsf3>:
 8000aa8:	0042      	lsls	r2, r0, #1
 8000aaa:	bf1f      	itttt	ne
 8000aac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ab0:	ea92 0f03 	teqne	r2, r3
 8000ab4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ab8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000abc:	d06a      	beq.n	8000b94 <__addsf3+0xec>
 8000abe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ac2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ac6:	bfc1      	itttt	gt
 8000ac8:	18d2      	addgt	r2, r2, r3
 8000aca:	4041      	eorgt	r1, r0
 8000acc:	4048      	eorgt	r0, r1
 8000ace:	4041      	eorgt	r1, r0
 8000ad0:	bfb8      	it	lt
 8000ad2:	425b      	neglt	r3, r3
 8000ad4:	2b19      	cmp	r3, #25
 8000ad6:	bf88      	it	hi
 8000ad8:	4770      	bxhi	lr
 8000ada:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000ade:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ae6:	bf18      	it	ne
 8000ae8:	4240      	negne	r0, r0
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aee:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000af2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000af6:	bf18      	it	ne
 8000af8:	4249      	negne	r1, r1
 8000afa:	ea92 0f03 	teq	r2, r3
 8000afe:	d03f      	beq.n	8000b80 <__addsf3+0xd8>
 8000b00:	f1a2 0201 	sub.w	r2, r2, #1
 8000b04:	fa41 fc03 	asr.w	ip, r1, r3
 8000b08:	eb10 000c 	adds.w	r0, r0, ip
 8000b0c:	f1c3 0320 	rsb	r3, r3, #32
 8000b10:	fa01 f103 	lsl.w	r1, r1, r3
 8000b14:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b18:	d502      	bpl.n	8000b20 <__addsf3+0x78>
 8000b1a:	4249      	negs	r1, r1
 8000b1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b20:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b24:	d313      	bcc.n	8000b4e <__addsf3+0xa6>
 8000b26:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b2a:	d306      	bcc.n	8000b3a <__addsf3+0x92>
 8000b2c:	0840      	lsrs	r0, r0, #1
 8000b2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b32:	f102 0201 	add.w	r2, r2, #1
 8000b36:	2afe      	cmp	r2, #254	@ 0xfe
 8000b38:	d251      	bcs.n	8000bde <__addsf3+0x136>
 8000b3a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b42:	bf08      	it	eq
 8000b44:	f020 0001 	biceq.w	r0, r0, #1
 8000b48:	ea40 0003 	orr.w	r0, r0, r3
 8000b4c:	4770      	bx	lr
 8000b4e:	0049      	lsls	r1, r1, #1
 8000b50:	eb40 0000 	adc.w	r0, r0, r0
 8000b54:	3a01      	subs	r2, #1
 8000b56:	bf28      	it	cs
 8000b58:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b5c:	d2ed      	bcs.n	8000b3a <__addsf3+0x92>
 8000b5e:	fab0 fc80 	clz	ip, r0
 8000b62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b66:	ebb2 020c 	subs.w	r2, r2, ip
 8000b6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b6e:	bfaa      	itet	ge
 8000b70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b74:	4252      	neglt	r2, r2
 8000b76:	4318      	orrge	r0, r3
 8000b78:	bfbc      	itt	lt
 8000b7a:	40d0      	lsrlt	r0, r2
 8000b7c:	4318      	orrlt	r0, r3
 8000b7e:	4770      	bx	lr
 8000b80:	f092 0f00 	teq	r2, #0
 8000b84:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b88:	bf06      	itte	eq
 8000b8a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b8e:	3201      	addeq	r2, #1
 8000b90:	3b01      	subne	r3, #1
 8000b92:	e7b5      	b.n	8000b00 <__addsf3+0x58>
 8000b94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b9c:	bf18      	it	ne
 8000b9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba2:	d021      	beq.n	8000be8 <__addsf3+0x140>
 8000ba4:	ea92 0f03 	teq	r2, r3
 8000ba8:	d004      	beq.n	8000bb4 <__addsf3+0x10c>
 8000baa:	f092 0f00 	teq	r2, #0
 8000bae:	bf08      	it	eq
 8000bb0:	4608      	moveq	r0, r1
 8000bb2:	4770      	bx	lr
 8000bb4:	ea90 0f01 	teq	r0, r1
 8000bb8:	bf1c      	itt	ne
 8000bba:	2000      	movne	r0, #0
 8000bbc:	4770      	bxne	lr
 8000bbe:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bc2:	d104      	bne.n	8000bce <__addsf3+0x126>
 8000bc4:	0040      	lsls	r0, r0, #1
 8000bc6:	bf28      	it	cs
 8000bc8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bcc:	4770      	bx	lr
 8000bce:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bd2:	bf3c      	itt	cc
 8000bd4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bd8:	4770      	bxcc	lr
 8000bda:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bde:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000be6:	4770      	bx	lr
 8000be8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bec:	bf16      	itet	ne
 8000bee:	4608      	movne	r0, r1
 8000bf0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bf4:	4601      	movne	r1, r0
 8000bf6:	0242      	lsls	r2, r0, #9
 8000bf8:	bf06      	itte	eq
 8000bfa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bfe:	ea90 0f01 	teqeq	r0, r1
 8000c02:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_ui2f>:
 8000c08:	f04f 0300 	mov.w	r3, #0
 8000c0c:	e004      	b.n	8000c18 <__aeabi_i2f+0x8>
 8000c0e:	bf00      	nop

08000c10 <__aeabi_i2f>:
 8000c10:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c14:	bf48      	it	mi
 8000c16:	4240      	negmi	r0, r0
 8000c18:	ea5f 0c00 	movs.w	ip, r0
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c24:	4601      	mov	r1, r0
 8000c26:	f04f 0000 	mov.w	r0, #0
 8000c2a:	e01c      	b.n	8000c66 <__aeabi_l2f+0x2a>

08000c2c <__aeabi_ul2f>:
 8000c2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c30:	bf08      	it	eq
 8000c32:	4770      	bxeq	lr
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e00a      	b.n	8000c50 <__aeabi_l2f+0x14>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_l2f>:
 8000c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c48:	d502      	bpl.n	8000c50 <__aeabi_l2f+0x14>
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	ea5f 0c01 	movs.w	ip, r1
 8000c54:	bf02      	ittt	eq
 8000c56:	4684      	moveq	ip, r0
 8000c58:	4601      	moveq	r1, r0
 8000c5a:	2000      	moveq	r0, #0
 8000c5c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c60:	bf08      	it	eq
 8000c62:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c66:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c6a:	fabc f28c 	clz	r2, ip
 8000c6e:	3a08      	subs	r2, #8
 8000c70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c74:	db10      	blt.n	8000c98 <__aeabi_l2f+0x5c>
 8000c76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c80:	f1c2 0220 	rsb	r2, r2, #32
 8000c84:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c88:	fa20 f202 	lsr.w	r2, r0, r2
 8000c8c:	eb43 0002 	adc.w	r0, r3, r2
 8000c90:	bf08      	it	eq
 8000c92:	f020 0001 	biceq.w	r0, r0, #1
 8000c96:	4770      	bx	lr
 8000c98:	f102 0220 	add.w	r2, r2, #32
 8000c9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca0:	f1c2 0220 	rsb	r2, r2, #32
 8000ca4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ca8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cac:	eb43 0002 	adc.w	r0, r3, r2
 8000cb0:	bf08      	it	eq
 8000cb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_fmul>:
 8000cb8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000cbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cc0:	bf1e      	ittt	ne
 8000cc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cc6:	ea92 0f0c 	teqne	r2, ip
 8000cca:	ea93 0f0c 	teqne	r3, ip
 8000cce:	d06f      	beq.n	8000db0 <__aeabi_fmul+0xf8>
 8000cd0:	441a      	add	r2, r3
 8000cd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000cd6:	0240      	lsls	r0, r0, #9
 8000cd8:	bf18      	it	ne
 8000cda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cde:	d01e      	beq.n	8000d1e <__aeabi_fmul+0x66>
 8000ce0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000ce4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ce8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cec:	fba0 3101 	umull	r3, r1, r0, r1
 8000cf0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000cf4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000cf8:	bf3e      	ittt	cc
 8000cfa:	0049      	lslcc	r1, r1, #1
 8000cfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d00:	005b      	lslcc	r3, r3, #1
 8000d02:	ea40 0001 	orr.w	r0, r0, r1
 8000d06:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d0a:	2afd      	cmp	r2, #253	@ 0xfd
 8000d0c:	d81d      	bhi.n	8000d4a <__aeabi_fmul+0x92>
 8000d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d16:	bf08      	it	eq
 8000d18:	f020 0001 	biceq.w	r0, r0, #1
 8000d1c:	4770      	bx	lr
 8000d1e:	f090 0f00 	teq	r0, #0
 8000d22:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d26:	bf08      	it	eq
 8000d28:	0249      	lsleq	r1, r1, #9
 8000d2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d32:	3a7f      	subs	r2, #127	@ 0x7f
 8000d34:	bfc2      	ittt	gt
 8000d36:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d3e:	4770      	bxgt	lr
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	dc5d      	bgt.n	8000e08 <__aeabi_fmul+0x150>
 8000d4c:	f112 0f19 	cmn.w	r2, #25
 8000d50:	bfdc      	itt	le
 8000d52:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d56:	4770      	bxle	lr
 8000d58:	f1c2 0200 	rsb	r2, r2, #0
 8000d5c:	0041      	lsls	r1, r0, #1
 8000d5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d62:	f1c2 0220 	rsb	r2, r2, #32
 8000d66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d6e:	f140 0000 	adc.w	r0, r0, #0
 8000d72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d76:	bf08      	it	eq
 8000d78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7c:	4770      	bx	lr
 8000d7e:	f092 0f00 	teq	r2, #0
 8000d82:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d86:	bf02      	ittt	eq
 8000d88:	0040      	lsleq	r0, r0, #1
 8000d8a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d8e:	3a01      	subeq	r2, #1
 8000d90:	d0f9      	beq.n	8000d86 <__aeabi_fmul+0xce>
 8000d92:	ea40 000c 	orr.w	r0, r0, ip
 8000d96:	f093 0f00 	teq	r3, #0
 8000d9a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d9e:	bf02      	ittt	eq
 8000da0:	0049      	lsleq	r1, r1, #1
 8000da2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000da6:	3b01      	subeq	r3, #1
 8000da8:	d0f9      	beq.n	8000d9e <__aeabi_fmul+0xe6>
 8000daa:	ea41 010c 	orr.w	r1, r1, ip
 8000dae:	e78f      	b.n	8000cd0 <__aeabi_fmul+0x18>
 8000db0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000db4:	ea92 0f0c 	teq	r2, ip
 8000db8:	bf18      	it	ne
 8000dba:	ea93 0f0c 	teqne	r3, ip
 8000dbe:	d00a      	beq.n	8000dd6 <__aeabi_fmul+0x11e>
 8000dc0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000dc4:	bf18      	it	ne
 8000dc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000dca:	d1d8      	bne.n	8000d7e <__aeabi_fmul+0xc6>
 8000dcc:	ea80 0001 	eor.w	r0, r0, r1
 8000dd0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dd4:	4770      	bx	lr
 8000dd6:	f090 0f00 	teq	r0, #0
 8000dda:	bf17      	itett	ne
 8000ddc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000de0:	4608      	moveq	r0, r1
 8000de2:	f091 0f00 	teqne	r1, #0
 8000de6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dea:	d014      	beq.n	8000e16 <__aeabi_fmul+0x15e>
 8000dec:	ea92 0f0c 	teq	r2, ip
 8000df0:	d101      	bne.n	8000df6 <__aeabi_fmul+0x13e>
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	d10f      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000df6:	ea93 0f0c 	teq	r3, ip
 8000dfa:	d103      	bne.n	8000e04 <__aeabi_fmul+0x14c>
 8000dfc:	024b      	lsls	r3, r1, #9
 8000dfe:	bf18      	it	ne
 8000e00:	4608      	movne	r0, r1
 8000e02:	d108      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000e04:	ea80 0001 	eor.w	r0, r0, r1
 8000e08:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e0c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e10:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e14:	4770      	bx	lr
 8000e16:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e1a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e1e:	4770      	bx	lr

08000e20 <__aeabi_fdiv>:
 8000e20:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e28:	bf1e      	ittt	ne
 8000e2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2e:	ea92 0f0c 	teqne	r2, ip
 8000e32:	ea93 0f0c 	teqne	r3, ip
 8000e36:	d069      	beq.n	8000f0c <__aeabi_fdiv+0xec>
 8000e38:	eba2 0203 	sub.w	r2, r2, r3
 8000e3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e40:	0249      	lsls	r1, r1, #9
 8000e42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e46:	d037      	beq.n	8000eb8 <__aeabi_fdiv+0x98>
 8000e48:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e54:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	bf38      	it	cc
 8000e5c:	005b      	lslcc	r3, r3, #1
 8000e5e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e62:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e66:	428b      	cmp	r3, r1
 8000e68:	bf24      	itt	cs
 8000e6a:	1a5b      	subcs	r3, r3, r1
 8000e6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e74:	bf24      	itt	cs
 8000e76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e82:	bf24      	itt	cs
 8000e84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e9a:	011b      	lsls	r3, r3, #4
 8000e9c:	bf18      	it	ne
 8000e9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ea2:	d1e0      	bne.n	8000e66 <__aeabi_fdiv+0x46>
 8000ea4:	2afd      	cmp	r2, #253	@ 0xfd
 8000ea6:	f63f af50 	bhi.w	8000d4a <__aeabi_fmul+0x92>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eb0:	bf08      	it	eq
 8000eb2:	f020 0001 	biceq.w	r0, r0, #1
 8000eb6:	4770      	bx	lr
 8000eb8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ebc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ec0:	327f      	adds	r2, #127	@ 0x7f
 8000ec2:	bfc2      	ittt	gt
 8000ec4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ec8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ecc:	4770      	bxgt	lr
 8000ece:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ed2:	f04f 0300 	mov.w	r3, #0
 8000ed6:	3a01      	subs	r2, #1
 8000ed8:	e737      	b.n	8000d4a <__aeabi_fmul+0x92>
 8000eda:	f092 0f00 	teq	r2, #0
 8000ede:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0040      	lsleq	r0, r0, #1
 8000ee6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000eea:	3a01      	subeq	r2, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fdiv+0xc2>
 8000eee:	ea40 000c 	orr.w	r0, r0, ip
 8000ef2:	f093 0f00 	teq	r3, #0
 8000ef6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0049      	lsleq	r1, r1, #1
 8000efe:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f02:	3b01      	subeq	r3, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fdiv+0xda>
 8000f06:	ea41 010c 	orr.w	r1, r1, ip
 8000f0a:	e795      	b.n	8000e38 <__aeabi_fdiv+0x18>
 8000f0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f10:	ea92 0f0c 	teq	r2, ip
 8000f14:	d108      	bne.n	8000f28 <__aeabi_fdiv+0x108>
 8000f16:	0242      	lsls	r2, r0, #9
 8000f18:	f47f af7d 	bne.w	8000e16 <__aeabi_fmul+0x15e>
 8000f1c:	ea93 0f0c 	teq	r3, ip
 8000f20:	f47f af70 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f24:	4608      	mov	r0, r1
 8000f26:	e776      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f28:	ea93 0f0c 	teq	r3, ip
 8000f2c:	d104      	bne.n	8000f38 <__aeabi_fdiv+0x118>
 8000f2e:	024b      	lsls	r3, r1, #9
 8000f30:	f43f af4c 	beq.w	8000dcc <__aeabi_fmul+0x114>
 8000f34:	4608      	mov	r0, r1
 8000f36:	e76e      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f38:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f3c:	bf18      	it	ne
 8000f3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f42:	d1ca      	bne.n	8000eda <__aeabi_fdiv+0xba>
 8000f44:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f48:	f47f af5c 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f4c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f50:	f47f af3c 	bne.w	8000dcc <__aeabi_fmul+0x114>
 8000f54:	e75f      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f56:	bf00      	nop

08000f58 <__gesf2>:
 8000f58:	f04f 3cff 	mov.w	ip, #4294967295
 8000f5c:	e006      	b.n	8000f6c <__cmpsf2+0x4>
 8000f5e:	bf00      	nop

08000f60 <__lesf2>:
 8000f60:	f04f 0c01 	mov.w	ip, #1
 8000f64:	e002      	b.n	8000f6c <__cmpsf2+0x4>
 8000f66:	bf00      	nop

08000f68 <__cmpsf2>:
 8000f68:	f04f 0c01 	mov.w	ip, #1
 8000f6c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f70:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f7c:	bf18      	it	ne
 8000f7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f82:	d011      	beq.n	8000fa8 <__cmpsf2+0x40>
 8000f84:	b001      	add	sp, #4
 8000f86:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f8a:	bf18      	it	ne
 8000f8c:	ea90 0f01 	teqne	r0, r1
 8000f90:	bf58      	it	pl
 8000f92:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f96:	bf88      	it	hi
 8000f98:	17c8      	asrhi	r0, r1, #31
 8000f9a:	bf38      	it	cc
 8000f9c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fa0:	bf18      	it	ne
 8000fa2:	f040 0001 	orrne.w	r0, r0, #1
 8000fa6:	4770      	bx	lr
 8000fa8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fac:	d102      	bne.n	8000fb4 <__cmpsf2+0x4c>
 8000fae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fb2:	d105      	bne.n	8000fc0 <__cmpsf2+0x58>
 8000fb4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fb8:	d1e4      	bne.n	8000f84 <__cmpsf2+0x1c>
 8000fba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fbe:	d0e1      	beq.n	8000f84 <__cmpsf2+0x1c>
 8000fc0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <__aeabi_cfrcmple>:
 8000fc8:	4684      	mov	ip, r0
 8000fca:	4608      	mov	r0, r1
 8000fcc:	4661      	mov	r1, ip
 8000fce:	e7ff      	b.n	8000fd0 <__aeabi_cfcmpeq>

08000fd0 <__aeabi_cfcmpeq>:
 8000fd0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fd2:	f7ff ffc9 	bl	8000f68 <__cmpsf2>
 8000fd6:	2800      	cmp	r0, #0
 8000fd8:	bf48      	it	mi
 8000fda:	f110 0f00 	cmnmi.w	r0, #0
 8000fde:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fe0 <__aeabi_fcmpeq>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff fff4 	bl	8000fd0 <__aeabi_cfcmpeq>
 8000fe8:	bf0c      	ite	eq
 8000fea:	2001      	moveq	r0, #1
 8000fec:	2000      	movne	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmplt>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffea 	bl	8000fd0 <__aeabi_cfcmpeq>
 8000ffc:	bf34      	ite	cc
 8000ffe:	2001      	movcc	r0, #1
 8001000:	2000      	movcs	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmple>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffe0 	bl	8000fd0 <__aeabi_cfcmpeq>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpge>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffd2 	bl	8000fc8 <__aeabi_cfrcmple>
 8001024:	bf94      	ite	ls
 8001026:	2001      	movls	r0, #1
 8001028:	2000      	movhi	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_fcmpgt>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff ffc8 	bl	8000fc8 <__aeabi_cfrcmple>
 8001038:	bf34      	ite	cc
 800103a:	2001      	movcc	r0, #1
 800103c:	2000      	movcs	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_f2iz>:
 8001044:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001048:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800104c:	d30f      	bcc.n	800106e <__aeabi_f2iz+0x2a>
 800104e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001052:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001056:	d90d      	bls.n	8001074 <__aeabi_f2iz+0x30>
 8001058:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800105c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001060:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001064:	fa23 f002 	lsr.w	r0, r3, r2
 8001068:	bf18      	it	ne
 800106a:	4240      	negne	r0, r0
 800106c:	4770      	bx	lr
 800106e:	f04f 0000 	mov.w	r0, #0
 8001072:	4770      	bx	lr
 8001074:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001078:	d101      	bne.n	800107e <__aeabi_f2iz+0x3a>
 800107a:	0242      	lsls	r2, r0, #9
 800107c:	d105      	bne.n	800108a <__aeabi_f2iz+0x46>
 800107e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001082:	bf08      	it	eq
 8001084:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001088:	4770      	bx	lr
 800108a:	f04f 0000 	mov.w	r0, #0
 800108e:	4770      	bx	lr

08001090 <MPU9250_begin>:
	_gSense = 0.0f;   // Updated after gyro FSR is set
	return 0;
}

inv_error_t MPU9250_begin(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
	inv_error_t result;
	struct int_param_s int_param;

	//	Wire.begin();

	result = mpu_init(&int_param);
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	4618      	mov	r0, r3
 800109a:	f000 fae3 	bl	8001664 <mpu_init>
 800109e:	6078      	str	r0, [r7, #4]

	if (result)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MPU9250_begin+0x1a>
		return result;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	e011      	b.n	80010ce <MPU9250_begin+0x3e>

	mpu_set_bypass(1); // Place all slaves (including compass) on primary bus
 80010aa:	2001      	movs	r0, #1
 80010ac:	f001 f9a4 	bl	80023f8 <mpu_set_bypass>

	MPU9250_setSensors(INV_XYZ_GYRO | INV_XYZ_ACCEL | INV_XYZ_COMPASS);
 80010b0:	2079      	movs	r0, #121	@ 0x79
 80010b2:	f000 f86e 	bl	8001192 <MPU9250_setSensors>

	_gSense = MPU9250_getGyroSens();
 80010b6:	f000 f849 	bl	800114c <MPU9250_getGyroSens>
 80010ba:	4603      	mov	r3, r0
 80010bc:	4a06      	ldr	r2, [pc, #24]	@ (80010d8 <MPU9250_begin+0x48>)
 80010be:	6013      	str	r3, [r2, #0]
	_aSense = MPU9250_getAccelSens();
 80010c0:	f000 f856 	bl	8001170 <MPU9250_getAccelSens>
 80010c4:	4603      	mov	r3, r0
 80010c6:	461a      	mov	r2, r3
 80010c8:	4b04      	ldr	r3, [pc, #16]	@ (80010dc <MPU9250_begin+0x4c>)
 80010ca:	801a      	strh	r2, [r3, #0]

	return result;
 80010cc:	687b      	ldr	r3, [r7, #4]
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000064 	.word	0x20000064
 80010dc:	20000060 	.word	0x20000060

080010e0 <MPU9250_setGyroFSR>:
{
	return mpu_lp_accel_mode(rate);
}

inv_error_t MPU9250_setGyroFSR(unsigned short fsr)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	80fb      	strh	r3, [r7, #6]
	inv_error_t err;
	err = mpu_set_gyro_fsr(fsr);
 80010ea:	88fb      	ldrh	r3, [r7, #6]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f000 fe23 	bl	8001d38 <mpu_set_gyro_fsr>
 80010f2:	60f8      	str	r0, [r7, #12]
	if (err == INV_SUCCESS)
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d104      	bne.n	8001104 <MPU9250_setGyroFSR+0x24>
	{
		_gSense = MPU9250_getGyroSens();
 80010fa:	f000 f827 	bl	800114c <MPU9250_getGyroSens>
 80010fe:	4603      	mov	r3, r0
 8001100:	4a03      	ldr	r2, [pc, #12]	@ (8001110 <MPU9250_setGyroFSR+0x30>)
 8001102:	6013      	str	r3, [r2, #0]
	}
	return err;
 8001104:	68fb      	ldr	r3, [r7, #12]
}
 8001106:	4618      	mov	r0, r3
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000064 	.word	0x20000064

08001114 <MPU9250_setSampleRate>:
	}
	return 0;
}

inv_error_t MPU9250_setSampleRate(unsigned short rate)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	80fb      	strh	r3, [r7, #6]
	return mpu_set_sample_rate(rate);
 800111e:	88fb      	ldrh	r3, [r7, #6]
 8001120:	4618      	mov	r0, r3
 8001122:	f000 ff13 	bl	8001f4c <mpu_set_sample_rate>
 8001126:	4603      	mov	r3, r0
}
 8001128:	4618      	mov	r0, r3
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <MPU9250_setCompassSampleRate>:
	}
	return 0;
}

inv_error_t MPU9250_setCompassSampleRate(unsigned short rate)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	80fb      	strh	r3, [r7, #6]
	return mpu_set_compass_sample_rate(rate);
 800113a:	88fb      	ldrh	r3, [r7, #6]
 800113c:	4618      	mov	r0, r3
 800113e:	f000 ff75 	bl	800202c <mpu_set_compass_sample_rate>
 8001142:	4603      	mov	r3, r0
}
 8001144:	4618      	mov	r0, r3
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <MPU9250_getGyroSens>:

	return 0;
}

float MPU9250_getGyroSens(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
	float sens;
	if (mpu_get_gyro_sens(&sens) == INV_SUCCESS)
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	4618      	mov	r0, r3
 8001156:	f000 ffa9 	bl	80020ac <mpu_get_gyro_sens>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d101      	bne.n	8001164 <MPU9250_getGyroSens+0x18>
	{
		return sens;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	e001      	b.n	8001168 <MPU9250_getGyroSens+0x1c>
	}
	return 0;
 8001164:	f04f 0300 	mov.w	r3, #0
}
 8001168:	4618      	mov	r0, r3
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <MPU9250_getAccelSens>:

unsigned short MPU9250_getAccelSens(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
	unsigned short sens;
	if (mpu_get_accel_sens(&sens) == INV_SUCCESS)
 8001176:	1dbb      	adds	r3, r7, #6
 8001178:	4618      	mov	r0, r3
 800117a:	f000 ffcf 	bl	800211c <mpu_get_accel_sens>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d101      	bne.n	8001188 <MPU9250_getAccelSens+0x18>
	{
		return sens;
 8001184:	88fb      	ldrh	r3, [r7, #6]
 8001186:	e000      	b.n	800118a <MPU9250_getAccelSens+0x1a>
	}
	return 0;
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <MPU9250_setSensors>:

	return INV_SUCCESS;
}

inv_error_t MPU9250_setSensors(unsigned char sensors)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	af00      	add	r7, sp, #0
 8001198:	4603      	mov	r3, r0
 800119a:	71fb      	strb	r3, [r7, #7]
	return mpu_set_sensors(sensors);
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	4618      	mov	r0, r3
 80011a0:	f001 f84c 	bl	800223c <mpu_set_sensors>
 80011a4:	4603      	mov	r3, r0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <MPU9250_dataReady>:

bool MPU9250_dataReady()
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b082      	sub	sp, #8
 80011b2:	af00      	add	r7, sp, #0
	unsigned char intStatusReg;

	if (mpu_read_reg(MPU9250_INT_STATUS, &intStatusReg) == INV_SUCCESS)
 80011b4:	1dfb      	adds	r3, r7, #7
 80011b6:	4619      	mov	r1, r3
 80011b8:	203a      	movs	r0, #58	@ 0x3a
 80011ba:	f000 fa25 	bl	8001608 <mpu_read_reg>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d108      	bne.n	80011d6 <MPU9250_dataReady+0x28>
	{
		return (intStatusReg & (1 << INT_STATUS_RAW_DATA_RDY_INT));
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	bf14      	ite	ne
 80011ce:	2301      	movne	r3, #1
 80011d0:	2300      	moveq	r3, #0
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	e000      	b.n	80011d8 <MPU9250_dataReady+0x2a>
	}
	return false;
 80011d6:	2300      	movs	r3, #0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <MPU9250_update>:

inv_error_t MPU9250_update(unsigned char sensors)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
	inv_error_t aErr = INV_SUCCESS;
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
	inv_error_t gErr = INV_SUCCESS;
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
	inv_error_t mErr = INV_SUCCESS;
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
	inv_error_t tErr = INV_SUCCESS;
 80011f6:	2300      	movs	r3, #0
 80011f8:	60bb      	str	r3, [r7, #8]

	if (sensors & UPDATE_ACCEL)
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	f003 0302 	and.w	r3, r3, #2
 8001200:	2b00      	cmp	r3, #0
 8001202:	d002      	beq.n	800120a <MPU9250_update+0x2a>
		aErr = MPU9250_updateAccel();
 8001204:	f000 f824 	bl	8001250 <MPU9250_updateAccel>
 8001208:	6178      	str	r0, [r7, #20]
	if (sensors & UPDATE_GYRO)
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	f003 0304 	and.w	r3, r3, #4
 8001210:	2b00      	cmp	r3, #0
 8001212:	d002      	beq.n	800121a <MPU9250_update+0x3a>
		gErr = MPU9250_updateGyro();
 8001214:	f000 f846 	bl	80012a4 <MPU9250_updateGyro>
 8001218:	6138      	str	r0, [r7, #16]
	if (sensors & UPDATE_COMPASS)
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	f003 0308 	and.w	r3, r3, #8
 8001220:	2b00      	cmp	r3, #0
 8001222:	d002      	beq.n	800122a <MPU9250_update+0x4a>
		mErr = MPU9250_updateCompass();
 8001224:	f000 f868 	bl	80012f8 <MPU9250_updateCompass>
 8001228:	60f8      	str	r0, [r7, #12]
	if (sensors & UPDATE_TEMP)
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	f003 0310 	and.w	r3, r3, #16
 8001230:	2b00      	cmp	r3, #0
 8001232:	d002      	beq.n	800123a <MPU9250_update+0x5a>
		tErr = MPU9250_updateTemperature();
 8001234:	f000 f88a 	bl	800134c <MPU9250_updateTemperature>
 8001238:	60b8      	str	r0, [r7, #8]

	return aErr | gErr | mErr | tErr;
 800123a:	697a      	ldr	r2, [r7, #20]
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	431a      	orrs	r2, r3
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	431a      	orrs	r2, r3
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	4313      	orrs	r3, r2
}
 8001248:	4618      	mov	r0, r3
 800124a:	3718      	adds	r7, #24
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <MPU9250_updateAccel>:

int MPU9250_updateAccel(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
	short data[3];

	if (mpu_get_accel_reg(data, &time_inside))
 8001256:	463b      	mov	r3, r7
 8001258:	490e      	ldr	r1, [pc, #56]	@ (8001294 <MPU9250_updateAccel+0x44>)
 800125a:	4618      	mov	r0, r3
 800125c:	f000 fbb6 	bl	80019cc <mpu_get_accel_reg>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MPU9250_updateAccel+0x1a>
	{
		return INV_ERROR;
 8001266:	2320      	movs	r3, #32
 8001268:	e00f      	b.n	800128a <MPU9250_updateAccel+0x3a>
	}
	ax = data[X_AXIS];
 800126a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800126e:	461a      	mov	r2, r3
 8001270:	4b09      	ldr	r3, [pc, #36]	@ (8001298 <MPU9250_updateAccel+0x48>)
 8001272:	601a      	str	r2, [r3, #0]
	ay = data[Y_AXIS];
 8001274:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001278:	461a      	mov	r2, r3
 800127a:	4b08      	ldr	r3, [pc, #32]	@ (800129c <MPU9250_updateAccel+0x4c>)
 800127c:	601a      	str	r2, [r3, #0]
	az = data[Z_AXIS];
 800127e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001282:	461a      	mov	r2, r3
 8001284:	4b06      	ldr	r3, [pc, #24]	@ (80012a0 <MPU9250_updateAccel+0x50>)
 8001286:	601a      	str	r2, [r3, #0]
	return INV_SUCCESS;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000090 	.word	0x20000090
 8001298:	20000068 	.word	0x20000068
 800129c:	2000006c 	.word	0x2000006c
 80012a0:	20000070 	.word	0x20000070

080012a4 <MPU9250_updateGyro>:

int MPU9250_updateGyro(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
	short data[3];

	if (mpu_get_gyro_reg(data, &time_inside))
 80012aa:	463b      	mov	r3, r7
 80012ac:	490e      	ldr	r1, [pc, #56]	@ (80012e8 <MPU9250_updateGyro+0x44>)
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 fb40 	bl	8001934 <mpu_get_gyro_reg>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MPU9250_updateGyro+0x1a>
	{
		return INV_ERROR;
 80012ba:	2320      	movs	r3, #32
 80012bc:	e00f      	b.n	80012de <MPU9250_updateGyro+0x3a>
	}
	gx = data[X_AXIS];
 80012be:	f9b7 3000 	ldrsh.w	r3, [r7]
 80012c2:	461a      	mov	r2, r3
 80012c4:	4b09      	ldr	r3, [pc, #36]	@ (80012ec <MPU9250_updateGyro+0x48>)
 80012c6:	601a      	str	r2, [r3, #0]
	gy = data[Y_AXIS];
 80012c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80012cc:	461a      	mov	r2, r3
 80012ce:	4b08      	ldr	r3, [pc, #32]	@ (80012f0 <MPU9250_updateGyro+0x4c>)
 80012d0:	601a      	str	r2, [r3, #0]
	gz = data[Z_AXIS];
 80012d2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80012d6:	461a      	mov	r2, r3
 80012d8:	4b06      	ldr	r3, [pc, #24]	@ (80012f4 <MPU9250_updateGyro+0x50>)
 80012da:	601a      	str	r2, [r3, #0]
	return INV_SUCCESS;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000090 	.word	0x20000090
 80012ec:	20000074 	.word	0x20000074
 80012f0:	20000078 	.word	0x20000078
 80012f4:	2000007c 	.word	0x2000007c

080012f8 <MPU9250_updateCompass>:

int MPU9250_updateCompass(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
	short data[3];

	if (mpu_get_compass_reg(data, &time_inside))
 80012fe:	463b      	mov	r3, r7
 8001300:	490e      	ldr	r1, [pc, #56]	@ (800133c <MPU9250_updateCompass+0x44>)
 8001302:	4618      	mov	r0, r3
 8001304:	f001 fabc 	bl	8002880 <mpu_get_compass_reg>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MPU9250_updateCompass+0x1a>
	{
		return INV_ERROR;
 800130e:	2320      	movs	r3, #32
 8001310:	e00f      	b.n	8001332 <MPU9250_updateCompass+0x3a>
	}
	mx = data[X_AXIS];
 8001312:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001316:	461a      	mov	r2, r3
 8001318:	4b09      	ldr	r3, [pc, #36]	@ (8001340 <MPU9250_updateCompass+0x48>)
 800131a:	601a      	str	r2, [r3, #0]
	my = data[Y_AXIS];
 800131c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001320:	461a      	mov	r2, r3
 8001322:	4b08      	ldr	r3, [pc, #32]	@ (8001344 <MPU9250_updateCompass+0x4c>)
 8001324:	601a      	str	r2, [r3, #0]
	mz = data[Z_AXIS];
 8001326:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800132a:	461a      	mov	r2, r3
 800132c:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <MPU9250_updateCompass+0x50>)
 800132e:	601a      	str	r2, [r3, #0]
	return INV_SUCCESS;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000090 	.word	0x20000090
 8001340:	20000080 	.word	0x20000080
 8001344:	20000084 	.word	0x20000084
 8001348:	20000088 	.word	0x20000088

0800134c <MPU9250_updateTemperature>:

inv_error_t MPU9250_updateTemperature(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
	return mpu_get_temperature(&temperature, &time_inside);
 8001350:	4903      	ldr	r1, [pc, #12]	@ (8001360 <MPU9250_updateTemperature+0x14>)
 8001352:	4804      	ldr	r0, [pc, #16]	@ (8001364 <MPU9250_updateTemperature+0x18>)
 8001354:	f000 fb86 	bl	8001a64 <mpu_get_temperature>
 8001358:	4603      	mov	r3, r0
}
 800135a:	4618      	mov	r0, r3
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000090 	.word	0x20000090
 8001364:	2000008c 	.word	0x2000008c

08001368 <MPU9250_calcAccel>:
{
	return dmp_set_pedometer_walk_time(time_inside);
}

float MPU9250_calcAccel(int axis)
{
 8001368:	b590      	push	{r4, r7, lr}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	if (_aSense != 0)
 8001370:	4b0c      	ldr	r3, [pc, #48]	@ (80013a4 <MPU9250_calcAccel+0x3c>)
 8001372:	881b      	ldrh	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d00f      	beq.n	8001398 <MPU9250_calcAccel+0x30>
		return (float)axis / (float)_aSense;
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff fc49 	bl	8000c10 <__aeabi_i2f>
 800137e:	4604      	mov	r4, r0
 8001380:	4b08      	ldr	r3, [pc, #32]	@ (80013a4 <MPU9250_calcAccel+0x3c>)
 8001382:	881b      	ldrh	r3, [r3, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff fc3f 	bl	8000c08 <__aeabi_ui2f>
 800138a:	4603      	mov	r3, r0
 800138c:	4619      	mov	r1, r3
 800138e:	4620      	mov	r0, r4
 8001390:	f7ff fd46 	bl	8000e20 <__aeabi_fdiv>
 8001394:	4603      	mov	r3, r0
 8001396:	e001      	b.n	800139c <MPU9250_calcAccel+0x34>
	else
		return 0;
 8001398:	f04f 0300 	mov.w	r3, #0
}
 800139c:	4618      	mov	r0, r3
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd90      	pop	{r4, r7, pc}
 80013a4:	20000060 	.word	0x20000060

080013a8 <MPU9250_computeCompassHeading>:
		if (yaw_inside < 0) yaw_inside = 360.0 + yaw_inside;
	}
}

float MPU9250_computeCompassHeading(void)
{
 80013a8:	b5b0      	push	{r4, r5, r7, lr}
 80013aa:	af00      	add	r7, sp, #0
	if (my == 0)
 80013ac:	4b58      	ldr	r3, [pc, #352]	@ (8001510 <MPU9250_computeCompassHeading+0x168>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d10a      	bne.n	80013ca <MPU9250_computeCompassHeading+0x22>
		heading = (mx < 0) ? PI : 0;
 80013b4:	4b57      	ldr	r3, [pc, #348]	@ (8001514 <MPU9250_computeCompassHeading+0x16c>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	da01      	bge.n	80013c0 <MPU9250_computeCompassHeading+0x18>
 80013bc:	4b56      	ldr	r3, [pc, #344]	@ (8001518 <MPU9250_computeCompassHeading+0x170>)
 80013be:	e001      	b.n	80013c4 <MPU9250_computeCompassHeading+0x1c>
 80013c0:	f04f 0300 	mov.w	r3, #0
 80013c4:	4a55      	ldr	r2, [pc, #340]	@ (800151c <MPU9250_computeCompassHeading+0x174>)
 80013c6:	6013      	str	r3, [r2, #0]
 80013c8:	e01a      	b.n	8001400 <MPU9250_computeCompassHeading+0x58>
	else
		heading = atan2(mx, my);
 80013ca:	4b52      	ldr	r3, [pc, #328]	@ (8001514 <MPU9250_computeCompassHeading+0x16c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f810 	bl	80003f4 <__aeabi_i2d>
 80013d4:	4604      	mov	r4, r0
 80013d6:	460d      	mov	r5, r1
 80013d8:	4b4d      	ldr	r3, [pc, #308]	@ (8001510 <MPU9250_computeCompassHeading+0x168>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff f809 	bl	80003f4 <__aeabi_i2d>
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	4620      	mov	r0, r4
 80013e8:	4629      	mov	r1, r5
 80013ea:	f003 fe87 	bl	80050fc <atan2>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	4610      	mov	r0, r2
 80013f4:	4619      	mov	r1, r3
 80013f6:	f7ff fb01 	bl	80009fc <__aeabi_d2f>
 80013fa:	4603      	mov	r3, r0
 80013fc:	4a47      	ldr	r2, [pc, #284]	@ (800151c <MPU9250_computeCompassHeading+0x174>)
 80013fe:	6013      	str	r3, [r2, #0]

	if (heading > PI) heading -= (2 * PI);
 8001400:	4b46      	ldr	r3, [pc, #280]	@ (800151c <MPU9250_computeCompassHeading+0x174>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff f807 	bl	8000418 <__aeabi_f2d>
 800140a:	a339      	add	r3, pc, #228	@ (adr r3, 80014f0 <MPU9250_computeCompassHeading+0x148>)
 800140c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001410:	f7ff faea 	bl	80009e8 <__aeabi_dcmpgt>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d013      	beq.n	8001442 <MPU9250_computeCompassHeading+0x9a>
 800141a:	4b40      	ldr	r3, [pc, #256]	@ (800151c <MPU9250_computeCompassHeading+0x174>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4618      	mov	r0, r3
 8001420:	f7fe fffa 	bl	8000418 <__aeabi_f2d>
 8001424:	a334      	add	r3, pc, #208	@ (adr r3, 80014f8 <MPU9250_computeCompassHeading+0x150>)
 8001426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142a:	f7fe fe95 	bl	8000158 <__aeabi_dsub>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4610      	mov	r0, r2
 8001434:	4619      	mov	r1, r3
 8001436:	f7ff fae1 	bl	80009fc <__aeabi_d2f>
 800143a:	4603      	mov	r3, r0
 800143c:	4a37      	ldr	r2, [pc, #220]	@ (800151c <MPU9250_computeCompassHeading+0x174>)
 800143e:	6013      	str	r3, [r2, #0]
 8001440:	e03d      	b.n	80014be <MPU9250_computeCompassHeading+0x116>
	else if (heading < -PI) heading += (2 * PI);
 8001442:	4b36      	ldr	r3, [pc, #216]	@ (800151c <MPU9250_computeCompassHeading+0x174>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4618      	mov	r0, r3
 8001448:	f7fe ffe6 	bl	8000418 <__aeabi_f2d>
 800144c:	a32c      	add	r3, pc, #176	@ (adr r3, 8001500 <MPU9250_computeCompassHeading+0x158>)
 800144e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001452:	f7ff faab 	bl	80009ac <__aeabi_dcmplt>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d013      	beq.n	8001484 <MPU9250_computeCompassHeading+0xdc>
 800145c:	4b2f      	ldr	r3, [pc, #188]	@ (800151c <MPU9250_computeCompassHeading+0x174>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4618      	mov	r0, r3
 8001462:	f7fe ffd9 	bl	8000418 <__aeabi_f2d>
 8001466:	a324      	add	r3, pc, #144	@ (adr r3, 80014f8 <MPU9250_computeCompassHeading+0x150>)
 8001468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146c:	f7fe fe76 	bl	800015c <__adddf3>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4610      	mov	r0, r2
 8001476:	4619      	mov	r1, r3
 8001478:	f7ff fac0 	bl	80009fc <__aeabi_d2f>
 800147c:	4603      	mov	r3, r0
 800147e:	4a27      	ldr	r2, [pc, #156]	@ (800151c <MPU9250_computeCompassHeading+0x174>)
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	e01c      	b.n	80014be <MPU9250_computeCompassHeading+0x116>
	else if (heading < 0) heading += 2 * PI;
 8001484:	4b25      	ldr	r3, [pc, #148]	@ (800151c <MPU9250_computeCompassHeading+0x174>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f04f 0100 	mov.w	r1, #0
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fdb1 	bl	8000ff4 <__aeabi_fcmplt>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d012      	beq.n	80014be <MPU9250_computeCompassHeading+0x116>
 8001498:	4b20      	ldr	r3, [pc, #128]	@ (800151c <MPU9250_computeCompassHeading+0x174>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f7fe ffbb 	bl	8000418 <__aeabi_f2d>
 80014a2:	a315      	add	r3, pc, #84	@ (adr r3, 80014f8 <MPU9250_computeCompassHeading+0x150>)
 80014a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a8:	f7fe fe58 	bl	800015c <__adddf3>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4610      	mov	r0, r2
 80014b2:	4619      	mov	r1, r3
 80014b4:	f7ff faa2 	bl	80009fc <__aeabi_d2f>
 80014b8:	4603      	mov	r3, r0
 80014ba:	4a18      	ldr	r2, [pc, #96]	@ (800151c <MPU9250_computeCompassHeading+0x174>)
 80014bc:	6013      	str	r3, [r2, #0]

	heading *= 180.0 / PI;
 80014be:	4b17      	ldr	r3, [pc, #92]	@ (800151c <MPU9250_computeCompassHeading+0x174>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7fe ffa8 	bl	8000418 <__aeabi_f2d>
 80014c8:	a30f      	add	r3, pc, #60	@ (adr r3, 8001508 <MPU9250_computeCompassHeading+0x160>)
 80014ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ce:	f7fe fffb 	bl	80004c8 <__aeabi_dmul>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	4610      	mov	r0, r2
 80014d8:	4619      	mov	r1, r3
 80014da:	f7ff fa8f 	bl	80009fc <__aeabi_d2f>
 80014de:	4603      	mov	r3, r0
 80014e0:	4a0e      	ldr	r2, [pc, #56]	@ (800151c <MPU9250_computeCompassHeading+0x174>)
 80014e2:	6013      	str	r3, [r2, #0]

	return heading;
 80014e4:	4b0d      	ldr	r3, [pc, #52]	@ (800151c <MPU9250_computeCompassHeading+0x174>)
 80014e6:	681b      	ldr	r3, [r3, #0]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	bdb0      	pop	{r4, r5, r7, pc}
 80014ec:	f3af 8000 	nop.w
 80014f0:	53c8d4f1 	.word	0x53c8d4f1
 80014f4:	400921fb 	.word	0x400921fb
 80014f8:	53c8d4f1 	.word	0x53c8d4f1
 80014fc:	401921fb 	.word	0x401921fb
 8001500:	53c8d4f1 	.word	0x53c8d4f1
 8001504:	c00921fb 	.word	0xc00921fb
 8001508:	1af05a77 	.word	0x1af05a77
 800150c:	404ca5dc 	.word	0x404ca5dc
 8001510:	20000084 	.word	0x20000084
 8001514:	20000080 	.word	0x20000080
 8001518:	40490fdb 	.word	0x40490fdb
 800151c:	20000094 	.word	0x20000094

08001520 <reg_int_cb>:
#define i2c_write(a, b, c, d) stm32_i2c_write(a, b, c, d)
#define i2c_read(a, b, c, d)  stm32_i2c_read(a, b, c, d)
#define delay_ms  stm32_delay_ms
#define get_ms    stm32_get_clock_ms
static inline int reg_int_cb(struct int_param_s *int_param)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
    return 0;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr

08001534 <min>:
static int setup_compass(void);
#define MAX_COMPASS_SAMPLE_RATE (100)
#endif

int min(int x, int y)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
    return x > y ? y : x;
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	4293      	cmp	r3, r2
 8001544:	bfa8      	it	ge
 8001546:	4613      	movge	r3, r2
}
 8001548:	4618      	mov	r0, r3
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	bc80      	pop	{r7}
 8001550:	4770      	bx	lr
	...

08001554 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
int set_int_enable(unsigned char enable)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
 800155e:	4b29      	ldr	r3, [pc, #164]	@ (8001604 <set_int_enable+0xb0>)
 8001560:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001564:	2b00      	cmp	r3, #0
 8001566:	d01c      	beq.n	80015a2 <set_int_enable+0x4e>
        if (enable)
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d002      	beq.n	8001574 <set_int_enable+0x20>
            tmp = BIT_DMP_INT_EN;
 800156e:	2302      	movs	r3, #2
 8001570:	73fb      	strb	r3, [r7, #15]
 8001572:	e001      	b.n	8001578 <set_int_enable+0x24>
        else
            tmp = 0x00;
 8001574:	2300      	movs	r3, #0
 8001576:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8001578:	4b22      	ldr	r3, [pc, #136]	@ (8001604 <set_int_enable+0xb0>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	7818      	ldrb	r0, [r3, #0]
 800157e:	4b21      	ldr	r3, [pc, #132]	@ (8001604 <set_int_enable+0xb0>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	7c59      	ldrb	r1, [r3, #17]
 8001584:	f107 030f 	add.w	r3, r7, #15
 8001588:	2201      	movs	r2, #1
 800158a:	f001 fbbd 	bl	8002d08 <stm32_i2c_write>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d002      	beq.n	800159a <set_int_enable+0x46>
            return -1;
 8001594:	f04f 33ff 	mov.w	r3, #4294967295
 8001598:	e030      	b.n	80015fc <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
 800159a:	7bfa      	ldrb	r2, [r7, #15]
 800159c:	4b19      	ldr	r3, [pc, #100]	@ (8001604 <set_int_enable+0xb0>)
 800159e:	745a      	strb	r2, [r3, #17]
 80015a0:	e02b      	b.n	80015fa <set_int_enable+0xa6>
    } else {
        if (!st.chip_cfg.sensors)
 80015a2:	4b18      	ldr	r3, [pc, #96]	@ (8001604 <set_int_enable+0xb0>)
 80015a4:	7a9b      	ldrb	r3, [r3, #10]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d102      	bne.n	80015b0 <set_int_enable+0x5c>
            return -1;
 80015aa:	f04f 33ff 	mov.w	r3, #4294967295
 80015ae:	e025      	b.n	80015fc <set_int_enable+0xa8>
        if (enable && st.chip_cfg.int_enable)
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d005      	beq.n	80015c2 <set_int_enable+0x6e>
 80015b6:	4b13      	ldr	r3, [pc, #76]	@ (8001604 <set_int_enable+0xb0>)
 80015b8:	7c5b      	ldrb	r3, [r3, #17]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <set_int_enable+0x6e>
            return 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	e01c      	b.n	80015fc <set_int_enable+0xa8>
        if (enable)
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d002      	beq.n	80015ce <set_int_enable+0x7a>
            tmp = BIT_DATA_RDY_EN;
 80015c8:	2301      	movs	r3, #1
 80015ca:	73fb      	strb	r3, [r7, #15]
 80015cc:	e001      	b.n	80015d2 <set_int_enable+0x7e>
        else
            tmp = 0x00;
 80015ce:	2300      	movs	r3, #0
 80015d0:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 80015d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001604 <set_int_enable+0xb0>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	7818      	ldrb	r0, [r3, #0]
 80015d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001604 <set_int_enable+0xb0>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	7c59      	ldrb	r1, [r3, #17]
 80015de:	f107 030f 	add.w	r3, r7, #15
 80015e2:	2201      	movs	r2, #1
 80015e4:	f001 fb90 	bl	8002d08 <stm32_i2c_write>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d002      	beq.n	80015f4 <set_int_enable+0xa0>
            return -1;
 80015ee:	f04f 33ff 	mov.w	r3, #4294967295
 80015f2:	e003      	b.n	80015fc <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
 80015f4:	7bfa      	ldrb	r2, [r7, #15]
 80015f6:	4b03      	ldr	r3, [pc, #12]	@ (8001604 <set_int_enable+0xb0>)
 80015f8:	745a      	strb	r2, [r3, #17]
    }
    return 0;
 80015fa:	2300      	movs	r3, #0
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20000000 	.word	0x20000000

08001608 <mpu_read_reg>:
 *  @param[in]  reg     Register address.
 *  @param[out] data    Register data.
 *  @return     0 if successful.
 */
int mpu_read_reg(unsigned char reg, unsigned char *data)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	6039      	str	r1, [r7, #0]
 8001612:	71fb      	strb	r3, [r7, #7]
    if (reg == st.reg->fifo_r_w || reg == st.reg->mem_r_w)
 8001614:	4b12      	ldr	r3, [pc, #72]	@ (8001660 <mpu_read_reg+0x58>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	7b5b      	ldrb	r3, [r3, #13]
 800161a:	79fa      	ldrb	r2, [r7, #7]
 800161c:	429a      	cmp	r2, r3
 800161e:	d005      	beq.n	800162c <mpu_read_reg+0x24>
 8001620:	4b0f      	ldr	r3, [pc, #60]	@ (8001660 <mpu_read_reg+0x58>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	7e1b      	ldrb	r3, [r3, #24]
 8001626:	79fa      	ldrb	r2, [r7, #7]
 8001628:	429a      	cmp	r2, r3
 800162a:	d102      	bne.n	8001632 <mpu_read_reg+0x2a>
        return -1;
 800162c:	f04f 33ff 	mov.w	r3, #4294967295
 8001630:	e011      	b.n	8001656 <mpu_read_reg+0x4e>
    if (reg >= st.hw->num_reg)
 8001632:	4b0b      	ldr	r3, [pc, #44]	@ (8001660 <mpu_read_reg+0x58>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	791b      	ldrb	r3, [r3, #4]
 8001638:	79fa      	ldrb	r2, [r7, #7]
 800163a:	429a      	cmp	r2, r3
 800163c:	d302      	bcc.n	8001644 <mpu_read_reg+0x3c>
        return -1;
 800163e:	f04f 33ff 	mov.w	r3, #4294967295
 8001642:	e008      	b.n	8001656 <mpu_read_reg+0x4e>
    return i2c_read(st.hw->addr, reg, 1, data);
 8001644:	4b06      	ldr	r3, [pc, #24]	@ (8001660 <mpu_read_reg+0x58>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	7818      	ldrb	r0, [r3, #0]
 800164a:	79f9      	ldrb	r1, [r7, #7]
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	2201      	movs	r2, #1
 8001650:	f001 fbc4 	bl	8002ddc <stm32_i2c_read>
 8001654:	4603      	mov	r3, r0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000000 	.word	0x20000000

08001664 <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
 800166c:	2380      	movs	r3, #128	@ 0x80
 800166e:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8001670:	4b5f      	ldr	r3, [pc, #380]	@ (80017f0 <mpu_init+0x18c>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	7818      	ldrb	r0, [r3, #0]
 8001676:	4b5e      	ldr	r3, [pc, #376]	@ (80017f0 <mpu_init+0x18c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	7d59      	ldrb	r1, [r3, #21]
 800167c:	f107 0308 	add.w	r3, r7, #8
 8001680:	2201      	movs	r2, #1
 8001682:	f001 fb41 	bl	8002d08 <stm32_i2c_write>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d002      	beq.n	8001692 <mpu_init+0x2e>
        return -1;
 800168c:	f04f 33ff 	mov.w	r3, #4294967295
 8001690:	e0a9      	b.n	80017e6 <mpu_init+0x182>
    delay_ms(100);
 8001692:	2064      	movs	r0, #100	@ 0x64
 8001694:	f001 fa4c 	bl	8002b30 <stm32_delay_ms>

    /* Wake up chip. */
    data[0] = 0x00;
 8001698:	2300      	movs	r3, #0
 800169a:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 800169c:	4b54      	ldr	r3, [pc, #336]	@ (80017f0 <mpu_init+0x18c>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	7818      	ldrb	r0, [r3, #0]
 80016a2:	4b53      	ldr	r3, [pc, #332]	@ (80017f0 <mpu_init+0x18c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	7d59      	ldrb	r1, [r3, #21]
 80016a8:	f107 0308 	add.w	r3, r7, #8
 80016ac:	2201      	movs	r2, #1
 80016ae:	f001 fb2b 	bl	8002d08 <stm32_i2c_write>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d002      	beq.n	80016be <mpu_init+0x5a>
        return -1;
 80016b8:	f04f 33ff 	mov.w	r3, #4294967295
 80016bc:	e093      	b.n	80017e6 <mpu_init+0x182>

   st.chip_cfg.accel_half = 0;
 80016be:	4b4c      	ldr	r3, [pc, #304]	@ (80017f0 <mpu_init+0x18c>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	74da      	strb	r2, [r3, #19]

#ifdef MPU6500
    /* MPU6500 shares 4kB of memory between the DMP and the FIFO. Since the
     * first 3kB are needed by the DMP, we'll use the last 1kB for the FIFO.
     */
    data[0] = BIT_FIFO_SIZE_1024 | 0x8;
 80016c4:	2348      	movs	r3, #72	@ 0x48
 80016c6:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
 80016c8:	4b49      	ldr	r3, [pc, #292]	@ (80017f0 <mpu_init+0x18c>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	7818      	ldrb	r0, [r3, #0]
 80016ce:	4b48      	ldr	r3, [pc, #288]	@ (80017f0 <mpu_init+0x18c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	7a19      	ldrb	r1, [r3, #8]
 80016d4:	f107 0308 	add.w	r3, r7, #8
 80016d8:	2201      	movs	r2, #1
 80016da:	f001 fb15 	bl	8002d08 <stm32_i2c_write>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d002      	beq.n	80016ea <mpu_init+0x86>
        return -1;
 80016e4:	f04f 33ff 	mov.w	r3, #4294967295
 80016e8:	e07d      	b.n	80017e6 <mpu_init+0x182>
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
 80016ea:	4b41      	ldr	r3, [pc, #260]	@ (80017f0 <mpu_init+0x18c>)
 80016ec:	22ff      	movs	r2, #255	@ 0xff
 80016ee:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
 80016f0:	4b3f      	ldr	r3, [pc, #252]	@ (80017f0 <mpu_init+0x18c>)
 80016f2:	22ff      	movs	r2, #255	@ 0xff
 80016f4:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 80016f6:	4b3e      	ldr	r3, [pc, #248]	@ (80017f0 <mpu_init+0x18c>)
 80016f8:	22ff      	movs	r2, #255	@ 0xff
 80016fa:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 80016fc:	4b3c      	ldr	r3, [pc, #240]	@ (80017f0 <mpu_init+0x18c>)
 80016fe:	22ff      	movs	r2, #255	@ 0xff
 8001700:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 8001702:	4b3b      	ldr	r3, [pc, #236]	@ (80017f0 <mpu_init+0x18c>)
 8001704:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001708:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.fifo_enable = 0xFF;
 800170a:	4b39      	ldr	r3, [pc, #228]	@ (80017f0 <mpu_init+0x18c>)
 800170c:	22ff      	movs	r2, #255	@ 0xff
 800170e:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.bypass_mode = 0xFF;
 8001710:	4b37      	ldr	r3, [pc, #220]	@ (80017f0 <mpu_init+0x18c>)
 8001712:	22ff      	movs	r2, #255	@ 0xff
 8001714:	749a      	strb	r2, [r3, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
 8001716:	4b36      	ldr	r3, [pc, #216]	@ (80017f0 <mpu_init+0x18c>)
 8001718:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800171c:	851a      	strh	r2, [r3, #40]	@ 0x28
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
 800171e:	4b34      	ldr	r3, [pc, #208]	@ (80017f0 <mpu_init+0x18c>)
 8001720:	2201      	movs	r2, #1
 8001722:	731a      	strb	r2, [r3, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 1;
 8001724:	4b32      	ldr	r3, [pc, #200]	@ (80017f0 <mpu_init+0x18c>)
 8001726:	2201      	movs	r2, #1
 8001728:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    st.chip_cfg.latched_int = 0;
 800172c:	4b30      	ldr	r3, [pc, #192]	@ (80017f0 <mpu_init+0x18c>)
 800172e:	2200      	movs	r2, #0
 8001730:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    st.chip_cfg.int_motion_only = 0;
 8001734:	4b2e      	ldr	r3, [pc, #184]	@ (80017f0 <mpu_init+0x18c>)
 8001736:	2200      	movs	r2, #0
 8001738:	755a      	strb	r2, [r3, #21]
    st.chip_cfg.lp_accel_mode = 0;
 800173a:	4b2d      	ldr	r3, [pc, #180]	@ (80017f0 <mpu_init+0x18c>)
 800173c:	2200      	movs	r2, #0
 800173e:	751a      	strb	r2, [r3, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 8001740:	220c      	movs	r2, #12
 8001742:	2100      	movs	r1, #0
 8001744:	482b      	ldr	r0, [pc, #172]	@ (80017f4 <mpu_init+0x190>)
 8001746:	f003 fcad 	bl	80050a4 <memset>
    st.chip_cfg.dmp_on = 0;
 800174a:	4b29      	ldr	r3, [pc, #164]	@ (80017f0 <mpu_init+0x18c>)
 800174c:	2200      	movs	r2, #0
 800174e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    st.chip_cfg.dmp_loaded = 0;
 8001752:	4b27      	ldr	r3, [pc, #156]	@ (80017f0 <mpu_init+0x18c>)
 8001754:	2200      	movs	r2, #0
 8001756:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    st.chip_cfg.dmp_sample_rate = 0;
 800175a:	4b25      	ldr	r3, [pc, #148]	@ (80017f0 <mpu_init+0x18c>)
 800175c:	2200      	movs	r2, #0
 800175e:	84da      	strh	r2, [r3, #38]	@ 0x26

    if (mpu_set_gyro_fsr(2000))
 8001760:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001764:	f000 fae8 	bl	8001d38 <mpu_set_gyro_fsr>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d002      	beq.n	8001774 <mpu_init+0x110>
        return -1;
 800176e:	f04f 33ff 	mov.w	r3, #4294967295
 8001772:	e038      	b.n	80017e6 <mpu_init+0x182>
    if (mpu_set_accel_fsr(2))
 8001774:	2002      	movs	r0, #2
 8001776:	f000 fb33 	bl	8001de0 <mpu_set_accel_fsr>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d002      	beq.n	8001786 <mpu_init+0x122>
        return -1;
 8001780:	f04f 33ff 	mov.w	r3, #4294967295
 8001784:	e02f      	b.n	80017e6 <mpu_init+0x182>
    if (mpu_set_lpf(42))
 8001786:	202a      	movs	r0, #42	@ 0x2a
 8001788:	f000 fb92 	bl	8001eb0 <mpu_set_lpf>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d002      	beq.n	8001798 <mpu_init+0x134>
        return -1;
 8001792:	f04f 33ff 	mov.w	r3, #4294967295
 8001796:	e026      	b.n	80017e6 <mpu_init+0x182>
    if (mpu_set_sample_rate(50))
 8001798:	2032      	movs	r0, #50	@ 0x32
 800179a:	f000 fbd7 	bl	8001f4c <mpu_set_sample_rate>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d002      	beq.n	80017aa <mpu_init+0x146>
        return -1;
 80017a4:	f04f 33ff 	mov.w	r3, #4294967295
 80017a8:	e01d      	b.n	80017e6 <mpu_init+0x182>
    if (mpu_configure_fifo(0))
 80017aa:	2000      	movs	r0, #0
 80017ac:	f000 fcf4 	bl	8002198 <mpu_configure_fifo>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d002      	beq.n	80017bc <mpu_init+0x158>
        return -1;
 80017b6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ba:	e014      	b.n	80017e6 <mpu_init+0x182>

#ifndef EMPL_TARGET_STM32F4    
    if (int_param)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d002      	beq.n	80017c8 <mpu_init+0x164>
        reg_int_cb(int_param);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff feac 	bl	8001520 <reg_int_cb>
#endif

#ifdef AK89xx_SECONDARY
    setup_compass();
 80017c8:	f000 ff20 	bl	800260c <setup_compass>
    if (mpu_set_compass_sample_rate(10))
 80017cc:	200a      	movs	r0, #10
 80017ce:	f000 fc2d 	bl	800202c <mpu_set_compass_sample_rate>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d002      	beq.n	80017de <mpu_init+0x17a>
        return -1;
 80017d8:	f04f 33ff 	mov.w	r3, #4294967295
 80017dc:	e003      	b.n	80017e6 <mpu_init+0x182>
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
        return -1;
#endif

    mpu_set_sensors(0);
 80017de:	2000      	movs	r0, #0
 80017e0:	f000 fd2c 	bl	800223c <mpu_set_sensors>
    return 0;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000000 	.word	0x20000000
 80017f4:	20000016 	.word	0x20000016

080017f8 <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned short rate)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    if (rate > 40)
 8001802:	88fb      	ldrh	r3, [r7, #6]
 8001804:	2b28      	cmp	r3, #40	@ 0x28
 8001806:	d902      	bls.n	800180e <mpu_lp_accel_mode+0x16>
        return -1;
 8001808:	f04f 33ff 	mov.w	r3, #4294967295
 800180c:	e08c      	b.n	8001928 <mpu_lp_accel_mode+0x130>

    if (!rate) {
 800180e:	88fb      	ldrh	r3, [r7, #6]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d11c      	bne.n	800184e <mpu_lp_accel_mode+0x56>
        mpu_set_int_latched(0);
 8001814:	2000      	movs	r0, #0
 8001816:	f000 feb5 	bl	8002584 <mpu_set_int_latched>
        tmp[0] = 0;
 800181a:	2300      	movs	r3, #0
 800181c:	733b      	strb	r3, [r7, #12]
        tmp[1] = BIT_STBY_XYZG;
 800181e:	2307      	movs	r3, #7
 8001820:	737b      	strb	r3, [r7, #13]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 8001822:	4b43      	ldr	r3, [pc, #268]	@ (8001930 <mpu_lp_accel_mode+0x138>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	7818      	ldrb	r0, [r3, #0]
 8001828:	4b41      	ldr	r3, [pc, #260]	@ (8001930 <mpu_lp_accel_mode+0x138>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	7d59      	ldrb	r1, [r3, #21]
 800182e:	f107 030c 	add.w	r3, r7, #12
 8001832:	2202      	movs	r2, #2
 8001834:	f001 fa68 	bl	8002d08 <stm32_i2c_write>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d002      	beq.n	8001844 <mpu_lp_accel_mode+0x4c>
            return -1;
 800183e:	f04f 33ff 	mov.w	r3, #4294967295
 8001842:	e071      	b.n	8001928 <mpu_lp_accel_mode+0x130>
        st.chip_cfg.lp_accel_mode = 0;
 8001844:	4b3a      	ldr	r3, [pc, #232]	@ (8001930 <mpu_lp_accel_mode+0x138>)
 8001846:	2200      	movs	r2, #0
 8001848:	751a      	strb	r2, [r3, #20]
        return 0;
 800184a:	2300      	movs	r3, #0
 800184c:	e06c      	b.n	8001928 <mpu_lp_accel_mode+0x130>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
 800184e:	2001      	movs	r0, #1
 8001850:	f000 fe98 	bl	8002584 <mpu_set_int_latched>
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
        return -1;
#elif defined MPU6500
    /* Set wake frequency. */
    if (rate == 1)
 8001854:	88fb      	ldrh	r3, [r7, #6]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d102      	bne.n	8001860 <mpu_lp_accel_mode+0x68>
        tmp[0] = INV_LPA_1_25HZ;
 800185a:	2302      	movs	r3, #2
 800185c:	733b      	strb	r3, [r7, #12]
 800185e:	e032      	b.n	80018c6 <mpu_lp_accel_mode+0xce>
    else if (rate == 2)
 8001860:	88fb      	ldrh	r3, [r7, #6]
 8001862:	2b02      	cmp	r3, #2
 8001864:	d102      	bne.n	800186c <mpu_lp_accel_mode+0x74>
        tmp[0] = INV_LPA_2_5HZ;
 8001866:	2303      	movs	r3, #3
 8001868:	733b      	strb	r3, [r7, #12]
 800186a:	e02c      	b.n	80018c6 <mpu_lp_accel_mode+0xce>
    else if (rate <= 5)
 800186c:	88fb      	ldrh	r3, [r7, #6]
 800186e:	2b05      	cmp	r3, #5
 8001870:	d802      	bhi.n	8001878 <mpu_lp_accel_mode+0x80>
        tmp[0] = INV_LPA_5HZ;
 8001872:	2304      	movs	r3, #4
 8001874:	733b      	strb	r3, [r7, #12]
 8001876:	e026      	b.n	80018c6 <mpu_lp_accel_mode+0xce>
    else if (rate <= 10)
 8001878:	88fb      	ldrh	r3, [r7, #6]
 800187a:	2b0a      	cmp	r3, #10
 800187c:	d802      	bhi.n	8001884 <mpu_lp_accel_mode+0x8c>
        tmp[0] = INV_LPA_10HZ;
 800187e:	2305      	movs	r3, #5
 8001880:	733b      	strb	r3, [r7, #12]
 8001882:	e020      	b.n	80018c6 <mpu_lp_accel_mode+0xce>
    else if (rate <= 20)
 8001884:	88fb      	ldrh	r3, [r7, #6]
 8001886:	2b14      	cmp	r3, #20
 8001888:	d802      	bhi.n	8001890 <mpu_lp_accel_mode+0x98>
        tmp[0] = INV_LPA_20HZ;
 800188a:	2306      	movs	r3, #6
 800188c:	733b      	strb	r3, [r7, #12]
 800188e:	e01a      	b.n	80018c6 <mpu_lp_accel_mode+0xce>
    else if (rate <= 40)
 8001890:	88fb      	ldrh	r3, [r7, #6]
 8001892:	2b28      	cmp	r3, #40	@ 0x28
 8001894:	d802      	bhi.n	800189c <mpu_lp_accel_mode+0xa4>
        tmp[0] = INV_LPA_40HZ;
 8001896:	2307      	movs	r3, #7
 8001898:	733b      	strb	r3, [r7, #12]
 800189a:	e014      	b.n	80018c6 <mpu_lp_accel_mode+0xce>
    else if (rate <= 80)
 800189c:	88fb      	ldrh	r3, [r7, #6]
 800189e:	2b50      	cmp	r3, #80	@ 0x50
 80018a0:	d802      	bhi.n	80018a8 <mpu_lp_accel_mode+0xb0>
        tmp[0] = INV_LPA_80HZ;
 80018a2:	2308      	movs	r3, #8
 80018a4:	733b      	strb	r3, [r7, #12]
 80018a6:	e00e      	b.n	80018c6 <mpu_lp_accel_mode+0xce>
    else if (rate <= 160)
 80018a8:	88fb      	ldrh	r3, [r7, #6]
 80018aa:	2ba0      	cmp	r3, #160	@ 0xa0
 80018ac:	d802      	bhi.n	80018b4 <mpu_lp_accel_mode+0xbc>
        tmp[0] = INV_LPA_160HZ;
 80018ae:	2309      	movs	r3, #9
 80018b0:	733b      	strb	r3, [r7, #12]
 80018b2:	e008      	b.n	80018c6 <mpu_lp_accel_mode+0xce>
    else if (rate <= 320)
 80018b4:	88fb      	ldrh	r3, [r7, #6]
 80018b6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80018ba:	d802      	bhi.n	80018c2 <mpu_lp_accel_mode+0xca>
        tmp[0] = INV_LPA_320HZ;
 80018bc:	230a      	movs	r3, #10
 80018be:	733b      	strb	r3, [r7, #12]
 80018c0:	e001      	b.n	80018c6 <mpu_lp_accel_mode+0xce>
    else
        tmp[0] = INV_LPA_640HZ;
 80018c2:	230b      	movs	r3, #11
 80018c4:	733b      	strb	r3, [r7, #12]
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
 80018c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001930 <mpu_lp_accel_mode+0x138>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	7818      	ldrb	r0, [r3, #0]
 80018cc:	4b18      	ldr	r3, [pc, #96]	@ (8001930 <mpu_lp_accel_mode+0x138>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	7a59      	ldrb	r1, [r3, #9]
 80018d2:	f107 030c 	add.w	r3, r7, #12
 80018d6:	2201      	movs	r2, #1
 80018d8:	f001 fa16 	bl	8002d08 <stm32_i2c_write>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d002      	beq.n	80018e8 <mpu_lp_accel_mode+0xf0>
        return -1;
 80018e2:	f04f 33ff 	mov.w	r3, #4294967295
 80018e6:	e01f      	b.n	8001928 <mpu_lp_accel_mode+0x130>
    tmp[0] = BIT_LPA_CYCLE;
 80018e8:	2320      	movs	r3, #32
 80018ea:	733b      	strb	r3, [r7, #12]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
 80018ec:	4b10      	ldr	r3, [pc, #64]	@ (8001930 <mpu_lp_accel_mode+0x138>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	7818      	ldrb	r0, [r3, #0]
 80018f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001930 <mpu_lp_accel_mode+0x138>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	7d59      	ldrb	r1, [r3, #21]
 80018f8:	f107 030c 	add.w	r3, r7, #12
 80018fc:	2201      	movs	r2, #1
 80018fe:	f001 fa03 	bl	8002d08 <stm32_i2c_write>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d002      	beq.n	800190e <mpu_lp_accel_mode+0x116>
        return -1;
 8001908:	f04f 33ff 	mov.w	r3, #4294967295
 800190c:	e00c      	b.n	8001928 <mpu_lp_accel_mode+0x130>
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 800190e:	4b08      	ldr	r3, [pc, #32]	@ (8001930 <mpu_lp_accel_mode+0x138>)
 8001910:	2208      	movs	r2, #8
 8001912:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
 8001914:	4b06      	ldr	r3, [pc, #24]	@ (8001930 <mpu_lp_accel_mode+0x138>)
 8001916:	2200      	movs	r2, #0
 8001918:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
 800191a:	4b05      	ldr	r3, [pc, #20]	@ (8001930 <mpu_lp_accel_mode+0x138>)
 800191c:	2201      	movs	r2, #1
 800191e:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
 8001920:	2000      	movs	r0, #0
 8001922:	f000 fc39 	bl	8002198 <mpu_configure_fifo>

    return 0;
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20000000 	.word	0x20000000

08001934 <mpu_get_gyro_reg>:
 *  @param[out] data        Raw data in hardware units.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_gyro_reg(short *data, unsigned long *timestamp)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
    unsigned char tmp[6];

    if (!(st.chip_cfg.sensors & INV_XYZ_GYRO))
 800193e:	4b22      	ldr	r3, [pc, #136]	@ (80019c8 <mpu_get_gyro_reg+0x94>)
 8001940:	7a9b      	ldrb	r3, [r3, #10]
 8001942:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001946:	2b00      	cmp	r3, #0
 8001948:	d102      	bne.n	8001950 <mpu_get_gyro_reg+0x1c>
        return -1;
 800194a:	f04f 33ff 	mov.w	r3, #4294967295
 800194e:	e037      	b.n	80019c0 <mpu_get_gyro_reg+0x8c>

    if (i2c_read(st.hw->addr, st.reg->raw_gyro, 6, tmp))
 8001950:	4b1d      	ldr	r3, [pc, #116]	@ (80019c8 <mpu_get_gyro_reg+0x94>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	7818      	ldrb	r0, [r3, #0]
 8001956:	4b1c      	ldr	r3, [pc, #112]	@ (80019c8 <mpu_get_gyro_reg+0x94>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	7b99      	ldrb	r1, [r3, #14]
 800195c:	f107 0308 	add.w	r3, r7, #8
 8001960:	2206      	movs	r2, #6
 8001962:	f001 fa3b 	bl	8002ddc <stm32_i2c_read>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d002      	beq.n	8001972 <mpu_get_gyro_reg+0x3e>
        return -1;
 800196c:	f04f 33ff 	mov.w	r3, #4294967295
 8001970:	e026      	b.n	80019c0 <mpu_get_gyro_reg+0x8c>
    data[0] = (tmp[0] << 8) | tmp[1];
 8001972:	7a3b      	ldrb	r3, [r7, #8]
 8001974:	b21b      	sxth	r3, r3
 8001976:	021b      	lsls	r3, r3, #8
 8001978:	b21a      	sxth	r2, r3
 800197a:	7a7b      	ldrb	r3, [r7, #9]
 800197c:	b21b      	sxth	r3, r3
 800197e:	4313      	orrs	r3, r2
 8001980:	b21a      	sxth	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	801a      	strh	r2, [r3, #0]
    data[1] = (tmp[2] << 8) | tmp[3];
 8001986:	7abb      	ldrb	r3, [r7, #10]
 8001988:	b21b      	sxth	r3, r3
 800198a:	021b      	lsls	r3, r3, #8
 800198c:	b219      	sxth	r1, r3
 800198e:	7afb      	ldrb	r3, [r7, #11]
 8001990:	b21a      	sxth	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	3302      	adds	r3, #2
 8001996:	430a      	orrs	r2, r1
 8001998:	b212      	sxth	r2, r2
 800199a:	801a      	strh	r2, [r3, #0]
    data[2] = (tmp[4] << 8) | tmp[5];
 800199c:	7b3b      	ldrb	r3, [r7, #12]
 800199e:	b21b      	sxth	r3, r3
 80019a0:	021b      	lsls	r3, r3, #8
 80019a2:	b219      	sxth	r1, r3
 80019a4:	7b7b      	ldrb	r3, [r7, #13]
 80019a6:	b21a      	sxth	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3304      	adds	r3, #4
 80019ac:	430a      	orrs	r2, r1
 80019ae:	b212      	sxth	r2, r2
 80019b0:	801a      	strh	r2, [r3, #0]
    if (timestamp)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d002      	beq.n	80019be <mpu_get_gyro_reg+0x8a>
        get_ms(timestamp);
 80019b8:	6838      	ldr	r0, [r7, #0]
 80019ba:	f001 f8ab 	bl	8002b14 <stm32_get_clock_ms>
    return 0;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20000000 	.word	0x20000000

080019cc <mpu_get_accel_reg>:
 *  @param[out] data        Raw data in hardware units.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_accel_reg(short *data, unsigned long *timestamp)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
    unsigned char tmp[6];

    if (!(st.chip_cfg.sensors & INV_XYZ_ACCEL))
 80019d6:	4b22      	ldr	r3, [pc, #136]	@ (8001a60 <mpu_get_accel_reg+0x94>)
 80019d8:	7a9b      	ldrb	r3, [r3, #10]
 80019da:	f003 0308 	and.w	r3, r3, #8
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d102      	bne.n	80019e8 <mpu_get_accel_reg+0x1c>
        return -1;
 80019e2:	f04f 33ff 	mov.w	r3, #4294967295
 80019e6:	e037      	b.n	8001a58 <mpu_get_accel_reg+0x8c>

    if (i2c_read(st.hw->addr, st.reg->raw_accel, 6, tmp))
 80019e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001a60 <mpu_get_accel_reg+0x94>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	7818      	ldrb	r0, [r3, #0]
 80019ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001a60 <mpu_get_accel_reg+0x94>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	7bd9      	ldrb	r1, [r3, #15]
 80019f4:	f107 0308 	add.w	r3, r7, #8
 80019f8:	2206      	movs	r2, #6
 80019fa:	f001 f9ef 	bl	8002ddc <stm32_i2c_read>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d002      	beq.n	8001a0a <mpu_get_accel_reg+0x3e>
        return -1;
 8001a04:	f04f 33ff 	mov.w	r3, #4294967295
 8001a08:	e026      	b.n	8001a58 <mpu_get_accel_reg+0x8c>
    data[0] = (tmp[0] << 8) | tmp[1];
 8001a0a:	7a3b      	ldrb	r3, [r7, #8]
 8001a0c:	b21b      	sxth	r3, r3
 8001a0e:	021b      	lsls	r3, r3, #8
 8001a10:	b21a      	sxth	r2, r3
 8001a12:	7a7b      	ldrb	r3, [r7, #9]
 8001a14:	b21b      	sxth	r3, r3
 8001a16:	4313      	orrs	r3, r2
 8001a18:	b21a      	sxth	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	801a      	strh	r2, [r3, #0]
    data[1] = (tmp[2] << 8) | tmp[3];
 8001a1e:	7abb      	ldrb	r3, [r7, #10]
 8001a20:	b21b      	sxth	r3, r3
 8001a22:	021b      	lsls	r3, r3, #8
 8001a24:	b219      	sxth	r1, r3
 8001a26:	7afb      	ldrb	r3, [r7, #11]
 8001a28:	b21a      	sxth	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	3302      	adds	r3, #2
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	b212      	sxth	r2, r2
 8001a32:	801a      	strh	r2, [r3, #0]
    data[2] = (tmp[4] << 8) | tmp[5];
 8001a34:	7b3b      	ldrb	r3, [r7, #12]
 8001a36:	b21b      	sxth	r3, r3
 8001a38:	021b      	lsls	r3, r3, #8
 8001a3a:	b219      	sxth	r1, r3
 8001a3c:	7b7b      	ldrb	r3, [r7, #13]
 8001a3e:	b21a      	sxth	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3304      	adds	r3, #4
 8001a44:	430a      	orrs	r2, r1
 8001a46:	b212      	sxth	r2, r2
 8001a48:	801a      	strh	r2, [r3, #0]
    if (timestamp)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d002      	beq.n	8001a56 <mpu_get_accel_reg+0x8a>
        get_ms(timestamp);
 8001a50:	6838      	ldr	r0, [r7, #0]
 8001a52:	f001 f85f 	bl	8002b14 <stm32_get_clock_ms>
    return 0;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	20000000 	.word	0x20000000

08001a64 <mpu_get_temperature>:
 *  @param[out] data        Data in q16 format.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_temperature(long *data, unsigned long *timestamp)
{
 8001a64:	b590      	push	{r4, r7, lr}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
    unsigned char tmp[2];
    short raw;

    if (!(st.chip_cfg.sensors))
 8001a6e:	4b2e      	ldr	r3, [pc, #184]	@ (8001b28 <mpu_get_temperature+0xc4>)
 8001a70:	7a9b      	ldrb	r3, [r3, #10]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d102      	bne.n	8001a7c <mpu_get_temperature+0x18>
        return -1;
 8001a76:	f04f 33ff 	mov.w	r3, #4294967295
 8001a7a:	e050      	b.n	8001b1e <mpu_get_temperature+0xba>

    if (i2c_read(st.hw->addr, st.reg->temp, 2, tmp))
 8001a7c:	4b2a      	ldr	r3, [pc, #168]	@ (8001b28 <mpu_get_temperature+0xc4>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	7818      	ldrb	r0, [r3, #0]
 8001a82:	4b29      	ldr	r3, [pc, #164]	@ (8001b28 <mpu_get_temperature+0xc4>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	7c19      	ldrb	r1, [r3, #16]
 8001a88:	f107 030c 	add.w	r3, r7, #12
 8001a8c:	2202      	movs	r2, #2
 8001a8e:	f001 f9a5 	bl	8002ddc <stm32_i2c_read>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d002      	beq.n	8001a9e <mpu_get_temperature+0x3a>
        return -1;
 8001a98:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9c:	e03f      	b.n	8001b1e <mpu_get_temperature+0xba>
    raw = (tmp[0] << 8) | tmp[1];
 8001a9e:	7b3b      	ldrb	r3, [r7, #12]
 8001aa0:	b21b      	sxth	r3, r3
 8001aa2:	021b      	lsls	r3, r3, #8
 8001aa4:	b21a      	sxth	r2, r3
 8001aa6:	7b7b      	ldrb	r3, [r7, #13]
 8001aa8:	b21b      	sxth	r3, r3
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	81fb      	strh	r3, [r7, #14]
    if (timestamp)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d002      	beq.n	8001aba <mpu_get_temperature+0x56>
        get_ms(timestamp);
 8001ab4:	6838      	ldr	r0, [r7, #0]
 8001ab6:	f001 f82d 	bl	8002b14 <stm32_get_clock_ms>

    data[0] = (long)((35 + ((raw - (float)st.hw->temp_offset) / st.hw->temp_sens)) * 65536L);
 8001aba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff f8a6 	bl	8000c10 <__aeabi_i2f>
 8001ac4:	4604      	mov	r4, r0
 8001ac6:	4b18      	ldr	r3, [pc, #96]	@ (8001b28 <mpu_get_temperature+0xc4>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff f89e 	bl	8000c10 <__aeabi_i2f>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4620      	mov	r0, r4
 8001ada:	f7fe ffe3 	bl	8000aa4 <__aeabi_fsub>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	461c      	mov	r4, r3
 8001ae2:	4b11      	ldr	r3, [pc, #68]	@ (8001b28 <mpu_get_temperature+0xc4>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	88db      	ldrh	r3, [r3, #6]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff f891 	bl	8000c10 <__aeabi_i2f>
 8001aee:	4603      	mov	r3, r0
 8001af0:	4619      	mov	r1, r3
 8001af2:	4620      	mov	r0, r4
 8001af4:	f7ff f994 	bl	8000e20 <__aeabi_fdiv>
 8001af8:	4603      	mov	r3, r0
 8001afa:	490c      	ldr	r1, [pc, #48]	@ (8001b2c <mpu_get_temperature+0xc8>)
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7fe ffd3 	bl	8000aa8 <__addsf3>
 8001b02:	4603      	mov	r3, r0
 8001b04:	f04f 418f 	mov.w	r1, #1199570944	@ 0x47800000
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff f8d5 	bl	8000cb8 <__aeabi_fmul>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff fa97 	bl	8001044 <__aeabi_f2iz>
 8001b16:	4602      	mov	r2, r0
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	601a      	str	r2, [r3, #0]
    return 0;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3714      	adds	r7, #20
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd90      	pop	{r4, r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20000000 	.word	0x20000000
 8001b2c:	420c0000 	.word	0x420c0000

08001b30 <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8001b36:	4b7e      	ldr	r3, [pc, #504]	@ (8001d30 <mpu_reset_fifo+0x200>)
 8001b38:	7a9b      	ldrb	r3, [r3, #10]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d102      	bne.n	8001b44 <mpu_reset_fifo+0x14>
        return -1;
 8001b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b42:	e0f1      	b.n	8001d28 <mpu_reset_fifo+0x1f8>

    data = 0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	71fb      	strb	r3, [r7, #7]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8001b48:	4b79      	ldr	r3, [pc, #484]	@ (8001d30 <mpu_reset_fifo+0x200>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	7818      	ldrb	r0, [r3, #0]
 8001b4e:	4b78      	ldr	r3, [pc, #480]	@ (8001d30 <mpu_reset_fifo+0x200>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	7c59      	ldrb	r1, [r3, #17]
 8001b54:	1dfb      	adds	r3, r7, #7
 8001b56:	2201      	movs	r2, #1
 8001b58:	f001 f8d6 	bl	8002d08 <stm32_i2c_write>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d002      	beq.n	8001b68 <mpu_reset_fifo+0x38>
        return -1;
 8001b62:	f04f 33ff 	mov.w	r3, #4294967295
 8001b66:	e0df      	b.n	8001d28 <mpu_reset_fifo+0x1f8>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8001b68:	4b71      	ldr	r3, [pc, #452]	@ (8001d30 <mpu_reset_fifo+0x200>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	7818      	ldrb	r0, [r3, #0]
 8001b6e:	4b70      	ldr	r3, [pc, #448]	@ (8001d30 <mpu_reset_fifo+0x200>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	7959      	ldrb	r1, [r3, #5]
 8001b74:	1dfb      	adds	r3, r7, #7
 8001b76:	2201      	movs	r2, #1
 8001b78:	f001 f8c6 	bl	8002d08 <stm32_i2c_write>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d002      	beq.n	8001b88 <mpu_reset_fifo+0x58>
        return -1;
 8001b82:	f04f 33ff 	mov.w	r3, #4294967295
 8001b86:	e0cf      	b.n	8001d28 <mpu_reset_fifo+0x1f8>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001b88:	4b69      	ldr	r3, [pc, #420]	@ (8001d30 <mpu_reset_fifo+0x200>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	7818      	ldrb	r0, [r3, #0]
 8001b8e:	4b68      	ldr	r3, [pc, #416]	@ (8001d30 <mpu_reset_fifo+0x200>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	7919      	ldrb	r1, [r3, #4]
 8001b94:	1dfb      	adds	r3, r7, #7
 8001b96:	2201      	movs	r2, #1
 8001b98:	f001 f8b6 	bl	8002d08 <stm32_i2c_write>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d002      	beq.n	8001ba8 <mpu_reset_fifo+0x78>
        return -1;
 8001ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba6:	e0bf      	b.n	8001d28 <mpu_reset_fifo+0x1f8>

    if (st.chip_cfg.dmp_on) {
 8001ba8:	4b61      	ldr	r3, [pc, #388]	@ (8001d30 <mpu_reset_fifo+0x200>)
 8001baa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d05c      	beq.n	8001c6c <mpu_reset_fifo+0x13c>
        data = BIT_FIFO_RST | BIT_DMP_RST;
 8001bb2:	230c      	movs	r3, #12
 8001bb4:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001bb6:	4b5e      	ldr	r3, [pc, #376]	@ (8001d30 <mpu_reset_fifo+0x200>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	7818      	ldrb	r0, [r3, #0]
 8001bbc:	4b5c      	ldr	r3, [pc, #368]	@ (8001d30 <mpu_reset_fifo+0x200>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	7919      	ldrb	r1, [r3, #4]
 8001bc2:	1dfb      	adds	r3, r7, #7
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f001 f89f 	bl	8002d08 <stm32_i2c_write>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d002      	beq.n	8001bd6 <mpu_reset_fifo+0xa6>
            return -1;
 8001bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd4:	e0a8      	b.n	8001d28 <mpu_reset_fifo+0x1f8>
        delay_ms(50);
 8001bd6:	2032      	movs	r0, #50	@ 0x32
 8001bd8:	f000 ffaa 	bl	8002b30 <stm32_delay_ms>
        data = BIT_DMP_EN | BIT_FIFO_EN;
 8001bdc:	23c0      	movs	r3, #192	@ 0xc0
 8001bde:	71fb      	strb	r3, [r7, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8001be0:	4b53      	ldr	r3, [pc, #332]	@ (8001d30 <mpu_reset_fifo+0x200>)
 8001be2:	7a9b      	ldrb	r3, [r3, #10]
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d004      	beq.n	8001bf6 <mpu_reset_fifo+0xc6>
            data |= BIT_AUX_IF_EN;
 8001bec:	79fb      	ldrb	r3, [r7, #7]
 8001bee:	f043 0320 	orr.w	r3, r3, #32
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001bf6:	4b4e      	ldr	r3, [pc, #312]	@ (8001d30 <mpu_reset_fifo+0x200>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	7818      	ldrb	r0, [r3, #0]
 8001bfc:	4b4c      	ldr	r3, [pc, #304]	@ (8001d30 <mpu_reset_fifo+0x200>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	7919      	ldrb	r1, [r3, #4]
 8001c02:	1dfb      	adds	r3, r7, #7
 8001c04:	2201      	movs	r2, #1
 8001c06:	f001 f87f 	bl	8002d08 <stm32_i2c_write>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d002      	beq.n	8001c16 <mpu_reset_fifo+0xe6>
            return -1;
 8001c10:	f04f 33ff 	mov.w	r3, #4294967295
 8001c14:	e088      	b.n	8001d28 <mpu_reset_fifo+0x1f8>
        if (st.chip_cfg.int_enable)
 8001c16:	4b46      	ldr	r3, [pc, #280]	@ (8001d30 <mpu_reset_fifo+0x200>)
 8001c18:	7c5b      	ldrb	r3, [r3, #17]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d002      	beq.n	8001c24 <mpu_reset_fifo+0xf4>
            data = BIT_DMP_INT_EN;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	71fb      	strb	r3, [r7, #7]
 8001c22:	e001      	b.n	8001c28 <mpu_reset_fifo+0xf8>
        else
            data = 0;
 8001c24:	2300      	movs	r3, #0
 8001c26:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8001c28:	4b41      	ldr	r3, [pc, #260]	@ (8001d30 <mpu_reset_fifo+0x200>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	7818      	ldrb	r0, [r3, #0]
 8001c2e:	4b40      	ldr	r3, [pc, #256]	@ (8001d30 <mpu_reset_fifo+0x200>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	7c59      	ldrb	r1, [r3, #17]
 8001c34:	1dfb      	adds	r3, r7, #7
 8001c36:	2201      	movs	r2, #1
 8001c38:	f001 f866 	bl	8002d08 <stm32_i2c_write>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d002      	beq.n	8001c48 <mpu_reset_fifo+0x118>
            return -1;
 8001c42:	f04f 33ff 	mov.w	r3, #4294967295
 8001c46:	e06f      	b.n	8001d28 <mpu_reset_fifo+0x1f8>
        data = 0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8001c4c:	4b38      	ldr	r3, [pc, #224]	@ (8001d30 <mpu_reset_fifo+0x200>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	7818      	ldrb	r0, [r3, #0]
 8001c52:	4b37      	ldr	r3, [pc, #220]	@ (8001d30 <mpu_reset_fifo+0x200>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	7959      	ldrb	r1, [r3, #5]
 8001c58:	1dfb      	adds	r3, r7, #7
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f001 f854 	bl	8002d08 <stm32_i2c_write>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d05f      	beq.n	8001d26 <mpu_reset_fifo+0x1f6>
            return -1;
 8001c66:	f04f 33ff 	mov.w	r3, #4294967295
 8001c6a:	e05d      	b.n	8001d28 <mpu_reset_fifo+0x1f8>
    } else {
        data = BIT_FIFO_RST;
 8001c6c:	2304      	movs	r3, #4
 8001c6e:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001c70:	4b2f      	ldr	r3, [pc, #188]	@ (8001d30 <mpu_reset_fifo+0x200>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	7818      	ldrb	r0, [r3, #0]
 8001c76:	4b2e      	ldr	r3, [pc, #184]	@ (8001d30 <mpu_reset_fifo+0x200>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	7919      	ldrb	r1, [r3, #4]
 8001c7c:	1dfb      	adds	r3, r7, #7
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f001 f842 	bl	8002d08 <stm32_i2c_write>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d002      	beq.n	8001c90 <mpu_reset_fifo+0x160>
            return -1;
 8001c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8e:	e04b      	b.n	8001d28 <mpu_reset_fifo+0x1f8>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 8001c90:	4b27      	ldr	r3, [pc, #156]	@ (8001d30 <mpu_reset_fifo+0x200>)
 8001c92:	7c9b      	ldrb	r3, [r3, #18]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d105      	bne.n	8001ca4 <mpu_reset_fifo+0x174>
 8001c98:	4b25      	ldr	r3, [pc, #148]	@ (8001d30 <mpu_reset_fifo+0x200>)
 8001c9a:	7a9b      	ldrb	r3, [r3, #10]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d102      	bne.n	8001caa <mpu_reset_fifo+0x17a>
            data = BIT_FIFO_EN;
 8001ca4:	2340      	movs	r3, #64	@ 0x40
 8001ca6:	71fb      	strb	r3, [r7, #7]
 8001ca8:	e001      	b.n	8001cae <mpu_reset_fifo+0x17e>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 8001caa:	2360      	movs	r3, #96	@ 0x60
 8001cac:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8001cae:	4b20      	ldr	r3, [pc, #128]	@ (8001d30 <mpu_reset_fifo+0x200>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	7818      	ldrb	r0, [r3, #0]
 8001cb4:	4b1e      	ldr	r3, [pc, #120]	@ (8001d30 <mpu_reset_fifo+0x200>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	7919      	ldrb	r1, [r3, #4]
 8001cba:	1dfb      	adds	r3, r7, #7
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f001 f823 	bl	8002d08 <stm32_i2c_write>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d002      	beq.n	8001cce <mpu_reset_fifo+0x19e>
            return -1;
 8001cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8001ccc:	e02c      	b.n	8001d28 <mpu_reset_fifo+0x1f8>
        delay_ms(50);
 8001cce:	2032      	movs	r0, #50	@ 0x32
 8001cd0:	f000 ff2e 	bl	8002b30 <stm32_delay_ms>
        if (st.chip_cfg.int_enable)
 8001cd4:	4b16      	ldr	r3, [pc, #88]	@ (8001d30 <mpu_reset_fifo+0x200>)
 8001cd6:	7c5b      	ldrb	r3, [r3, #17]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d002      	beq.n	8001ce2 <mpu_reset_fifo+0x1b2>
            data = BIT_DATA_RDY_EN;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	71fb      	strb	r3, [r7, #7]
 8001ce0:	e001      	b.n	8001ce6 <mpu_reset_fifo+0x1b6>
        else
            data = 0;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8001ce6:	4b12      	ldr	r3, [pc, #72]	@ (8001d30 <mpu_reset_fifo+0x200>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	7818      	ldrb	r0, [r3, #0]
 8001cec:	4b10      	ldr	r3, [pc, #64]	@ (8001d30 <mpu_reset_fifo+0x200>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	7c59      	ldrb	r1, [r3, #17]
 8001cf2:	1dfb      	adds	r3, r7, #7
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f001 f807 	bl	8002d08 <stm32_i2c_write>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d002      	beq.n	8001d06 <mpu_reset_fifo+0x1d6>
            return -1;
 8001d00:	f04f 33ff 	mov.w	r3, #4294967295
 8001d04:	e010      	b.n	8001d28 <mpu_reset_fifo+0x1f8>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 8001d06:	4b0a      	ldr	r3, [pc, #40]	@ (8001d30 <mpu_reset_fifo+0x200>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	7818      	ldrb	r0, [r3, #0]
 8001d0c:	4b08      	ldr	r3, [pc, #32]	@ (8001d30 <mpu_reset_fifo+0x200>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	7959      	ldrb	r1, [r3, #5]
 8001d12:	4b08      	ldr	r3, [pc, #32]	@ (8001d34 <mpu_reset_fifo+0x204>)
 8001d14:	2201      	movs	r2, #1
 8001d16:	f000 fff7 	bl	8002d08 <stm32_i2c_write>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d002      	beq.n	8001d26 <mpu_reset_fifo+0x1f6>
            return -1;
 8001d20:	f04f 33ff 	mov.w	r3, #4294967295
 8001d24:	e000      	b.n	8001d28 <mpu_reset_fifo+0x1f8>
    }
    return 0;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20000000 	.word	0x20000000
 8001d34:	20000010 	.word	0x20000010

08001d38 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8001d42:	4b26      	ldr	r3, [pc, #152]	@ (8001ddc <mpu_set_gyro_fsr+0xa4>)
 8001d44:	7a9b      	ldrb	r3, [r3, #10]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d102      	bne.n	8001d50 <mpu_set_gyro_fsr+0x18>
        return -1;
 8001d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4e:	e041      	b.n	8001dd4 <mpu_set_gyro_fsr+0x9c>

    switch (fsr) {
 8001d50:	88fb      	ldrh	r3, [r7, #6]
 8001d52:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001d56:	d017      	beq.n	8001d88 <mpu_set_gyro_fsr+0x50>
 8001d58:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001d5c:	dc17      	bgt.n	8001d8e <mpu_set_gyro_fsr+0x56>
 8001d5e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d62:	d00e      	beq.n	8001d82 <mpu_set_gyro_fsr+0x4a>
 8001d64:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d68:	dc11      	bgt.n	8001d8e <mpu_set_gyro_fsr+0x56>
 8001d6a:	2bfa      	cmp	r3, #250	@ 0xfa
 8001d6c:	d003      	beq.n	8001d76 <mpu_set_gyro_fsr+0x3e>
 8001d6e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001d72:	d003      	beq.n	8001d7c <mpu_set_gyro_fsr+0x44>
 8001d74:	e00b      	b.n	8001d8e <mpu_set_gyro_fsr+0x56>
    case 250:
        data = INV_FSR_250DPS << 3;
 8001d76:	2300      	movs	r3, #0
 8001d78:	73fb      	strb	r3, [r7, #15]
        break;
 8001d7a:	e00b      	b.n	8001d94 <mpu_set_gyro_fsr+0x5c>
    case 500:
        data = INV_FSR_500DPS << 3;
 8001d7c:	2308      	movs	r3, #8
 8001d7e:	73fb      	strb	r3, [r7, #15]
        break;
 8001d80:	e008      	b.n	8001d94 <mpu_set_gyro_fsr+0x5c>
    case 1000:
        data = INV_FSR_1000DPS << 3;
 8001d82:	2310      	movs	r3, #16
 8001d84:	73fb      	strb	r3, [r7, #15]
        break;
 8001d86:	e005      	b.n	8001d94 <mpu_set_gyro_fsr+0x5c>
    case 2000:
        data = INV_FSR_2000DPS << 3;
 8001d88:	2318      	movs	r3, #24
 8001d8a:	73fb      	strb	r3, [r7, #15]
        break;
 8001d8c:	e002      	b.n	8001d94 <mpu_set_gyro_fsr+0x5c>
    default:
        return -1;
 8001d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d92:	e01f      	b.n	8001dd4 <mpu_set_gyro_fsr+0x9c>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
 8001d94:	4b11      	ldr	r3, [pc, #68]	@ (8001ddc <mpu_set_gyro_fsr+0xa4>)
 8001d96:	7a1a      	ldrb	r2, [r3, #8]
 8001d98:	7bfb      	ldrb	r3, [r7, #15]
 8001d9a:	08db      	lsrs	r3, r3, #3
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d101      	bne.n	8001da6 <mpu_set_gyro_fsr+0x6e>
        return 0;
 8001da2:	2300      	movs	r3, #0
 8001da4:	e016      	b.n	8001dd4 <mpu_set_gyro_fsr+0x9c>
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 8001da6:	4b0d      	ldr	r3, [pc, #52]	@ (8001ddc <mpu_set_gyro_fsr+0xa4>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	7818      	ldrb	r0, [r3, #0]
 8001dac:	4b0b      	ldr	r3, [pc, #44]	@ (8001ddc <mpu_set_gyro_fsr+0xa4>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	7999      	ldrb	r1, [r3, #6]
 8001db2:	f107 030f 	add.w	r3, r7, #15
 8001db6:	2201      	movs	r2, #1
 8001db8:	f000 ffa6 	bl	8002d08 <stm32_i2c_write>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d002      	beq.n	8001dc8 <mpu_set_gyro_fsr+0x90>
        return -1;
 8001dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc6:	e005      	b.n	8001dd4 <mpu_set_gyro_fsr+0x9c>
    st.chip_cfg.gyro_fsr = data >> 3;
 8001dc8:	7bfb      	ldrb	r3, [r7, #15]
 8001dca:	08db      	lsrs	r3, r3, #3
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	4b03      	ldr	r3, [pc, #12]	@ (8001ddc <mpu_set_gyro_fsr+0xa4>)
 8001dd0:	721a      	strb	r2, [r3, #8]
    return 0;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	20000000 	.word	0x20000000

08001de0 <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	71fb      	strb	r3, [r7, #7]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8001dea:	4b30      	ldr	r3, [pc, #192]	@ (8001eac <mpu_set_accel_fsr+0xcc>)
 8001dec:	7a9b      	ldrb	r3, [r3, #10]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d102      	bne.n	8001df8 <mpu_set_accel_fsr+0x18>
        return -1;
 8001df2:	f04f 33ff 	mov.w	r3, #4294967295
 8001df6:	e054      	b.n	8001ea2 <mpu_set_accel_fsr+0xc2>

    switch (fsr) {
 8001df8:	79fb      	ldrb	r3, [r7, #7]
 8001dfa:	3b02      	subs	r3, #2
 8001dfc:	2b0e      	cmp	r3, #14
 8001dfe:	d82d      	bhi.n	8001e5c <mpu_set_accel_fsr+0x7c>
 8001e00:	a201      	add	r2, pc, #4	@ (adr r2, 8001e08 <mpu_set_accel_fsr+0x28>)
 8001e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e06:	bf00      	nop
 8001e08:	08001e45 	.word	0x08001e45
 8001e0c:	08001e5d 	.word	0x08001e5d
 8001e10:	08001e4b 	.word	0x08001e4b
 8001e14:	08001e5d 	.word	0x08001e5d
 8001e18:	08001e5d 	.word	0x08001e5d
 8001e1c:	08001e5d 	.word	0x08001e5d
 8001e20:	08001e51 	.word	0x08001e51
 8001e24:	08001e5d 	.word	0x08001e5d
 8001e28:	08001e5d 	.word	0x08001e5d
 8001e2c:	08001e5d 	.word	0x08001e5d
 8001e30:	08001e5d 	.word	0x08001e5d
 8001e34:	08001e5d 	.word	0x08001e5d
 8001e38:	08001e5d 	.word	0x08001e5d
 8001e3c:	08001e5d 	.word	0x08001e5d
 8001e40:	08001e57 	.word	0x08001e57
    case 2:
        data = INV_FSR_2G << 3;
 8001e44:	2300      	movs	r3, #0
 8001e46:	73fb      	strb	r3, [r7, #15]
        break;
 8001e48:	e00b      	b.n	8001e62 <mpu_set_accel_fsr+0x82>
    case 4:
        data = INV_FSR_4G << 3;
 8001e4a:	2308      	movs	r3, #8
 8001e4c:	73fb      	strb	r3, [r7, #15]
        break;
 8001e4e:	e008      	b.n	8001e62 <mpu_set_accel_fsr+0x82>
    case 8:
        data = INV_FSR_8G << 3;
 8001e50:	2310      	movs	r3, #16
 8001e52:	73fb      	strb	r3, [r7, #15]
        break;
 8001e54:	e005      	b.n	8001e62 <mpu_set_accel_fsr+0x82>
    case 16:
        data = INV_FSR_16G << 3;
 8001e56:	2318      	movs	r3, #24
 8001e58:	73fb      	strb	r3, [r7, #15]
        break;
 8001e5a:	e002      	b.n	8001e62 <mpu_set_accel_fsr+0x82>
    default:
        return -1;
 8001e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e60:	e01f      	b.n	8001ea2 <mpu_set_accel_fsr+0xc2>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
 8001e62:	4b12      	ldr	r3, [pc, #72]	@ (8001eac <mpu_set_accel_fsr+0xcc>)
 8001e64:	7a5a      	ldrb	r2, [r3, #9]
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
 8001e68:	08db      	lsrs	r3, r3, #3
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d101      	bne.n	8001e74 <mpu_set_accel_fsr+0x94>
        return 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	e016      	b.n	8001ea2 <mpu_set_accel_fsr+0xc2>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
 8001e74:	4b0d      	ldr	r3, [pc, #52]	@ (8001eac <mpu_set_accel_fsr+0xcc>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	7818      	ldrb	r0, [r3, #0]
 8001e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001eac <mpu_set_accel_fsr+0xcc>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	79d9      	ldrb	r1, [r3, #7]
 8001e80:	f107 030f 	add.w	r3, r7, #15
 8001e84:	2201      	movs	r2, #1
 8001e86:	f000 ff3f 	bl	8002d08 <stm32_i2c_write>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d002      	beq.n	8001e96 <mpu_set_accel_fsr+0xb6>
        return -1;
 8001e90:	f04f 33ff 	mov.w	r3, #4294967295
 8001e94:	e005      	b.n	8001ea2 <mpu_set_accel_fsr+0xc2>
    st.chip_cfg.accel_fsr = data >> 3;
 8001e96:	7bfb      	ldrb	r3, [r7, #15]
 8001e98:	08db      	lsrs	r3, r3, #3
 8001e9a:	b2da      	uxtb	r2, r3
 8001e9c:	4b03      	ldr	r3, [pc, #12]	@ (8001eac <mpu_set_accel_fsr+0xcc>)
 8001e9e:	725a      	strb	r2, [r3, #9]
    return 0;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000000 	.word	0x20000000

08001eb0 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8001eba:	4b23      	ldr	r3, [pc, #140]	@ (8001f48 <mpu_set_lpf+0x98>)
 8001ebc:	7a9b      	ldrb	r3, [r3, #10]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d102      	bne.n	8001ec8 <mpu_set_lpf+0x18>
        return -1;
 8001ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec6:	e03b      	b.n	8001f40 <mpu_set_lpf+0x90>

    if (lpf >= 188)
 8001ec8:	88fb      	ldrh	r3, [r7, #6]
 8001eca:	2bbb      	cmp	r3, #187	@ 0xbb
 8001ecc:	d902      	bls.n	8001ed4 <mpu_set_lpf+0x24>
        data = INV_FILTER_188HZ;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	73fb      	strb	r3, [r7, #15]
 8001ed2:	e019      	b.n	8001f08 <mpu_set_lpf+0x58>
    else if (lpf >= 98)
 8001ed4:	88fb      	ldrh	r3, [r7, #6]
 8001ed6:	2b61      	cmp	r3, #97	@ 0x61
 8001ed8:	d902      	bls.n	8001ee0 <mpu_set_lpf+0x30>
        data = INV_FILTER_98HZ;
 8001eda:	2302      	movs	r3, #2
 8001edc:	73fb      	strb	r3, [r7, #15]
 8001ede:	e013      	b.n	8001f08 <mpu_set_lpf+0x58>
    else if (lpf >= 42)
 8001ee0:	88fb      	ldrh	r3, [r7, #6]
 8001ee2:	2b29      	cmp	r3, #41	@ 0x29
 8001ee4:	d902      	bls.n	8001eec <mpu_set_lpf+0x3c>
        data = INV_FILTER_42HZ;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	73fb      	strb	r3, [r7, #15]
 8001eea:	e00d      	b.n	8001f08 <mpu_set_lpf+0x58>
    else if (lpf >= 20)
 8001eec:	88fb      	ldrh	r3, [r7, #6]
 8001eee:	2b13      	cmp	r3, #19
 8001ef0:	d902      	bls.n	8001ef8 <mpu_set_lpf+0x48>
        data = INV_FILTER_20HZ;
 8001ef2:	2304      	movs	r3, #4
 8001ef4:	73fb      	strb	r3, [r7, #15]
 8001ef6:	e007      	b.n	8001f08 <mpu_set_lpf+0x58>
    else if (lpf >= 10)
 8001ef8:	88fb      	ldrh	r3, [r7, #6]
 8001efa:	2b09      	cmp	r3, #9
 8001efc:	d902      	bls.n	8001f04 <mpu_set_lpf+0x54>
        data = INV_FILTER_10HZ;
 8001efe:	2305      	movs	r3, #5
 8001f00:	73fb      	strb	r3, [r7, #15]
 8001f02:	e001      	b.n	8001f08 <mpu_set_lpf+0x58>
    else
        data = INV_FILTER_5HZ;
 8001f04:	2306      	movs	r3, #6
 8001f06:	73fb      	strb	r3, [r7, #15]

    if (st.chip_cfg.lpf == data)
 8001f08:	4b0f      	ldr	r3, [pc, #60]	@ (8001f48 <mpu_set_lpf+0x98>)
 8001f0a:	7ada      	ldrb	r2, [r3, #11]
 8001f0c:	7bfb      	ldrb	r3, [r7, #15]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d101      	bne.n	8001f16 <mpu_set_lpf+0x66>
        return 0;
 8001f12:	2300      	movs	r3, #0
 8001f14:	e014      	b.n	8001f40 <mpu_set_lpf+0x90>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 8001f16:	4b0c      	ldr	r3, [pc, #48]	@ (8001f48 <mpu_set_lpf+0x98>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	7818      	ldrb	r0, [r3, #0]
 8001f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f48 <mpu_set_lpf+0x98>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	7899      	ldrb	r1, [r3, #2]
 8001f22:	f107 030f 	add.w	r3, r7, #15
 8001f26:	2201      	movs	r2, #1
 8001f28:	f000 feee 	bl	8002d08 <stm32_i2c_write>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d002      	beq.n	8001f38 <mpu_set_lpf+0x88>
        return -1;
 8001f32:	f04f 33ff 	mov.w	r3, #4294967295
 8001f36:	e003      	b.n	8001f40 <mpu_set_lpf+0x90>
    st.chip_cfg.lpf = data;
 8001f38:	7bfa      	ldrb	r2, [r7, #15]
 8001f3a:	4b03      	ldr	r3, [pc, #12]	@ (8001f48 <mpu_set_lpf+0x98>)
 8001f3c:	72da      	strb	r2, [r3, #11]
    return 0;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	20000000 	.word	0x20000000

08001f4c <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8001f56:	4b34      	ldr	r3, [pc, #208]	@ (8002028 <mpu_set_sample_rate+0xdc>)
 8001f58:	7a9b      	ldrb	r3, [r3, #10]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d102      	bne.n	8001f64 <mpu_set_sample_rate+0x18>
        return -1;
 8001f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f62:	e05d      	b.n	8002020 <mpu_set_sample_rate+0xd4>

    if (st.chip_cfg.dmp_on)
 8001f64:	4b30      	ldr	r3, [pc, #192]	@ (8002028 <mpu_set_sample_rate+0xdc>)
 8001f66:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d002      	beq.n	8001f74 <mpu_set_sample_rate+0x28>
        return -1;
 8001f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f72:	e055      	b.n	8002020 <mpu_set_sample_rate+0xd4>
    else {
        if (st.chip_cfg.lp_accel_mode) {
 8001f74:	4b2c      	ldr	r3, [pc, #176]	@ (8002028 <mpu_set_sample_rate+0xdc>)
 8001f76:	7d1b      	ldrb	r3, [r3, #20]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d00e      	beq.n	8001f9a <mpu_set_sample_rate+0x4e>
            if (rate && (rate <= 40)) {
 8001f7c:	88fb      	ldrh	r3, [r7, #6]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d008      	beq.n	8001f94 <mpu_set_sample_rate+0x48>
 8001f82:	88fb      	ldrh	r3, [r7, #6]
 8001f84:	2b28      	cmp	r3, #40	@ 0x28
 8001f86:	d805      	bhi.n	8001f94 <mpu_set_sample_rate+0x48>
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
 8001f88:	88fb      	ldrh	r3, [r7, #6]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff fc34 	bl	80017f8 <mpu_lp_accel_mode>
                return 0;
 8001f90:	2300      	movs	r3, #0
 8001f92:	e045      	b.n	8002020 <mpu_set_sample_rate+0xd4>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
 8001f94:	2000      	movs	r0, #0
 8001f96:	f7ff fc2f 	bl	80017f8 <mpu_lp_accel_mode>
        }
        if (rate < 4)
 8001f9a:	88fb      	ldrh	r3, [r7, #6]
 8001f9c:	2b03      	cmp	r3, #3
 8001f9e:	d802      	bhi.n	8001fa6 <mpu_set_sample_rate+0x5a>
            rate = 4;
 8001fa0:	2304      	movs	r3, #4
 8001fa2:	80fb      	strh	r3, [r7, #6]
 8001fa4:	e006      	b.n	8001fb4 <mpu_set_sample_rate+0x68>
        else if (rate > 1000)
 8001fa6:	88fb      	ldrh	r3, [r7, #6]
 8001fa8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001fac:	d902      	bls.n	8001fb4 <mpu_set_sample_rate+0x68>
            rate = 1000;
 8001fae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fb2:	80fb      	strh	r3, [r7, #6]

        data = 1000 / rate - 1;
 8001fb4:	88fb      	ldrh	r3, [r7, #6]
 8001fb6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001fba:	fb92 f3f3 	sdiv	r3, r2, r3
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 8001fc6:	4b18      	ldr	r3, [pc, #96]	@ (8002028 <mpu_set_sample_rate+0xdc>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	7818      	ldrb	r0, [r3, #0]
 8001fcc:	4b16      	ldr	r3, [pc, #88]	@ (8002028 <mpu_set_sample_rate+0xdc>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	7859      	ldrb	r1, [r3, #1]
 8001fd2:	f107 030f 	add.w	r3, r7, #15
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f000 fe96 	bl	8002d08 <stm32_i2c_write>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d002      	beq.n	8001fe8 <mpu_set_sample_rate+0x9c>
            return -1;
 8001fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe6:	e01b      	b.n	8002020 <mpu_set_sample_rate+0xd4>

        st.chip_cfg.sample_rate = 1000 / (1 + data);
 8001fe8:	7bfb      	ldrb	r3, [r7, #15]
 8001fea:	3301      	adds	r3, #1
 8001fec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001ff0:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	4b0c      	ldr	r3, [pc, #48]	@ (8002028 <mpu_set_sample_rate+0xdc>)
 8001ff8:	81da      	strh	r2, [r3, #14]

#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 8001ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8002028 <mpu_set_sample_rate+0xdc>)
 8001ffc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ffe:	2164      	movs	r1, #100	@ 0x64
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff fa97 	bl	8001534 <min>
 8002006:	4603      	mov	r3, r0
 8002008:	b29b      	uxth	r3, r3
 800200a:	4618      	mov	r0, r3
 800200c:	f000 f80e 	bl	800202c <mpu_set_compass_sample_rate>
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
 8002010:	4b05      	ldr	r3, [pc, #20]	@ (8002028 <mpu_set_sample_rate+0xdc>)
 8002012:	89db      	ldrh	r3, [r3, #14]
 8002014:	085b      	lsrs	r3, r3, #1
 8002016:	b29b      	uxth	r3, r3
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff ff49 	bl	8001eb0 <mpu_set_lpf>
        return 0;
 800201e:	2300      	movs	r3, #0
    }
}
 8002020:	4618      	mov	r0, r3
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	20000000 	.word	0x20000000

0800202c <mpu_set_compass_sample_rate>:
 *  mpu_get_compass_sample_rate to check the actual setting.
 *  @param[in]  rate    Desired compass sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_compass_sample_rate(unsigned short rate)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	80fb      	strh	r3, [r7, #6]
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
 8002036:	88fb      	ldrh	r3, [r7, #6]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d007      	beq.n	800204c <mpu_set_compass_sample_rate+0x20>
 800203c:	4b1a      	ldr	r3, [pc, #104]	@ (80020a8 <mpu_set_compass_sample_rate+0x7c>)
 800203e:	89db      	ldrh	r3, [r3, #14]
 8002040:	88fa      	ldrh	r2, [r7, #6]
 8002042:	429a      	cmp	r2, r3
 8002044:	d802      	bhi.n	800204c <mpu_set_compass_sample_rate+0x20>
 8002046:	88fb      	ldrh	r3, [r7, #6]
 8002048:	2b64      	cmp	r3, #100	@ 0x64
 800204a:	d902      	bls.n	8002052 <mpu_set_compass_sample_rate+0x26>
        return -1;
 800204c:	f04f 33ff 	mov.w	r3, #4294967295
 8002050:	e026      	b.n	80020a0 <mpu_set_compass_sample_rate+0x74>

    div = st.chip_cfg.sample_rate / rate - 1;
 8002052:	4b15      	ldr	r3, [pc, #84]	@ (80020a8 <mpu_set_compass_sample_rate+0x7c>)
 8002054:	89da      	ldrh	r2, [r3, #14]
 8002056:	88fb      	ldrh	r3, [r7, #6]
 8002058:	fbb2 f3f3 	udiv	r3, r2, r3
 800205c:	b29b      	uxth	r3, r3
 800205e:	b2db      	uxtb	r3, r3
 8002060:	3b01      	subs	r3, #1
 8002062:	b2db      	uxtb	r3, r3
 8002064:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
 8002066:	4b10      	ldr	r3, [pc, #64]	@ (80020a8 <mpu_set_compass_sample_rate+0x7c>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	7818      	ldrb	r0, [r3, #0]
 800206c:	4b0e      	ldr	r3, [pc, #56]	@ (80020a8 <mpu_set_compass_sample_rate+0x7c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f893 1024 	ldrb.w	r1, [r3, #36]	@ 0x24
 8002074:	f107 030f 	add.w	r3, r7, #15
 8002078:	2201      	movs	r2, #1
 800207a:	f000 fe45 	bl	8002d08 <stm32_i2c_write>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d002      	beq.n	800208a <mpu_set_compass_sample_rate+0x5e>
        return -1;
 8002084:	f04f 33ff 	mov.w	r3, #4294967295
 8002088:	e00a      	b.n	80020a0 <mpu_set_compass_sample_rate+0x74>
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
 800208a:	4b07      	ldr	r3, [pc, #28]	@ (80020a8 <mpu_set_compass_sample_rate+0x7c>)
 800208c:	89db      	ldrh	r3, [r3, #14]
 800208e:	461a      	mov	r2, r3
 8002090:	7bfb      	ldrb	r3, [r7, #15]
 8002092:	3301      	adds	r3, #1
 8002094:	fb92 f3f3 	sdiv	r3, r2, r3
 8002098:	b29a      	uxth	r2, r3
 800209a:	4b03      	ldr	r3, [pc, #12]	@ (80020a8 <mpu_set_compass_sample_rate+0x7c>)
 800209c:	851a      	strh	r2, [r3, #40]	@ 0x28
    return 0;
 800209e:	2300      	movs	r3, #0
#else
    return -1;
#endif
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	20000000 	.word	0x20000000

080020ac <mpu_get_gyro_sens>:
 *  @brief      Get gyro sensitivity scale factor.
 *  @param[out] sens    Conversion from hardware units to dps.
 *  @return     0 if successful.
 */
int mpu_get_gyro_sens(float *sens)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr) {
 80020b4:	4b14      	ldr	r3, [pc, #80]	@ (8002108 <mpu_get_gyro_sens+0x5c>)
 80020b6:	7a1b      	ldrb	r3, [r3, #8]
 80020b8:	2b03      	cmp	r3, #3
 80020ba:	d81b      	bhi.n	80020f4 <mpu_get_gyro_sens+0x48>
 80020bc:	a201      	add	r2, pc, #4	@ (adr r2, 80020c4 <mpu_get_gyro_sens+0x18>)
 80020be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c2:	bf00      	nop
 80020c4:	080020d5 	.word	0x080020d5
 80020c8:	080020dd 	.word	0x080020dd
 80020cc:	080020e5 	.word	0x080020e5
 80020d0:	080020ed 	.word	0x080020ed
    case INV_FSR_250DPS:
        sens[0] = 131.f;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a0d      	ldr	r2, [pc, #52]	@ (800210c <mpu_get_gyro_sens+0x60>)
 80020d8:	601a      	str	r2, [r3, #0]
        break;
 80020da:	e00e      	b.n	80020fa <mpu_get_gyro_sens+0x4e>
    case INV_FSR_500DPS:
        sens[0] = 65.5f;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a0c      	ldr	r2, [pc, #48]	@ (8002110 <mpu_get_gyro_sens+0x64>)
 80020e0:	601a      	str	r2, [r3, #0]
        break;
 80020e2:	e00a      	b.n	80020fa <mpu_get_gyro_sens+0x4e>
    case INV_FSR_1000DPS:
        sens[0] = 32.8f;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a0b      	ldr	r2, [pc, #44]	@ (8002114 <mpu_get_gyro_sens+0x68>)
 80020e8:	601a      	str	r2, [r3, #0]
        break;
 80020ea:	e006      	b.n	80020fa <mpu_get_gyro_sens+0x4e>
    case INV_FSR_2000DPS:
        sens[0] = 16.4f;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002118 <mpu_get_gyro_sens+0x6c>)
 80020f0:	601a      	str	r2, [r3, #0]
        break;
 80020f2:	e002      	b.n	80020fa <mpu_get_gyro_sens+0x4e>
    default:
        return -1;
 80020f4:	f04f 33ff 	mov.w	r3, #4294967295
 80020f8:	e000      	b.n	80020fc <mpu_get_gyro_sens+0x50>
    }
    return 0;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	bc80      	pop	{r7}
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	20000000 	.word	0x20000000
 800210c:	43030000 	.word	0x43030000
 8002110:	42830000 	.word	0x42830000
 8002114:	42033333 	.word	0x42033333
 8002118:	41833333 	.word	0x41833333

0800211c <mpu_get_accel_sens>:
 *  @brief      Get accel sensitivity scale factor.
 *  @param[out] sens    Conversion from hardware units to g's.
 *  @return     0 if successful.
 */
int mpu_get_accel_sens(unsigned short *sens)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr) {
 8002124:	4b1b      	ldr	r3, [pc, #108]	@ (8002194 <mpu_get_accel_sens+0x78>)
 8002126:	7a5b      	ldrb	r3, [r3, #9]
 8002128:	2b03      	cmp	r3, #3
 800212a:	d81f      	bhi.n	800216c <mpu_get_accel_sens+0x50>
 800212c:	a201      	add	r2, pc, #4	@ (adr r2, 8002134 <mpu_get_accel_sens+0x18>)
 800212e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002132:	bf00      	nop
 8002134:	08002145 	.word	0x08002145
 8002138:	0800214f 	.word	0x0800214f
 800213c:	08002159 	.word	0x08002159
 8002140:	08002163 	.word	0x08002163
    case INV_FSR_2G:
        sens[0] = 16384;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800214a:	801a      	strh	r2, [r3, #0]
        break;
 800214c:	e011      	b.n	8002172 <mpu_get_accel_sens+0x56>
    case INV_FSR_4G:
        sens[0] = 8192;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002154:	801a      	strh	r2, [r3, #0]
        break;
 8002156:	e00c      	b.n	8002172 <mpu_get_accel_sens+0x56>
    case INV_FSR_8G:
        sens[0] = 4096;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800215e:	801a      	strh	r2, [r3, #0]
        break;
 8002160:	e007      	b.n	8002172 <mpu_get_accel_sens+0x56>
    case INV_FSR_16G:
        sens[0] = 2048;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002168:	801a      	strh	r2, [r3, #0]
        break;
 800216a:	e002      	b.n	8002172 <mpu_get_accel_sens+0x56>
    default:
        return -1;
 800216c:	f04f 33ff 	mov.w	r3, #4294967295
 8002170:	e00a      	b.n	8002188 <mpu_get_accel_sens+0x6c>
    }
    if (st.chip_cfg.accel_half)
 8002172:	4b08      	ldr	r3, [pc, #32]	@ (8002194 <mpu_get_accel_sens+0x78>)
 8002174:	7cdb      	ldrb	r3, [r3, #19]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d005      	beq.n	8002186 <mpu_get_accel_sens+0x6a>
        sens[0] >>= 1;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	881b      	ldrh	r3, [r3, #0]
 800217e:	085b      	lsrs	r3, r3, #1
 8002180:	b29a      	uxth	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	801a      	strh	r2, [r3, #0]
    return 0;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	bc80      	pop	{r7}
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	20000000 	.word	0x20000000

08002198 <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	71fb      	strb	r3, [r7, #7]
    unsigned char prev;
    int result = 0;
 80021a2:	2300      	movs	r3, #0
 80021a4:	60fb      	str	r3, [r7, #12]

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
 80021a6:	79fb      	ldrb	r3, [r7, #7]
 80021a8:	f023 0301 	bic.w	r3, r3, #1
 80021ac:	71fb      	strb	r3, [r7, #7]

    if (st.chip_cfg.dmp_on)
 80021ae:	4b22      	ldr	r3, [pc, #136]	@ (8002238 <mpu_configure_fifo+0xa0>)
 80021b0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <mpu_configure_fifo+0x24>
        return 0;
 80021b8:	2300      	movs	r3, #0
 80021ba:	e038      	b.n	800222e <mpu_configure_fifo+0x96>
    else {
        if (!(st.chip_cfg.sensors))
 80021bc:	4b1e      	ldr	r3, [pc, #120]	@ (8002238 <mpu_configure_fifo+0xa0>)
 80021be:	7a9b      	ldrb	r3, [r3, #10]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d102      	bne.n	80021ca <mpu_configure_fifo+0x32>
            return -1;
 80021c4:	f04f 33ff 	mov.w	r3, #4294967295
 80021c8:	e031      	b.n	800222e <mpu_configure_fifo+0x96>
        prev = st.chip_cfg.fifo_enable;
 80021ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002238 <mpu_configure_fifo+0xa0>)
 80021cc:	7c1b      	ldrb	r3, [r3, #16]
 80021ce:	72fb      	strb	r3, [r7, #11]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 80021d0:	4b19      	ldr	r3, [pc, #100]	@ (8002238 <mpu_configure_fifo+0xa0>)
 80021d2:	7a9a      	ldrb	r2, [r3, #10]
 80021d4:	79fb      	ldrb	r3, [r7, #7]
 80021d6:	4013      	ands	r3, r2
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	4b17      	ldr	r3, [pc, #92]	@ (8002238 <mpu_configure_fifo+0xa0>)
 80021dc:	741a      	strb	r2, [r3, #16]
        if (st.chip_cfg.fifo_enable != sensors)
 80021de:	4b16      	ldr	r3, [pc, #88]	@ (8002238 <mpu_configure_fifo+0xa0>)
 80021e0:	7c1b      	ldrb	r3, [r3, #16]
 80021e2:	79fa      	ldrb	r2, [r7, #7]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d003      	beq.n	80021f0 <mpu_configure_fifo+0x58>
            /* You're not getting what you asked for. Some sensors are
             * asleep.
             */
            result = -1;
 80021e8:	f04f 33ff 	mov.w	r3, #4294967295
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	e001      	b.n	80021f4 <mpu_configure_fifo+0x5c>
        else
            result = 0;
 80021f0:	2300      	movs	r3, #0
 80021f2:	60fb      	str	r3, [r7, #12]
        if (sensors || st.chip_cfg.lp_accel_mode)
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d103      	bne.n	8002202 <mpu_configure_fifo+0x6a>
 80021fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002238 <mpu_configure_fifo+0xa0>)
 80021fc:	7d1b      	ldrb	r3, [r3, #20]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <mpu_configure_fifo+0x72>
            set_int_enable(1);
 8002202:	2001      	movs	r0, #1
 8002204:	f7ff f9a6 	bl	8001554 <set_int_enable>
 8002208:	e002      	b.n	8002210 <mpu_configure_fifo+0x78>
        else
            set_int_enable(0);
 800220a:	2000      	movs	r0, #0
 800220c:	f7ff f9a2 	bl	8001554 <set_int_enable>
        if (sensors) {
 8002210:	79fb      	ldrb	r3, [r7, #7]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00a      	beq.n	800222c <mpu_configure_fifo+0x94>
            if (mpu_reset_fifo()) {
 8002216:	f7ff fc8b 	bl	8001b30 <mpu_reset_fifo>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d005      	beq.n	800222c <mpu_configure_fifo+0x94>
                st.chip_cfg.fifo_enable = prev;
 8002220:	4a05      	ldr	r2, [pc, #20]	@ (8002238 <mpu_configure_fifo+0xa0>)
 8002222:	7afb      	ldrb	r3, [r7, #11]
 8002224:	7413      	strb	r3, [r2, #16]
                return -1;
 8002226:	f04f 33ff 	mov.w	r3, #4294967295
 800222a:	e000      	b.n	800222e <mpu_configure_fifo+0x96>
            }
        }
    }

    return result;
 800222c:	68fb      	ldr	r3, [r7, #12]
}
 800222e:	4618      	mov	r0, r3
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	20000000 	.word	0x20000000

0800223c <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	71fb      	strb	r3, [r7, #7]
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
 8002246:	79fb      	ldrb	r3, [r7, #7]
 8002248:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800224c:	2b00      	cmp	r3, #0
 800224e:	d002      	beq.n	8002256 <mpu_set_sensors+0x1a>
        data = INV_CLK_PLL;
 8002250:	2301      	movs	r3, #1
 8002252:	73fb      	strb	r3, [r7, #15]
 8002254:	e007      	b.n	8002266 <mpu_set_sensors+0x2a>
    else if (sensors)
 8002256:	79fb      	ldrb	r3, [r7, #7]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d002      	beq.n	8002262 <mpu_set_sensors+0x26>
        data = 0;
 800225c:	2300      	movs	r3, #0
 800225e:	73fb      	strb	r3, [r7, #15]
 8002260:	e001      	b.n	8002266 <mpu_set_sensors+0x2a>
    else
        data = BIT_SLEEP;
 8002262:	2340      	movs	r3, #64	@ 0x40
 8002264:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 8002266:	4b63      	ldr	r3, [pc, #396]	@ (80023f4 <mpu_set_sensors+0x1b8>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	7818      	ldrb	r0, [r3, #0]
 800226c:	4b61      	ldr	r3, [pc, #388]	@ (80023f4 <mpu_set_sensors+0x1b8>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	7d59      	ldrb	r1, [r3, #21]
 8002272:	f107 030f 	add.w	r3, r7, #15
 8002276:	2201      	movs	r2, #1
 8002278:	f000 fd46 	bl	8002d08 <stm32_i2c_write>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d005      	beq.n	800228e <mpu_set_sensors+0x52>
        st.chip_cfg.sensors = 0;
 8002282:	4b5c      	ldr	r3, [pc, #368]	@ (80023f4 <mpu_set_sensors+0x1b8>)
 8002284:	2200      	movs	r2, #0
 8002286:	729a      	strb	r2, [r3, #10]
        return -1;
 8002288:	f04f 33ff 	mov.w	r3, #4294967295
 800228c:	e0ae      	b.n	80023ec <mpu_set_sensors+0x1b0>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 800228e:	7bfb      	ldrb	r3, [r7, #15]
 8002290:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002294:	b2da      	uxtb	r2, r3
 8002296:	4b57      	ldr	r3, [pc, #348]	@ (80023f4 <mpu_set_sensors+0x1b8>)
 8002298:	731a      	strb	r2, [r3, #12]

    data = 0;
 800229a:	2300      	movs	r3, #0
 800229c:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_X_GYRO))
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d104      	bne.n	80022b2 <mpu_set_sensors+0x76>
        data |= BIT_STBY_XG;
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
 80022aa:	f043 0304 	orr.w	r3, r3, #4
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Y_GYRO))
 80022b2:	79fb      	ldrb	r3, [r7, #7]
 80022b4:	f003 0320 	and.w	r3, r3, #32
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d104      	bne.n	80022c6 <mpu_set_sensors+0x8a>
        data |= BIT_STBY_YG;
 80022bc:	7bfb      	ldrb	r3, [r7, #15]
 80022be:	f043 0302 	orr.w	r3, r3, #2
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Z_GYRO))
 80022c6:	79fb      	ldrb	r3, [r7, #7]
 80022c8:	f003 0310 	and.w	r3, r3, #16
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d104      	bne.n	80022da <mpu_set_sensors+0x9e>
        data |= BIT_STBY_ZG;
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
 80022d2:	f043 0301 	orr.w	r3, r3, #1
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_XYZ_ACCEL))
 80022da:	79fb      	ldrb	r3, [r7, #7]
 80022dc:	f003 0308 	and.w	r3, r3, #8
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d104      	bne.n	80022ee <mpu_set_sensors+0xb2>
        data |= BIT_STBY_XYZA;
 80022e4:	7bfb      	ldrb	r3, [r7, #15]
 80022e6:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 80022ee:	4b41      	ldr	r3, [pc, #260]	@ (80023f4 <mpu_set_sensors+0x1b8>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	7818      	ldrb	r0, [r3, #0]
 80022f4:	4b3f      	ldr	r3, [pc, #252]	@ (80023f4 <mpu_set_sensors+0x1b8>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	7d99      	ldrb	r1, [r3, #22]
 80022fa:	f107 030f 	add.w	r3, r7, #15
 80022fe:	2201      	movs	r2, #1
 8002300:	f000 fd02 	bl	8002d08 <stm32_i2c_write>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d005      	beq.n	8002316 <mpu_set_sensors+0xda>
        st.chip_cfg.sensors = 0;
 800230a:	4b3a      	ldr	r3, [pc, #232]	@ (80023f4 <mpu_set_sensors+0x1b8>)
 800230c:	2200      	movs	r2, #0
 800230e:	729a      	strb	r2, [r3, #10]
        return -1;
 8002310:	f04f 33ff 	mov.w	r3, #4294967295
 8002314:	e06a      	b.n	80023ec <mpu_set_sensors+0x1b0>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d005      	beq.n	8002328 <mpu_set_sensors+0xec>
 800231c:	79fb      	ldrb	r3, [r7, #7]
 800231e:	2b08      	cmp	r3, #8
 8002320:	d002      	beq.n	8002328 <mpu_set_sensors+0xec>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
 8002322:	2000      	movs	r0, #0
 8002324:	f000 f92e 	bl	8002584 <mpu_set_int_latched>
    if (sensors & INV_XYZ_COMPASS)
        mpu_set_bypass(1);
    else
        mpu_set_bypass(0);
#else
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 8002328:	4b32      	ldr	r3, [pc, #200]	@ (80023f4 <mpu_set_sensors+0x1b8>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	7818      	ldrb	r0, [r3, #0]
 800232e:	4b31      	ldr	r3, [pc, #196]	@ (80023f4 <mpu_set_sensors+0x1b8>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	7919      	ldrb	r1, [r3, #4]
 8002334:	f107 030e 	add.w	r3, r7, #14
 8002338:	2201      	movs	r2, #1
 800233a:	f000 fd4f 	bl	8002ddc <stm32_i2c_read>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d002      	beq.n	800234a <mpu_set_sensors+0x10e>
        return -1;
 8002344:	f04f 33ff 	mov.w	r3, #4294967295
 8002348:	e050      	b.n	80023ec <mpu_set_sensors+0x1b0>
    /* Handle AKM power management. */
    if (sensors & INV_XYZ_COMPASS) {
 800234a:	79fb      	ldrb	r3, [r7, #7]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b00      	cmp	r3, #0
 8002352:	d007      	beq.n	8002364 <mpu_set_sensors+0x128>
        data = AKM_SINGLE_MEASUREMENT;
 8002354:	2311      	movs	r3, #17
 8002356:	73fb      	strb	r3, [r7, #15]
        user_ctrl |= BIT_AUX_IF_EN;
 8002358:	7bbb      	ldrb	r3, [r7, #14]
 800235a:	f043 0320 	orr.w	r3, r3, #32
 800235e:	b2db      	uxtb	r3, r3
 8002360:	73bb      	strb	r3, [r7, #14]
 8002362:	e006      	b.n	8002372 <mpu_set_sensors+0x136>
    } else {
        data = AKM_POWER_DOWN;
 8002364:	2310      	movs	r3, #16
 8002366:	73fb      	strb	r3, [r7, #15]
        user_ctrl &= ~BIT_AUX_IF_EN;
 8002368:	7bbb      	ldrb	r3, [r7, #14]
 800236a:	f023 0320 	bic.w	r3, r3, #32
 800236e:	b2db      	uxtb	r3, r3
 8002370:	73bb      	strb	r3, [r7, #14]
    }
    if (st.chip_cfg.dmp_on)
 8002372:	4b20      	ldr	r3, [pc, #128]	@ (80023f4 <mpu_set_sensors+0x1b8>)
 8002374:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002378:	2b00      	cmp	r3, #0
 800237a:	d005      	beq.n	8002388 <mpu_set_sensors+0x14c>
        user_ctrl |= BIT_DMP_EN;
 800237c:	7bbb      	ldrb	r3, [r7, #14]
 800237e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002382:	b2db      	uxtb	r3, r3
 8002384:	73bb      	strb	r3, [r7, #14]
 8002386:	e004      	b.n	8002392 <mpu_set_sensors+0x156>
    else
        user_ctrl &= ~BIT_DMP_EN;
 8002388:	7bbb      	ldrb	r3, [r7, #14]
 800238a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800238e:	b2db      	uxtb	r3, r3
 8002390:	73bb      	strb	r3, [r7, #14]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
 8002392:	4b18      	ldr	r3, [pc, #96]	@ (80023f4 <mpu_set_sensors+0x1b8>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	7818      	ldrb	r0, [r3, #0]
 8002398:	4b16      	ldr	r3, [pc, #88]	@ (80023f4 <mpu_set_sensors+0x1b8>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f893 1026 	ldrb.w	r1, [r3, #38]	@ 0x26
 80023a0:	f107 030f 	add.w	r3, r7, #15
 80023a4:	2201      	movs	r2, #1
 80023a6:	f000 fcaf 	bl	8002d08 <stm32_i2c_write>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d002      	beq.n	80023b6 <mpu_set_sensors+0x17a>
        return -1;
 80023b0:	f04f 33ff 	mov.w	r3, #4294967295
 80023b4:	e01a      	b.n	80023ec <mpu_set_sensors+0x1b0>
    /* Enable/disable I2C master mode. */
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 80023b6:	4b0f      	ldr	r3, [pc, #60]	@ (80023f4 <mpu_set_sensors+0x1b8>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	7818      	ldrb	r0, [r3, #0]
 80023bc:	4b0d      	ldr	r3, [pc, #52]	@ (80023f4 <mpu_set_sensors+0x1b8>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	7919      	ldrb	r1, [r3, #4]
 80023c2:	f107 030e 	add.w	r3, r7, #14
 80023c6:	2201      	movs	r2, #1
 80023c8:	f000 fc9e 	bl	8002d08 <stm32_i2c_write>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d002      	beq.n	80023d8 <mpu_set_sensors+0x19c>
        return -1;
 80023d2:	f04f 33ff 	mov.w	r3, #4294967295
 80023d6:	e009      	b.n	80023ec <mpu_set_sensors+0x1b0>
#endif
#endif

    st.chip_cfg.sensors = sensors;
 80023d8:	4a06      	ldr	r2, [pc, #24]	@ (80023f4 <mpu_set_sensors+0x1b8>)
 80023da:	79fb      	ldrb	r3, [r7, #7]
 80023dc:	7293      	strb	r3, [r2, #10]
    st.chip_cfg.lp_accel_mode = 0;
 80023de:	4b05      	ldr	r3, [pc, #20]	@ (80023f4 <mpu_set_sensors+0x1b8>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
 80023e4:	2032      	movs	r0, #50	@ 0x32
 80023e6:	f000 fba3 	bl	8002b30 <stm32_delay_ms>
    return 0;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	20000000 	.word	0x20000000

080023f8 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4603      	mov	r3, r0
 8002400:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
 8002402:	4b5f      	ldr	r3, [pc, #380]	@ (8002580 <mpu_set_bypass+0x188>)
 8002404:	7c9b      	ldrb	r3, [r3, #18]
 8002406:	79fa      	ldrb	r2, [r7, #7]
 8002408:	429a      	cmp	r2, r3
 800240a:	d101      	bne.n	8002410 <mpu_set_bypass+0x18>
        return 0;
 800240c:	2300      	movs	r3, #0
 800240e:	e0b2      	b.n	8002576 <mpu_set_bypass+0x17e>

    if (bypass_on) {
 8002410:	79fb      	ldrb	r3, [r7, #7]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d050      	beq.n	80024b8 <mpu_set_bypass+0xc0>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8002416:	4b5a      	ldr	r3, [pc, #360]	@ (8002580 <mpu_set_bypass+0x188>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	7818      	ldrb	r0, [r3, #0]
 800241c:	4b58      	ldr	r3, [pc, #352]	@ (8002580 <mpu_set_bypass+0x188>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	7919      	ldrb	r1, [r3, #4]
 8002422:	f107 030f 	add.w	r3, r7, #15
 8002426:	2201      	movs	r2, #1
 8002428:	f000 fcd8 	bl	8002ddc <stm32_i2c_read>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d002      	beq.n	8002438 <mpu_set_bypass+0x40>
            return -1;
 8002432:	f04f 33ff 	mov.w	r3, #4294967295
 8002436:	e09e      	b.n	8002576 <mpu_set_bypass+0x17e>
        tmp &= ~BIT_AUX_IF_EN;
 8002438:	7bfb      	ldrb	r3, [r7, #15]
 800243a:	f023 0320 	bic.w	r3, r3, #32
 800243e:	b2db      	uxtb	r3, r3
 8002440:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8002442:	4b4f      	ldr	r3, [pc, #316]	@ (8002580 <mpu_set_bypass+0x188>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	7818      	ldrb	r0, [r3, #0]
 8002448:	4b4d      	ldr	r3, [pc, #308]	@ (8002580 <mpu_set_bypass+0x188>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	7919      	ldrb	r1, [r3, #4]
 800244e:	f107 030f 	add.w	r3, r7, #15
 8002452:	2201      	movs	r2, #1
 8002454:	f000 fc58 	bl	8002d08 <stm32_i2c_write>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d002      	beq.n	8002464 <mpu_set_bypass+0x6c>
            return -1;
 800245e:	f04f 33ff 	mov.w	r3, #4294967295
 8002462:	e088      	b.n	8002576 <mpu_set_bypass+0x17e>
        delay_ms(3);
 8002464:	2003      	movs	r0, #3
 8002466:	f000 fb63 	bl	8002b30 <stm32_delay_ms>
        tmp = BIT_BYPASS_EN;
 800246a:	2302      	movs	r3, #2
 800246c:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.active_low_int)
 800246e:	4b44      	ldr	r3, [pc, #272]	@ (8002580 <mpu_set_bypass+0x188>)
 8002470:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8002474:	2b00      	cmp	r3, #0
 8002476:	d004      	beq.n	8002482 <mpu_set_bypass+0x8a>
            tmp |= BIT_ACTL;
 8002478:	7bfb      	ldrb	r3, [r7, #15]
 800247a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800247e:	b2db      	uxtb	r3, r3
 8002480:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 8002482:	4b3f      	ldr	r3, [pc, #252]	@ (8002580 <mpu_set_bypass+0x188>)
 8002484:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8002488:	2b00      	cmp	r3, #0
 800248a:	d004      	beq.n	8002496 <mpu_set_bypass+0x9e>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 800248c:	7bfb      	ldrb	r3, [r7, #15]
 800248e:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8002492:	b2db      	uxtb	r3, r3
 8002494:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8002496:	4b3a      	ldr	r3, [pc, #232]	@ (8002580 <mpu_set_bypass+0x188>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	7818      	ldrb	r0, [r3, #0]
 800249c:	4b38      	ldr	r3, [pc, #224]	@ (8002580 <mpu_set_bypass+0x188>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	7dd9      	ldrb	r1, [r3, #23]
 80024a2:	f107 030f 	add.w	r3, r7, #15
 80024a6:	2201      	movs	r2, #1
 80024a8:	f000 fc2e 	bl	8002d08 <stm32_i2c_write>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d05d      	beq.n	800256e <mpu_set_bypass+0x176>
            return -1;
 80024b2:	f04f 33ff 	mov.w	r3, #4294967295
 80024b6:	e05e      	b.n	8002576 <mpu_set_bypass+0x17e>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80024b8:	4b31      	ldr	r3, [pc, #196]	@ (8002580 <mpu_set_bypass+0x188>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	7818      	ldrb	r0, [r3, #0]
 80024be:	4b30      	ldr	r3, [pc, #192]	@ (8002580 <mpu_set_bypass+0x188>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	7919      	ldrb	r1, [r3, #4]
 80024c4:	f107 030f 	add.w	r3, r7, #15
 80024c8:	2201      	movs	r2, #1
 80024ca:	f000 fc87 	bl	8002ddc <stm32_i2c_read>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d002      	beq.n	80024da <mpu_set_bypass+0xe2>
            return -1;
 80024d4:	f04f 33ff 	mov.w	r3, #4294967295
 80024d8:	e04d      	b.n	8002576 <mpu_set_bypass+0x17e>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 80024da:	4b29      	ldr	r3, [pc, #164]	@ (8002580 <mpu_set_bypass+0x188>)
 80024dc:	7a9b      	ldrb	r3, [r3, #10]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d005      	beq.n	80024f2 <mpu_set_bypass+0xfa>
            tmp |= BIT_AUX_IF_EN;
 80024e6:	7bfb      	ldrb	r3, [r7, #15]
 80024e8:	f043 0320 	orr.w	r3, r3, #32
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	73fb      	strb	r3, [r7, #15]
 80024f0:	e004      	b.n	80024fc <mpu_set_bypass+0x104>
        else
            tmp &= ~BIT_AUX_IF_EN;
 80024f2:	7bfb      	ldrb	r3, [r7, #15]
 80024f4:	f023 0320 	bic.w	r3, r3, #32
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80024fc:	4b20      	ldr	r3, [pc, #128]	@ (8002580 <mpu_set_bypass+0x188>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	7818      	ldrb	r0, [r3, #0]
 8002502:	4b1f      	ldr	r3, [pc, #124]	@ (8002580 <mpu_set_bypass+0x188>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	7919      	ldrb	r1, [r3, #4]
 8002508:	f107 030f 	add.w	r3, r7, #15
 800250c:	2201      	movs	r2, #1
 800250e:	f000 fbfb 	bl	8002d08 <stm32_i2c_write>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d002      	beq.n	800251e <mpu_set_bypass+0x126>
            return -1;
 8002518:	f04f 33ff 	mov.w	r3, #4294967295
 800251c:	e02b      	b.n	8002576 <mpu_set_bypass+0x17e>
        delay_ms(3);
 800251e:	2003      	movs	r0, #3
 8002520:	f000 fb06 	bl	8002b30 <stm32_delay_ms>
        if (st.chip_cfg.active_low_int)
 8002524:	4b16      	ldr	r3, [pc, #88]	@ (8002580 <mpu_set_bypass+0x188>)
 8002526:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800252a:	2b00      	cmp	r3, #0
 800252c:	d002      	beq.n	8002534 <mpu_set_bypass+0x13c>
            tmp = BIT_ACTL;
 800252e:	2380      	movs	r3, #128	@ 0x80
 8002530:	73fb      	strb	r3, [r7, #15]
 8002532:	e001      	b.n	8002538 <mpu_set_bypass+0x140>
        else
            tmp = 0;
 8002534:	2300      	movs	r3, #0
 8002536:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 8002538:	4b11      	ldr	r3, [pc, #68]	@ (8002580 <mpu_set_bypass+0x188>)
 800253a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800253e:	2b00      	cmp	r3, #0
 8002540:	d004      	beq.n	800254c <mpu_set_bypass+0x154>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8002542:	7bfb      	ldrb	r3, [r7, #15]
 8002544:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8002548:	b2db      	uxtb	r3, r3
 800254a:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 800254c:	4b0c      	ldr	r3, [pc, #48]	@ (8002580 <mpu_set_bypass+0x188>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	7818      	ldrb	r0, [r3, #0]
 8002552:	4b0b      	ldr	r3, [pc, #44]	@ (8002580 <mpu_set_bypass+0x188>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	7dd9      	ldrb	r1, [r3, #23]
 8002558:	f107 030f 	add.w	r3, r7, #15
 800255c:	2201      	movs	r2, #1
 800255e:	f000 fbd3 	bl	8002d08 <stm32_i2c_write>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d002      	beq.n	800256e <mpu_set_bypass+0x176>
            return -1;
 8002568:	f04f 33ff 	mov.w	r3, #4294967295
 800256c:	e003      	b.n	8002576 <mpu_set_bypass+0x17e>
    }
    st.chip_cfg.bypass_mode = bypass_on;
 800256e:	4a04      	ldr	r2, [pc, #16]	@ (8002580 <mpu_set_bypass+0x188>)
 8002570:	79fb      	ldrb	r3, [r7, #7]
 8002572:	7493      	strb	r3, [r2, #18]
    return 0;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20000000 	.word	0x20000000

08002584 <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	4603      	mov	r3, r0
 800258c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
 800258e:	4b1e      	ldr	r3, [pc, #120]	@ (8002608 <mpu_set_int_latched+0x84>)
 8002590:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8002594:	79fa      	ldrb	r2, [r7, #7]
 8002596:	429a      	cmp	r2, r3
 8002598:	d101      	bne.n	800259e <mpu_set_int_latched+0x1a>
        return 0;
 800259a:	2300      	movs	r3, #0
 800259c:	e030      	b.n	8002600 <mpu_set_int_latched+0x7c>

    if (enable)
 800259e:	79fb      	ldrb	r3, [r7, #7]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d002      	beq.n	80025aa <mpu_set_int_latched+0x26>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 80025a4:	2330      	movs	r3, #48	@ 0x30
 80025a6:	73fb      	strb	r3, [r7, #15]
 80025a8:	e001      	b.n	80025ae <mpu_set_int_latched+0x2a>
    else
        tmp = 0;
 80025aa:	2300      	movs	r3, #0
 80025ac:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.bypass_mode)
 80025ae:	4b16      	ldr	r3, [pc, #88]	@ (8002608 <mpu_set_int_latched+0x84>)
 80025b0:	7c9b      	ldrb	r3, [r3, #18]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d004      	beq.n	80025c0 <mpu_set_int_latched+0x3c>
        tmp |= BIT_BYPASS_EN;
 80025b6:	7bfb      	ldrb	r3, [r7, #15]
 80025b8:	f043 0302 	orr.w	r3, r3, #2
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.active_low_int)
 80025c0:	4b11      	ldr	r3, [pc, #68]	@ (8002608 <mpu_set_int_latched+0x84>)
 80025c2:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d004      	beq.n	80025d4 <mpu_set_int_latched+0x50>
        tmp |= BIT_ACTL;
 80025ca:	7bfb      	ldrb	r3, [r7, #15]
 80025cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 80025d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002608 <mpu_set_int_latched+0x84>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	7818      	ldrb	r0, [r3, #0]
 80025da:	4b0b      	ldr	r3, [pc, #44]	@ (8002608 <mpu_set_int_latched+0x84>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	7dd9      	ldrb	r1, [r3, #23]
 80025e0:	f107 030f 	add.w	r3, r7, #15
 80025e4:	2201      	movs	r2, #1
 80025e6:	f000 fb8f 	bl	8002d08 <stm32_i2c_write>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d002      	beq.n	80025f6 <mpu_set_int_latched+0x72>
        return -1;
 80025f0:	f04f 33ff 	mov.w	r3, #4294967295
 80025f4:	e004      	b.n	8002600 <mpu_set_int_latched+0x7c>
    st.chip_cfg.latched_int = enable;
 80025f6:	4a04      	ldr	r2, [pc, #16]	@ (8002608 <mpu_set_int_latched+0x84>)
 80025f8:	79fb      	ldrb	r3, [r7, #7]
 80025fa:	f882 3023 	strb.w	r3, [r2, #35]	@ 0x23
    return 0;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	20000000 	.word	0x20000000

0800260c <setup_compass>:
}

#ifdef AK89xx_SECONDARY
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);
 8002612:	2001      	movs	r0, #1
 8002614:	f7ff fef0 	bl	80023f8 <mpu_set_bypass>

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
 8002618:	230c      	movs	r3, #12
 800261a:	73fb      	strb	r3, [r7, #15]
 800261c:	e00f      	b.n	800263e <setup_compass+0x32>
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
 800261e:	1d3b      	adds	r3, r7, #4
 8002620:	7bf8      	ldrb	r0, [r7, #15]
 8002622:	2201      	movs	r2, #1
 8002624:	2100      	movs	r1, #0
 8002626:	f000 fbd9 	bl	8002ddc <stm32_i2c_read>
 800262a:	60b8      	str	r0, [r7, #8]
        if (!result && (data[0] == AKM_WHOAMI))
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d102      	bne.n	8002638 <setup_compass+0x2c>
 8002632:	793b      	ldrb	r3, [r7, #4]
 8002634:	2b48      	cmp	r3, #72	@ 0x48
 8002636:	d006      	beq.n	8002646 <setup_compass+0x3a>
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
 8002638:	7bfb      	ldrb	r3, [r7, #15]
 800263a:	3301      	adds	r3, #1
 800263c:	73fb      	strb	r3, [r7, #15]
 800263e:	7bfb      	ldrb	r3, [r7, #15]
 8002640:	2b0f      	cmp	r3, #15
 8002642:	d9ec      	bls.n	800261e <setup_compass+0x12>
 8002644:	e000      	b.n	8002648 <setup_compass+0x3c>
            break;
 8002646:	bf00      	nop
    }

    if (akm_addr > 0x0F) {
 8002648:	7bfb      	ldrb	r3, [r7, #15]
 800264a:	2b0f      	cmp	r3, #15
 800264c:	d902      	bls.n	8002654 <setup_compass+0x48>
        /* TODO: Handle this case in all compass-related functions. */
        return -1;
 800264e:	f04f 33ff 	mov.w	r3, #4294967295
 8002652:	e10f      	b.n	8002874 <setup_compass+0x268>
    }

    st.chip_cfg.compass_addr = akm_addr;
 8002654:	4a89      	ldr	r2, [pc, #548]	@ (800287c <setup_compass+0x270>)
 8002656:	7bfb      	ldrb	r3, [r7, #15]
 8002658:	f882 302a 	strb.w	r3, [r2, #42]	@ 0x2a

    data[0] = AKM_POWER_DOWN;
 800265c:	2310      	movs	r3, #16
 800265e:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8002660:	4b86      	ldr	r3, [pc, #536]	@ (800287c <setup_compass+0x270>)
 8002662:	f893 002a 	ldrb.w	r0, [r3, #42]	@ 0x2a
 8002666:	1d3b      	adds	r3, r7, #4
 8002668:	2201      	movs	r2, #1
 800266a:	210a      	movs	r1, #10
 800266c:	f000 fb4c 	bl	8002d08 <stm32_i2c_write>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d002      	beq.n	800267c <setup_compass+0x70>
        return -1;
 8002676:	f04f 33ff 	mov.w	r3, #4294967295
 800267a:	e0fb      	b.n	8002874 <setup_compass+0x268>
    delay_ms(1);
 800267c:	2001      	movs	r0, #1
 800267e:	f000 fa57 	bl	8002b30 <stm32_delay_ms>

    data[0] = AKM_FUSE_ROM_ACCESS;
 8002682:	231f      	movs	r3, #31
 8002684:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8002686:	4b7d      	ldr	r3, [pc, #500]	@ (800287c <setup_compass+0x270>)
 8002688:	f893 002a 	ldrb.w	r0, [r3, #42]	@ 0x2a
 800268c:	1d3b      	adds	r3, r7, #4
 800268e:	2201      	movs	r2, #1
 8002690:	210a      	movs	r1, #10
 8002692:	f000 fb39 	bl	8002d08 <stm32_i2c_write>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d002      	beq.n	80026a2 <setup_compass+0x96>
        return -1;
 800269c:	f04f 33ff 	mov.w	r3, #4294967295
 80026a0:	e0e8      	b.n	8002874 <setup_compass+0x268>
    delay_ms(1);
 80026a2:	2001      	movs	r0, #1
 80026a4:	f000 fa44 	bl	8002b30 <stm32_delay_ms>

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
 80026a8:	4b74      	ldr	r3, [pc, #464]	@ (800287c <setup_compass+0x270>)
 80026aa:	f893 002a 	ldrb.w	r0, [r3, #42]	@ 0x2a
 80026ae:	1d3b      	adds	r3, r7, #4
 80026b0:	2203      	movs	r2, #3
 80026b2:	2110      	movs	r1, #16
 80026b4:	f000 fb92 	bl	8002ddc <stm32_i2c_read>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d002      	beq.n	80026c4 <setup_compass+0xb8>
        return -1;
 80026be:	f04f 33ff 	mov.w	r3, #4294967295
 80026c2:	e0d7      	b.n	8002874 <setup_compass+0x268>
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
 80026c4:	793b      	ldrb	r3, [r7, #4]
 80026c6:	3380      	adds	r3, #128	@ 0x80
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	b21a      	sxth	r2, r3
 80026cc:	4b6b      	ldr	r3, [pc, #428]	@ (800287c <setup_compass+0x270>)
 80026ce:	859a      	strh	r2, [r3, #44]	@ 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
 80026d0:	797b      	ldrb	r3, [r7, #5]
 80026d2:	3380      	adds	r3, #128	@ 0x80
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	b21a      	sxth	r2, r3
 80026d8:	4b68      	ldr	r3, [pc, #416]	@ (800287c <setup_compass+0x270>)
 80026da:	85da      	strh	r2, [r3, #46]	@ 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
 80026dc:	79bb      	ldrb	r3, [r7, #6]
 80026de:	3380      	adds	r3, #128	@ 0x80
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	b21a      	sxth	r2, r3
 80026e4:	4b65      	ldr	r3, [pc, #404]	@ (800287c <setup_compass+0x270>)
 80026e6:	861a      	strh	r2, [r3, #48]	@ 0x30

    data[0] = AKM_POWER_DOWN;
 80026e8:	2310      	movs	r3, #16
 80026ea:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 80026ec:	4b63      	ldr	r3, [pc, #396]	@ (800287c <setup_compass+0x270>)
 80026ee:	f893 002a 	ldrb.w	r0, [r3, #42]	@ 0x2a
 80026f2:	1d3b      	adds	r3, r7, #4
 80026f4:	2201      	movs	r2, #1
 80026f6:	210a      	movs	r1, #10
 80026f8:	f000 fb06 	bl	8002d08 <stm32_i2c_write>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d002      	beq.n	8002708 <setup_compass+0xfc>
        return -1;
 8002702:	f04f 33ff 	mov.w	r3, #4294967295
 8002706:	e0b5      	b.n	8002874 <setup_compass+0x268>
    delay_ms(1);
 8002708:	2001      	movs	r0, #1
 800270a:	f000 fa11 	bl	8002b30 <stm32_delay_ms>

    mpu_set_bypass(0);
 800270e:	2000      	movs	r0, #0
 8002710:	f7ff fe72 	bl	80023f8 <mpu_set_bypass>

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
 8002714:	2340      	movs	r3, #64	@ 0x40
 8002716:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 8002718:	4b58      	ldr	r3, [pc, #352]	@ (800287c <setup_compass+0x270>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	7818      	ldrb	r0, [r3, #0]
 800271e:	4b57      	ldr	r3, [pc, #348]	@ (800287c <setup_compass+0x270>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	7e99      	ldrb	r1, [r3, #26]
 8002724:	1d3b      	adds	r3, r7, #4
 8002726:	2201      	movs	r2, #1
 8002728:	f000 faee 	bl	8002d08 <stm32_i2c_write>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d002      	beq.n	8002738 <setup_compass+0x12c>
        return -1;
 8002732:	f04f 33ff 	mov.w	r3, #4294967295
 8002736:	e09d      	b.n	8002874 <setup_compass+0x268>

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
 8002738:	4b50      	ldr	r3, [pc, #320]	@ (800287c <setup_compass+0x270>)
 800273a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800273e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002742:	b2db      	uxtb	r3, r3
 8002744:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
 8002746:	4b4d      	ldr	r3, [pc, #308]	@ (800287c <setup_compass+0x270>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	7818      	ldrb	r0, [r3, #0]
 800274c:	4b4b      	ldr	r3, [pc, #300]	@ (800287c <setup_compass+0x270>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	7f99      	ldrb	r1, [r3, #30]
 8002752:	1d3b      	adds	r3, r7, #4
 8002754:	2201      	movs	r2, #1
 8002756:	f000 fad7 	bl	8002d08 <stm32_i2c_write>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d002      	beq.n	8002766 <setup_compass+0x15a>
        return -1;
 8002760:	f04f 33ff 	mov.w	r3, #4294967295
 8002764:	e086      	b.n	8002874 <setup_compass+0x268>

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
 8002766:	2302      	movs	r3, #2
 8002768:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
 800276a:	4b44      	ldr	r3, [pc, #272]	@ (800287c <setup_compass+0x270>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	7818      	ldrb	r0, [r3, #0]
 8002770:	4b42      	ldr	r3, [pc, #264]	@ (800287c <setup_compass+0x270>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	7fd9      	ldrb	r1, [r3, #31]
 8002776:	1d3b      	adds	r3, r7, #4
 8002778:	2201      	movs	r2, #1
 800277a:	f000 fac5 	bl	8002d08 <stm32_i2c_write>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d002      	beq.n	800278a <setup_compass+0x17e>
        return -1;
 8002784:	f04f 33ff 	mov.w	r3, #4294967295
 8002788:	e074      	b.n	8002874 <setup_compass+0x268>

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
 800278a:	2388      	movs	r3, #136	@ 0x88
 800278c:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
 800278e:	4b3b      	ldr	r3, [pc, #236]	@ (800287c <setup_compass+0x270>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	7818      	ldrb	r0, [r3, #0]
 8002794:	4b39      	ldr	r3, [pc, #228]	@ (800287c <setup_compass+0x270>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f893 1020 	ldrb.w	r1, [r3, #32]
 800279c:	1d3b      	adds	r3, r7, #4
 800279e:	2201      	movs	r2, #1
 80027a0:	f000 fab2 	bl	8002d08 <stm32_i2c_write>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d002      	beq.n	80027b0 <setup_compass+0x1a4>
        return -1;
 80027aa:	f04f 33ff 	mov.w	r3, #4294967295
 80027ae:	e061      	b.n	8002874 <setup_compass+0x268>

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
 80027b0:	4b32      	ldr	r3, [pc, #200]	@ (800287c <setup_compass+0x270>)
 80027b2:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80027b6:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
 80027b8:	4b30      	ldr	r3, [pc, #192]	@ (800287c <setup_compass+0x270>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	7818      	ldrb	r0, [r3, #0]
 80027be:	4b2f      	ldr	r3, [pc, #188]	@ (800287c <setup_compass+0x270>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f893 1021 	ldrb.w	r1, [r3, #33]	@ 0x21
 80027c6:	1d3b      	adds	r3, r7, #4
 80027c8:	2201      	movs	r2, #1
 80027ca:	f000 fa9d 	bl	8002d08 <stm32_i2c_write>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d002      	beq.n	80027da <setup_compass+0x1ce>
        return -1;
 80027d4:	f04f 33ff 	mov.w	r3, #4294967295
 80027d8:	e04c      	b.n	8002874 <setup_compass+0x268>

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
 80027da:	230a      	movs	r3, #10
 80027dc:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
 80027de:	4b27      	ldr	r3, [pc, #156]	@ (800287c <setup_compass+0x270>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	7818      	ldrb	r0, [r3, #0]
 80027e4:	4b25      	ldr	r3, [pc, #148]	@ (800287c <setup_compass+0x270>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f893 1022 	ldrb.w	r1, [r3, #34]	@ 0x22
 80027ec:	1d3b      	adds	r3, r7, #4
 80027ee:	2201      	movs	r2, #1
 80027f0:	f000 fa8a 	bl	8002d08 <stm32_i2c_write>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d002      	beq.n	8002800 <setup_compass+0x1f4>
        return -1;
 80027fa:	f04f 33ff 	mov.w	r3, #4294967295
 80027fe:	e039      	b.n	8002874 <setup_compass+0x268>

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
 8002800:	2381      	movs	r3, #129	@ 0x81
 8002802:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
 8002804:	4b1d      	ldr	r3, [pc, #116]	@ (800287c <setup_compass+0x270>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	7818      	ldrb	r0, [r3, #0]
 800280a:	4b1c      	ldr	r3, [pc, #112]	@ (800287c <setup_compass+0x270>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f893 1023 	ldrb.w	r1, [r3, #35]	@ 0x23
 8002812:	1d3b      	adds	r3, r7, #4
 8002814:	2201      	movs	r2, #1
 8002816:	f000 fa77 	bl	8002d08 <stm32_i2c_write>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d002      	beq.n	8002826 <setup_compass+0x21a>
        return -1;
 8002820:	f04f 33ff 	mov.w	r3, #4294967295
 8002824:	e026      	b.n	8002874 <setup_compass+0x268>

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
 8002826:	2311      	movs	r3, #17
 8002828:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
 800282a:	4b14      	ldr	r3, [pc, #80]	@ (800287c <setup_compass+0x270>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	7818      	ldrb	r0, [r3, #0]
 8002830:	4b12      	ldr	r3, [pc, #72]	@ (800287c <setup_compass+0x270>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f893 1026 	ldrb.w	r1, [r3, #38]	@ 0x26
 8002838:	1d3b      	adds	r3, r7, #4
 800283a:	2201      	movs	r2, #1
 800283c:	f000 fa64 	bl	8002d08 <stm32_i2c_write>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d002      	beq.n	800284c <setup_compass+0x240>
        return -1;
 8002846:	f04f 33ff 	mov.w	r3, #4294967295
 800284a:	e013      	b.n	8002874 <setup_compass+0x268>

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
 800284c:	2303      	movs	r3, #3
 800284e:	713b      	strb	r3, [r7, #4]
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
 8002850:	4b0a      	ldr	r3, [pc, #40]	@ (800287c <setup_compass+0x270>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	7818      	ldrb	r0, [r3, #0]
 8002856:	4b09      	ldr	r3, [pc, #36]	@ (800287c <setup_compass+0x270>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f893 1027 	ldrb.w	r1, [r3, #39]	@ 0x27
 800285e:	1d3b      	adds	r3, r7, #4
 8002860:	2201      	movs	r2, #1
 8002862:	f000 fa51 	bl	8002d08 <stm32_i2c_write>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d002      	beq.n	8002872 <setup_compass+0x266>
        return -1;
 800286c:	f04f 33ff 	mov.w	r3, #4294967295
 8002870:	e000      	b.n	8002874 <setup_compass+0x268>
    data[0] = BIT_I2C_MST_VDDIO;
    if (i2c_write(st.hw->addr, st.reg->yg_offs_tc, 1, data))
        return -1;
#endif

    return 0;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	20000000 	.word	0x20000000

08002880 <mpu_get_compass_reg>:
 *  @param[out] data        Raw data in hardware units.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_compass_reg(short *data, unsigned long *timestamp)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
#ifdef AK89xx_SECONDARY
    unsigned char tmp[9];

    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 800288a:	4b42      	ldr	r3, [pc, #264]	@ (8002994 <mpu_get_compass_reg+0x114>)
 800288c:	7a9b      	ldrb	r3, [r3, #10]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d102      	bne.n	800289c <mpu_get_compass_reg+0x1c>
        return -1;
 8002896:	f04f 33ff 	mov.w	r3, #4294967295
 800289a:	e077      	b.n	800298c <mpu_get_compass_reg+0x10c>
        return -1;
    tmp[8] = AKM_SINGLE_MEASUREMENT;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, tmp+8))
        return -1;
#else
    if (i2c_read(st.hw->addr, st.reg->raw_compass, 8, tmp))
 800289c:	4b3d      	ldr	r3, [pc, #244]	@ (8002994 <mpu_get_compass_reg+0x114>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	7818      	ldrb	r0, [r3, #0]
 80028a2:	4b3c      	ldr	r3, [pc, #240]	@ (8002994 <mpu_get_compass_reg+0x114>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f893 1028 	ldrb.w	r1, [r3, #40]	@ 0x28
 80028aa:	f107 030c 	add.w	r3, r7, #12
 80028ae:	2208      	movs	r2, #8
 80028b0:	f000 fa94 	bl	8002ddc <stm32_i2c_read>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d002      	beq.n	80028c0 <mpu_get_compass_reg+0x40>
        return -1;
 80028ba:	f04f 33ff 	mov.w	r3, #4294967295
 80028be:	e065      	b.n	800298c <mpu_get_compass_reg+0x10c>
        return -2;
    if ((tmp[7] & AKM_OVERFLOW) || (tmp[7] & AKM_DATA_ERROR))
        return -3;
#elif defined AK8963_SECONDARY
    /* AK8963 doesn't have the data read error bit. */
    if (!(tmp[0] & AKM_DATA_READY) || (tmp[0] & AKM_DATA_OVERRUN))
 80028c0:	7b3b      	ldrb	r3, [r7, #12]
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d004      	beq.n	80028d4 <mpu_get_compass_reg+0x54>
 80028ca:	7b3b      	ldrb	r3, [r7, #12]
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d002      	beq.n	80028da <mpu_get_compass_reg+0x5a>
        return -2;
 80028d4:	f06f 0301 	mvn.w	r3, #1
 80028d8:	e058      	b.n	800298c <mpu_get_compass_reg+0x10c>
    if (tmp[7] & AKM_OVERFLOW)
 80028da:	7cfb      	ldrb	r3, [r7, #19]
 80028dc:	b25b      	sxtb	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	da02      	bge.n	80028e8 <mpu_get_compass_reg+0x68>
        return -3;
 80028e2:	f06f 0302 	mvn.w	r3, #2
 80028e6:	e051      	b.n	800298c <mpu_get_compass_reg+0x10c>
#endif
    data[0] = (tmp[2] << 8) | tmp[1];
 80028e8:	7bbb      	ldrb	r3, [r7, #14]
 80028ea:	b21b      	sxth	r3, r3
 80028ec:	021b      	lsls	r3, r3, #8
 80028ee:	b21a      	sxth	r2, r3
 80028f0:	7b7b      	ldrb	r3, [r7, #13]
 80028f2:	b21b      	sxth	r3, r3
 80028f4:	4313      	orrs	r3, r2
 80028f6:	b21a      	sxth	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	801a      	strh	r2, [r3, #0]
    data[1] = (tmp[4] << 8) | tmp[3];
 80028fc:	7c3b      	ldrb	r3, [r7, #16]
 80028fe:	b21b      	sxth	r3, r3
 8002900:	021b      	lsls	r3, r3, #8
 8002902:	b219      	sxth	r1, r3
 8002904:	7bfb      	ldrb	r3, [r7, #15]
 8002906:	b21a      	sxth	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3302      	adds	r3, #2
 800290c:	430a      	orrs	r2, r1
 800290e:	b212      	sxth	r2, r2
 8002910:	801a      	strh	r2, [r3, #0]
    data[2] = (tmp[6] << 8) | tmp[5];
 8002912:	7cbb      	ldrb	r3, [r7, #18]
 8002914:	b21b      	sxth	r3, r3
 8002916:	021b      	lsls	r3, r3, #8
 8002918:	b219      	sxth	r1, r3
 800291a:	7c7b      	ldrb	r3, [r7, #17]
 800291c:	b21a      	sxth	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	3304      	adds	r3, #4
 8002922:	430a      	orrs	r2, r1
 8002924:	b212      	sxth	r2, r2
 8002926:	801a      	strh	r2, [r3, #0]

    data[0] = ((long)data[0] * st.chip_cfg.mag_sens_adj[0]) >> 8;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800292e:	461a      	mov	r2, r3
 8002930:	4b18      	ldr	r3, [pc, #96]	@ (8002994 <mpu_get_compass_reg+0x114>)
 8002932:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8002936:	fb02 f303 	mul.w	r3, r2, r3
 800293a:	121b      	asrs	r3, r3, #8
 800293c:	b21a      	sxth	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	801a      	strh	r2, [r3, #0]
    data[1] = ((long)data[1] * st.chip_cfg.mag_sens_adj[1]) >> 8;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	3302      	adds	r3, #2
 8002946:	f9b3 3000 	ldrsh.w	r3, [r3]
 800294a:	461a      	mov	r2, r3
 800294c:	4b11      	ldr	r3, [pc, #68]	@ (8002994 <mpu_get_compass_reg+0x114>)
 800294e:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 8002952:	fb02 f303 	mul.w	r3, r2, r3
 8002956:	121a      	asrs	r2, r3, #8
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3302      	adds	r3, #2
 800295c:	b212      	sxth	r2, r2
 800295e:	801a      	strh	r2, [r3, #0]
    data[2] = ((long)data[2] * st.chip_cfg.mag_sens_adj[2]) >> 8;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3304      	adds	r3, #4
 8002964:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002968:	461a      	mov	r2, r3
 800296a:	4b0a      	ldr	r3, [pc, #40]	@ (8002994 <mpu_get_compass_reg+0x114>)
 800296c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8002970:	fb02 f303 	mul.w	r3, r2, r3
 8002974:	121a      	asrs	r2, r3, #8
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	3304      	adds	r3, #4
 800297a:	b212      	sxth	r2, r2
 800297c:	801a      	strh	r2, [r3, #0]

    if (timestamp)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d002      	beq.n	800298a <mpu_get_compass_reg+0x10a>
        get_ms(timestamp);
 8002984:	6838      	ldr	r0, [r7, #0]
 8002986:	f000 f8c5 	bl	8002b14 <stm32_get_clock_ms>
    return 0;
 800298a:	2300      	movs	r3, #0
#else
    return -1;
#endif
}
 800298c:	4618      	mov	r0, r3
 800298e:	3718      	adds	r7, #24
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	20000000 	.word	0x20000000

08002998 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800299c:	f000 fb48 	bl	8003030 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029a0:	f000 f826 	bl	80029f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029a4:	f000 f88e 	bl	8002ac4 <MX_GPIO_Init>
  MX_I2C2_Init();
 80029a8:	f000 f85e 	bl	8002a68 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  // Ya incluye correcta inicialización del magnetómetro, no lo deja en modo ByPass
  MPU9250_begin();
 80029ac:	f7fe fb70 	bl	8001090 <MPU9250_begin>
  // Configurar giroscopio ±250°/s
  MPU9250_setGyroFSR(250);
 80029b0:	20fa      	movs	r0, #250	@ 0xfa
 80029b2:	f7fe fb95 	bl	80010e0 <MPU9250_setGyroFSR>
  MPU9250_setSampleRate(50); //Sample Rate de acc y gyro en 50Hz
 80029b6:	2032      	movs	r0, #50	@ 0x32
 80029b8:	f7fe fbac 	bl	8001114 <MPU9250_setSampleRate>
  MPU9250_setCompassSampleRate(100);
 80029bc:	2064      	movs	r0, #100	@ 0x64
 80029be:	f7fe fbb7 	bl	8001130 <MPU9250_setCompassSampleRate>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(MPU9250_dataReady()){
 80029c2:	f7fe fbf4 	bl	80011ae <MPU9250_dataReady>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0fa      	beq.n	80029c2 <main+0x2a>
		  MPU9250_update(UPDATE_ACCEL | UPDATE_GYRO | UPDATE_COMPASS);
 80029cc:	200e      	movs	r0, #14
 80029ce:	f7fe fc07 	bl	80011e0 <MPU9250_update>
		  MPU9250_computeCompassHeading();
 80029d2:	f7fe fce9 	bl	80013a8 <MPU9250_computeCompassHeading>
		  //MPU9250_computeEulerAngles(true);
		  //MPU9250_dmpUpdateFifo();
		 ax_calc = MPU9250_calcAccel(ax);
 80029d6:	4b04      	ldr	r3, [pc, #16]	@ (80029e8 <main+0x50>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fe fcc4 	bl	8001368 <MPU9250_calcAccel>
 80029e0:	4603      	mov	r3, r0
 80029e2:	4a02      	ldr	r2, [pc, #8]	@ (80029ec <main+0x54>)
 80029e4:	6013      	str	r3, [r2, #0]
	  if(MPU9250_dataReady()){
 80029e6:	e7ec      	b.n	80029c2 <main+0x2a>
 80029e8:	20000068 	.word	0x20000068
 80029ec:	200000ec 	.word	0x200000ec

080029f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b090      	sub	sp, #64	@ 0x40
 80029f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029f6:	f107 0318 	add.w	r3, r7, #24
 80029fa:	2228      	movs	r2, #40	@ 0x28
 80029fc:	2100      	movs	r1, #0
 80029fe:	4618      	mov	r0, r3
 8002a00:	f002 fb50 	bl	80050a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a04:	1d3b      	adds	r3, r7, #4
 8002a06:	2200      	movs	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	605a      	str	r2, [r3, #4]
 8002a0c:	609a      	str	r2, [r3, #8]
 8002a0e:	60da      	str	r2, [r3, #12]
 8002a10:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a12:	2302      	movs	r3, #2
 8002a14:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a16:	2301      	movs	r3, #1
 8002a18:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a1a:	2310      	movs	r3, #16
 8002a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a22:	f107 0318 	add.w	r3, r7, #24
 8002a26:	4618      	mov	r0, r3
 8002a28:	f001 ff40 	bl	80048ac <HAL_RCC_OscConfig>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8002a32:	f000 f869 	bl	8002b08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a36:	230f      	movs	r3, #15
 8002a38:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a42:	2300      	movs	r3, #0
 8002a44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a46:	2300      	movs	r3, #0
 8002a48:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002a4a:	1d3b      	adds	r3, r7, #4
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f002 f9ae 	bl	8004db0 <HAL_RCC_ClockConfig>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002a5a:	f000 f855 	bl	8002b08 <Error_Handler>
  }
}
 8002a5e:	bf00      	nop
 8002a60:	3740      	adds	r7, #64	@ 0x40
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
	...

08002a68 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002a6c:	4b12      	ldr	r3, [pc, #72]	@ (8002ab8 <MX_I2C2_Init+0x50>)
 8002a6e:	4a13      	ldr	r2, [pc, #76]	@ (8002abc <MX_I2C2_Init+0x54>)
 8002a70:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002a72:	4b11      	ldr	r3, [pc, #68]	@ (8002ab8 <MX_I2C2_Init+0x50>)
 8002a74:	4a12      	ldr	r2, [pc, #72]	@ (8002ac0 <MX_I2C2_Init+0x58>)
 8002a76:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002a78:	4b0f      	ldr	r3, [pc, #60]	@ (8002ab8 <MX_I2C2_Init+0x50>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002a7e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ab8 <MX_I2C2_Init+0x50>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a84:	4b0c      	ldr	r3, [pc, #48]	@ (8002ab8 <MX_I2C2_Init+0x50>)
 8002a86:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002a8a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8002ab8 <MX_I2C2_Init+0x50>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002a92:	4b09      	ldr	r3, [pc, #36]	@ (8002ab8 <MX_I2C2_Init+0x50>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a98:	4b07      	ldr	r3, [pc, #28]	@ (8002ab8 <MX_I2C2_Init+0x50>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a9e:	4b06      	ldr	r3, [pc, #24]	@ (8002ab8 <MX_I2C2_Init+0x50>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002aa4:	4804      	ldr	r0, [pc, #16]	@ (8002ab8 <MX_I2C2_Init+0x50>)
 8002aa6:	f000 fe9d 	bl	80037e4 <HAL_I2C_Init>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002ab0:	f000 f82a 	bl	8002b08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002ab4:	bf00      	nop
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	20000098 	.word	0x20000098
 8002abc:	40005800 	.word	0x40005800
 8002ac0:	000186a0 	.word	0x000186a0

08002ac4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aca:	4b0e      	ldr	r3, [pc, #56]	@ (8002b04 <MX_GPIO_Init+0x40>)
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	4a0d      	ldr	r2, [pc, #52]	@ (8002b04 <MX_GPIO_Init+0x40>)
 8002ad0:	f043 0308 	orr.w	r3, r3, #8
 8002ad4:	6193      	str	r3, [r2, #24]
 8002ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8002b04 <MX_GPIO_Init+0x40>)
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	f003 0308 	and.w	r3, r3, #8
 8002ade:	607b      	str	r3, [r7, #4]
 8002ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae2:	4b08      	ldr	r3, [pc, #32]	@ (8002b04 <MX_GPIO_Init+0x40>)
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	4a07      	ldr	r2, [pc, #28]	@ (8002b04 <MX_GPIO_Init+0x40>)
 8002ae8:	f043 0304 	orr.w	r3, r3, #4
 8002aec:	6193      	str	r3, [r2, #24]
 8002aee:	4b05      	ldr	r3, [pc, #20]	@ (8002b04 <MX_GPIO_Init+0x40>)
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	f003 0304 	and.w	r3, r3, #4
 8002af6:	603b      	str	r3, [r7, #0]
 8002af8:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr
 8002b04:	40021000 	.word	0x40021000

08002b08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b0c:	b672      	cpsid	i
}
 8002b0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b10:	bf00      	nop
 8002b12:	e7fd      	b.n	8002b10 <Error_Handler+0x8>

08002b14 <stm32_get_clock_ms>:
#include "stm32_mpu9250_clk.h"

int stm32_get_clock_ms(unsigned long *count)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
	*count = HAL_GetTick();
 8002b1c:	f000 fae0 	bl	80030e0 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	601a      	str	r2, [r3, #0]
	return 0;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3708      	adds	r7, #8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <stm32_delay_ms>:

int stm32_delay_ms(unsigned long num_ms)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
	HAL_Delay(num_ms);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 fadb 	bl	80030f4 <HAL_Delay>
	return 0;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	4618      	mov	r0, r3
 8002b42:	3708      	adds	r7, #8
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <wait_for_gpio_state_timeout>:
#define I2C_SDA_GPIO_Port MPU_SDA_GPIO_Port

extern I2C_HandleTypeDef hi2c2;

static uint8_t wait_for_gpio_state_timeout(GPIO_TypeDef* port, uint16_t pin, GPIO_PinState state, uint32_t timeout)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	607b      	str	r3, [r7, #4]
 8002b52:	460b      	mov	r3, r1
 8002b54:	817b      	strh	r3, [r7, #10]
 8002b56:	4613      	mov	r3, r2
 8002b58:	727b      	strb	r3, [r7, #9]
    uint32_t Tickstart = HAL_GetTick();
 8002b5a:	f000 fac1 	bl	80030e0 <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]
    uint8_t ret = 1;
 8002b60:	2301      	movs	r3, #1
 8002b62:	75fb      	strb	r3, [r7, #23]
    /* Wait until flag is set */
    for (; (state != HAL_GPIO_ReadPin(port, pin)) && (1 == ret);)
 8002b64:	e011      	b.n	8002b8a <wait_for_gpio_state_timeout+0x42>
    {
        /* Check for the timeout */
        if (timeout != HAL_MAX_DELAY)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b6c:	d00c      	beq.n	8002b88 <wait_for_gpio_state_timeout+0x40>
        {
            if ((timeout == 0U) || ((HAL_GetTick() - Tickstart) > timeout))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d007      	beq.n	8002b84 <wait_for_gpio_state_timeout+0x3c>
 8002b74:	f000 fab4 	bl	80030e0 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d201      	bcs.n	8002b88 <wait_for_gpio_state_timeout+0x40>
            {
                ret = 0;
 8002b84:	2300      	movs	r3, #0
 8002b86:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
            }
        }
        asm("nop");
 8002b88:	bf00      	nop
    for (; (state != HAL_GPIO_ReadPin(port, pin)) && (1 == ret);)
 8002b8a:	897b      	ldrh	r3, [r7, #10]
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f000 fdf8 	bl	8003784 <HAL_GPIO_ReadPin>
 8002b94:	4603      	mov	r3, r0
 8002b96:	461a      	mov	r2, r3
 8002b98:	7a7b      	ldrb	r3, [r7, #9]
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d002      	beq.n	8002ba4 <wait_for_gpio_state_timeout+0x5c>
 8002b9e:	7dfb      	ldrb	r3, [r7, #23]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d0e0      	beq.n	8002b66 <wait_for_gpio_state_timeout+0x1e>
    }
    return ret;
 8002ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3718      	adds	r7, #24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
	...

08002bb0 <I2C_ClearBusyFlagErratum>:

static void I2C_ClearBusyFlagErratum(I2C_HandleTypeDef* handle, uint32_t timeout)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
    GPIO_InitTypeDef GPIO_InitStructure;

    // 1. Clear PE bit.
    CLEAR_BIT(handle->Instance->CR1, I2C_CR1_PE);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 0201 	bic.w	r2, r2, #1
 8002bc8:	601a      	str	r2, [r3, #0]

    //  2. Configure the SCL and SDA I/Os as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
    HAL_I2C_DeInit(handle);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 ff4e 	bl	8003a6c <HAL_I2C_DeInit>

    GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 8002bd0:	2311      	movs	r3, #17
 8002bd2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	613b      	str	r3, [r7, #16]

    GPIO_InitStructure.Pin = I2C_SCL_Pin;
 8002bd8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002bdc:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002bde:	f107 0308 	add.w	r3, r7, #8
 8002be2:	4619      	mov	r1, r3
 8002be4:	4847      	ldr	r0, [pc, #284]	@ (8002d04 <I2C_ClearBusyFlagErratum+0x154>)
 8002be6:	f000 fb8d 	bl	8003304 <HAL_GPIO_Init>

    GPIO_InitStructure.Pin = I2C_SDA_Pin;
 8002bea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002bee:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(I2C_SDA_GPIO_Port, &GPIO_InitStructure);
 8002bf0:	f107 0308 	add.w	r3, r7, #8
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4843      	ldr	r0, [pc, #268]	@ (8002d04 <I2C_ClearBusyFlagErratum+0x154>)
 8002bf8:	f000 fb84 	bl	8003304 <HAL_GPIO_Init>

    // 3. Check SCL and SDA High level in GPIOx_IDR.
    HAL_GPIO_WritePin(I2C_SDA_GPIO_Port, I2C_SDA_Pin, GPIO_PIN_SET);
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002c02:	4840      	ldr	r0, [pc, #256]	@ (8002d04 <I2C_ClearBusyFlagErratum+0x154>)
 8002c04:	f000 fdd5 	bl	80037b2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(I2C_SCL_GPIO_Port, I2C_SCL_Pin, GPIO_PIN_SET);
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002c0e:	483d      	ldr	r0, [pc, #244]	@ (8002d04 <I2C_ClearBusyFlagErratum+0x154>)
 8002c10:	f000 fdcf 	bl	80037b2 <HAL_GPIO_WritePin>

    wait_for_gpio_state_timeout(I2C_SCL_GPIO_Port, I2C_SCL_Pin, GPIO_PIN_SET, timeout);
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002c1c:	4839      	ldr	r0, [pc, #228]	@ (8002d04 <I2C_ClearBusyFlagErratum+0x154>)
 8002c1e:	f7ff ff93 	bl	8002b48 <wait_for_gpio_state_timeout>
    wait_for_gpio_state_timeout(I2C_SDA_GPIO_Port, I2C_SDA_Pin, GPIO_PIN_SET, timeout);
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002c2a:	4836      	ldr	r0, [pc, #216]	@ (8002d04 <I2C_ClearBusyFlagErratum+0x154>)
 8002c2c:	f7ff ff8c 	bl	8002b48 <wait_for_gpio_state_timeout>

    // 4. Configure the SDA I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C_SDA_GPIO_Port, I2C_SDA_Pin, GPIO_PIN_RESET);
 8002c30:	2200      	movs	r2, #0
 8002c32:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002c36:	4833      	ldr	r0, [pc, #204]	@ (8002d04 <I2C_ClearBusyFlagErratum+0x154>)
 8002c38:	f000 fdbb 	bl	80037b2 <HAL_GPIO_WritePin>

    // 5. Check SDA Low level in GPIOx_IDR.
    wait_for_gpio_state_timeout(I2C_SDA_GPIO_Port, I2C_SDA_Pin, GPIO_PIN_RESET, timeout);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002c44:	482f      	ldr	r0, [pc, #188]	@ (8002d04 <I2C_ClearBusyFlagErratum+0x154>)
 8002c46:	f7ff ff7f 	bl	8002b48 <wait_for_gpio_state_timeout>

    // 6. Configure the SCL I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C_SCL_GPIO_Port, I2C_SCL_Pin, GPIO_PIN_RESET);
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002c50:	482c      	ldr	r0, [pc, #176]	@ (8002d04 <I2C_ClearBusyFlagErratum+0x154>)
 8002c52:	f000 fdae 	bl	80037b2 <HAL_GPIO_WritePin>

    // 7. Check SCL Low level in GPIOx_IDR.
    wait_for_gpio_state_timeout(I2C_SCL_GPIO_Port, I2C_SCL_Pin, GPIO_PIN_RESET, timeout);
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002c5e:	4829      	ldr	r0, [pc, #164]	@ (8002d04 <I2C_ClearBusyFlagErratum+0x154>)
 8002c60:	f7ff ff72 	bl	8002b48 <wait_for_gpio_state_timeout>

    // 8. Configure the SCL I/O as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C_SCL_GPIO_Port, I2C_SCL_Pin, GPIO_PIN_SET);
 8002c64:	2201      	movs	r2, #1
 8002c66:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002c6a:	4826      	ldr	r0, [pc, #152]	@ (8002d04 <I2C_ClearBusyFlagErratum+0x154>)
 8002c6c:	f000 fda1 	bl	80037b2 <HAL_GPIO_WritePin>

    // 9. Check SCL High level in GPIOx_IDR.
    wait_for_gpio_state_timeout(I2C_SCL_GPIO_Port, I2C_SCL_Pin, GPIO_PIN_SET, timeout);
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002c78:	4822      	ldr	r0, [pc, #136]	@ (8002d04 <I2C_ClearBusyFlagErratum+0x154>)
 8002c7a:	f7ff ff65 	bl	8002b48 <wait_for_gpio_state_timeout>

    // 10. Configure the SDA I/O as General Purpose Output Open-Drain , High level (Write 1 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C_SDA_GPIO_Port, I2C_SDA_Pin, GPIO_PIN_SET);
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002c84:	481f      	ldr	r0, [pc, #124]	@ (8002d04 <I2C_ClearBusyFlagErratum+0x154>)
 8002c86:	f000 fd94 	bl	80037b2 <HAL_GPIO_WritePin>

    // 11. Check SDA High level in GPIOx_IDR.
    wait_for_gpio_state_timeout(I2C_SDA_GPIO_Port, I2C_SDA_Pin, GPIO_PIN_SET, timeout);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002c92:	481c      	ldr	r0, [pc, #112]	@ (8002d04 <I2C_ClearBusyFlagErratum+0x154>)
 8002c94:	f7ff ff58 	bl	8002b48 <wait_for_gpio_state_timeout>

    // 12. Configure the SCL and SDA I/Os as Alternate function Open-Drain.
    GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8002c98:	2312      	movs	r3, #18
 8002c9a:	60fb      	str	r3, [r7, #12]
    //GPIO_InitStructure.Alternate = GPIO_AF4_I2C2;

    GPIO_InitStructure.Pin = I2C_SCL_Pin;
 8002c9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ca0:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(I2C_SCL_GPIO_Port, &GPIO_InitStructure);
 8002ca2:	f107 0308 	add.w	r3, r7, #8
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4816      	ldr	r0, [pc, #88]	@ (8002d04 <I2C_ClearBusyFlagErratum+0x154>)
 8002caa:	f000 fb2b 	bl	8003304 <HAL_GPIO_Init>

    GPIO_InitStructure.Pin = I2C_SDA_Pin;
 8002cae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002cb2:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(I2C_SDA_GPIO_Port, &GPIO_InitStructure);
 8002cb4:	f107 0308 	add.w	r3, r7, #8
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4812      	ldr	r0, [pc, #72]	@ (8002d04 <I2C_ClearBusyFlagErratum+0x154>)
 8002cbc:	f000 fb22 	bl	8003304 <HAL_GPIO_Init>

    // 13. Set SWRST bit in I2Cx_CR1 register.
    SET_BIT(handle->Instance->CR1, I2C_CR1_SWRST);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002cce:	601a      	str	r2, [r3, #0]
    asm("nop");
 8002cd0:	bf00      	nop

    /* 14. Clear SWRST bit in I2Cx_CR1 register. */
    CLEAR_BIT(handle->Instance->CR1, I2C_CR1_SWRST);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ce0:	601a      	str	r2, [r3, #0]
    asm("nop");
 8002ce2:	bf00      	nop

    /* 15. Enable the I2C peripheral by setting the PE bit in I2Cx_CR1 register */
    SET_BIT(handle->Instance->CR1, I2C_CR1_PE);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f042 0201 	orr.w	r2, r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]
    asm("nop");
 8002cf4:	bf00      	nop

    // Call initialization function.
    HAL_I2C_Init(handle);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 fd74 	bl	80037e4 <HAL_I2C_Init>
}
 8002cfc:	bf00      	nop
 8002cfe:	3718      	adds	r7, #24
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40010c00 	.word	0x40010c00

08002d08 <stm32_i2c_write>:

int stm32_i2c_write(unsigned char slave_addr, unsigned char reg_addr,
                       unsigned char length, unsigned char * data)
{
 8002d08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002d0c:	b089      	sub	sp, #36	@ 0x24
 8002d0e:	af02      	add	r7, sp, #8
 8002d10:	603b      	str	r3, [r7, #0]
 8002d12:	4603      	mov	r3, r0
 8002d14:	71fb      	strb	r3, [r7, #7]
 8002d16:	460b      	mov	r3, r1
 8002d18:	71bb      	strb	r3, [r7, #6]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	717b      	strb	r3, [r7, #5]
 8002d1e:	466b      	mov	r3, sp
 8002d20:	461e      	mov	r6, r3
    uint8_t data_for_transmit[length + 1];
 8002d22:	797b      	ldrb	r3, [r7, #5]
 8002d24:	1c59      	adds	r1, r3, #1
 8002d26:	1e4b      	subs	r3, r1, #1
 8002d28:	613b      	str	r3, [r7, #16]
 8002d2a:	460a      	mov	r2, r1
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	4690      	mov	r8, r2
 8002d30:	4699      	mov	r9, r3
 8002d32:	f04f 0200 	mov.w	r2, #0
 8002d36:	f04f 0300 	mov.w	r3, #0
 8002d3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d46:	460a      	mov	r2, r1
 8002d48:	2300      	movs	r3, #0
 8002d4a:	4614      	mov	r4, r2
 8002d4c:	461d      	mov	r5, r3
 8002d4e:	f04f 0200 	mov.w	r2, #0
 8002d52:	f04f 0300 	mov.w	r3, #0
 8002d56:	00eb      	lsls	r3, r5, #3
 8002d58:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d5c:	00e2      	lsls	r2, r4, #3
 8002d5e:	460b      	mov	r3, r1
 8002d60:	3307      	adds	r3, #7
 8002d62:	08db      	lsrs	r3, r3, #3
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	ebad 0d03 	sub.w	sp, sp, r3
 8002d6a:	ab02      	add	r3, sp, #8
 8002d6c:	3300      	adds	r3, #0
 8002d6e:	60fb      	str	r3, [r7, #12]

    data_for_transmit[0] = reg_addr;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	79ba      	ldrb	r2, [r7, #6]
 8002d74:	701a      	strb	r2, [r3, #0]

    for (unsigned char i = 0; i < length; i++)
 8002d76:	2300      	movs	r3, #0
 8002d78:	75fb      	strb	r3, [r7, #23]
 8002d7a:	e00a      	b.n	8002d92 <stm32_i2c_write+0x8a>
    {
        data_for_transmit[i + 1] = data[i];
 8002d7c:	7dfb      	ldrb	r3, [r7, #23]
 8002d7e:	683a      	ldr	r2, [r7, #0]
 8002d80:	441a      	add	r2, r3
 8002d82:	7dfb      	ldrb	r3, [r7, #23]
 8002d84:	3301      	adds	r3, #1
 8002d86:	7811      	ldrb	r1, [r2, #0]
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	54d1      	strb	r1, [r2, r3]
    for (unsigned char i = 0; i < length; i++)
 8002d8c:	7dfb      	ldrb	r3, [r7, #23]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	75fb      	strb	r3, [r7, #23]
 8002d92:	7dfa      	ldrb	r2, [r7, #23]
 8002d94:	797b      	ldrb	r3, [r7, #5]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d3f0      	bcc.n	8002d7c <stm32_i2c_write+0x74>
    }

    HAL_StatusTypeDef ret_V = HAL_I2C_Master_Transmit(&hi2c2, slave_addr << 1, data_for_transmit, (length + 1), 0xff);
 8002d9a:	79fb      	ldrb	r3, [r7, #7]
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	b299      	uxth	r1, r3
 8002da2:	797b      	ldrb	r3, [r7, #5]
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	3301      	adds	r3, #1
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	22ff      	movs	r2, #255	@ 0xff
 8002dac:	9200      	str	r2, [sp, #0]
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	4809      	ldr	r0, [pc, #36]	@ (8002dd8 <stm32_i2c_write+0xd0>)
 8002db2:	f000 fe8b 	bl	8003acc <HAL_I2C_Master_Transmit>
 8002db6:	4603      	mov	r3, r0
 8002db8:	72fb      	strb	r3, [r7, #11]

    if (ret_V != HAL_OK)
 8002dba:	7afb      	ldrb	r3, [r7, #11]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d003      	beq.n	8002dc8 <stm32_i2c_write+0xc0>
    {
        I2C_ClearBusyFlagErratum(&hi2c2, 10);
 8002dc0:	210a      	movs	r1, #10
 8002dc2:	4805      	ldr	r0, [pc, #20]	@ (8002dd8 <stm32_i2c_write+0xd0>)
 8002dc4:	f7ff fef4 	bl	8002bb0 <I2C_ClearBusyFlagErratum>
    }

    return ret_V;
 8002dc8:	7afb      	ldrb	r3, [r7, #11]
 8002dca:	46b5      	mov	sp, r6
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	371c      	adds	r7, #28
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002dd6:	bf00      	nop
 8002dd8:	20000098 	.word	0x20000098

08002ddc <stm32_i2c_read>:

int stm32_i2c_read(unsigned char slave_addr, unsigned char reg_addr,
                       unsigned char length, unsigned char * data)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af02      	add	r7, sp, #8
 8002de2:	603b      	str	r3, [r7, #0]
 8002de4:	4603      	mov	r3, r0
 8002de6:	71fb      	strb	r3, [r7, #7]
 8002de8:	460b      	mov	r3, r1
 8002dea:	71bb      	strb	r3, [r7, #6]
 8002dec:	4613      	mov	r3, r2
 8002dee:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef ret_V = HAL_I2C_Master_Transmit(&hi2c2, slave_addr << 1, &reg_addr, 1, 0xff);
 8002df0:	79fb      	ldrb	r3, [r7, #7]
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	b299      	uxth	r1, r3
 8002df8:	1dba      	adds	r2, r7, #6
 8002dfa:	23ff      	movs	r3, #255	@ 0xff
 8002dfc:	9300      	str	r3, [sp, #0]
 8002dfe:	2301      	movs	r3, #1
 8002e00:	4813      	ldr	r0, [pc, #76]	@ (8002e50 <stm32_i2c_read+0x74>)
 8002e02:	f000 fe63 	bl	8003acc <HAL_I2C_Master_Transmit>
 8002e06:	4603      	mov	r3, r0
 8002e08:	73fb      	strb	r3, [r7, #15]
    if (ret_V != HAL_OK)
 8002e0a:	7bfb      	ldrb	r3, [r7, #15]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d005      	beq.n	8002e1c <stm32_i2c_read+0x40>
    {
        I2C_ClearBusyFlagErratum(&hi2c2, 10);
 8002e10:	210a      	movs	r1, #10
 8002e12:	480f      	ldr	r0, [pc, #60]	@ (8002e50 <stm32_i2c_read+0x74>)
 8002e14:	f7ff fecc 	bl	8002bb0 <I2C_ClearBusyFlagErratum>
        return ret_V;
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
 8002e1a:	e015      	b.n	8002e48 <stm32_i2c_read+0x6c>
    }

    ret_V = HAL_I2C_Master_Receive(&hi2c2, slave_addr << 1, data, length, 0xff);
 8002e1c:	79fb      	ldrb	r3, [r7, #7]
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	b299      	uxth	r1, r3
 8002e24:	797b      	ldrb	r3, [r7, #5]
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	22ff      	movs	r2, #255	@ 0xff
 8002e2a:	9200      	str	r2, [sp, #0]
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	4808      	ldr	r0, [pc, #32]	@ (8002e50 <stm32_i2c_read+0x74>)
 8002e30:	f000 ff4a 	bl	8003cc8 <HAL_I2C_Master_Receive>
 8002e34:	4603      	mov	r3, r0
 8002e36:	73fb      	strb	r3, [r7, #15]

    if (ret_V != HAL_OK)
 8002e38:	7bfb      	ldrb	r3, [r7, #15]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <stm32_i2c_read+0x6a>
    {
        I2C_ClearBusyFlagErratum(&hi2c2, 10);
 8002e3e:	210a      	movs	r1, #10
 8002e40:	4803      	ldr	r0, [pc, #12]	@ (8002e50 <stm32_i2c_read+0x74>)
 8002e42:	f7ff feb5 	bl	8002bb0 <I2C_ClearBusyFlagErratum>
    }

    return ret_V;
 8002e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	20000098 	.word	0x20000098

08002e54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002e5a:	4b15      	ldr	r3, [pc, #84]	@ (8002eb0 <HAL_MspInit+0x5c>)
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	4a14      	ldr	r2, [pc, #80]	@ (8002eb0 <HAL_MspInit+0x5c>)
 8002e60:	f043 0301 	orr.w	r3, r3, #1
 8002e64:	6193      	str	r3, [r2, #24]
 8002e66:	4b12      	ldr	r3, [pc, #72]	@ (8002eb0 <HAL_MspInit+0x5c>)
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	60bb      	str	r3, [r7, #8]
 8002e70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e72:	4b0f      	ldr	r3, [pc, #60]	@ (8002eb0 <HAL_MspInit+0x5c>)
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	4a0e      	ldr	r2, [pc, #56]	@ (8002eb0 <HAL_MspInit+0x5c>)
 8002e78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e7c:	61d3      	str	r3, [r2, #28]
 8002e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8002eb0 <HAL_MspInit+0x5c>)
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e86:	607b      	str	r3, [r7, #4]
 8002e88:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb4 <HAL_MspInit+0x60>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	60fb      	str	r3, [r7, #12]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002e96:	60fb      	str	r3, [r7, #12]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002e9e:	60fb      	str	r3, [r7, #12]
 8002ea0:	4a04      	ldr	r2, [pc, #16]	@ (8002eb4 <HAL_MspInit+0x60>)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ea6:	bf00      	nop
 8002ea8:	3714      	adds	r7, #20
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bc80      	pop	{r7}
 8002eae:	4770      	bx	lr
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	40010000 	.word	0x40010000

08002eb8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b088      	sub	sp, #32
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec0:	f107 0310 	add.w	r3, r7, #16
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	605a      	str	r2, [r3, #4]
 8002eca:	609a      	str	r2, [r3, #8]
 8002ecc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a16      	ldr	r2, [pc, #88]	@ (8002f2c <HAL_I2C_MspInit+0x74>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d124      	bne.n	8002f22 <HAL_I2C_MspInit+0x6a>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ed8:	4b15      	ldr	r3, [pc, #84]	@ (8002f30 <HAL_I2C_MspInit+0x78>)
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	4a14      	ldr	r2, [pc, #80]	@ (8002f30 <HAL_I2C_MspInit+0x78>)
 8002ede:	f043 0308 	orr.w	r3, r3, #8
 8002ee2:	6193      	str	r3, [r2, #24]
 8002ee4:	4b12      	ldr	r3, [pc, #72]	@ (8002f30 <HAL_I2C_MspInit+0x78>)
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	f003 0308 	and.w	r3, r3, #8
 8002eec:	60fb      	str	r3, [r7, #12]
 8002eee:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002ef0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002ef4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ef6:	2312      	movs	r3, #18
 8002ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002efa:	2303      	movs	r3, #3
 8002efc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002efe:	f107 0310 	add.w	r3, r7, #16
 8002f02:	4619      	mov	r1, r3
 8002f04:	480b      	ldr	r0, [pc, #44]	@ (8002f34 <HAL_I2C_MspInit+0x7c>)
 8002f06:	f000 f9fd 	bl	8003304 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002f0a:	4b09      	ldr	r3, [pc, #36]	@ (8002f30 <HAL_I2C_MspInit+0x78>)
 8002f0c:	69db      	ldr	r3, [r3, #28]
 8002f0e:	4a08      	ldr	r2, [pc, #32]	@ (8002f30 <HAL_I2C_MspInit+0x78>)
 8002f10:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002f14:	61d3      	str	r3, [r2, #28]
 8002f16:	4b06      	ldr	r3, [pc, #24]	@ (8002f30 <HAL_I2C_MspInit+0x78>)
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f1e:	60bb      	str	r3, [r7, #8]
 8002f20:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002f22:	bf00      	nop
 8002f24:	3720      	adds	r7, #32
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40005800 	.word	0x40005800
 8002f30:	40021000 	.word	0x40021000
 8002f34:	40010c00 	.word	0x40010c00

08002f38 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a0b      	ldr	r2, [pc, #44]	@ (8002f74 <HAL_I2C_MspDeInit+0x3c>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d10f      	bne.n	8002f6a <HAL_I2C_MspDeInit+0x32>
  {
    /* USER CODE BEGIN I2C2_MspDeInit 0 */

    /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8002f78 <HAL_I2C_MspDeInit+0x40>)
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f78 <HAL_I2C_MspDeInit+0x40>)
 8002f50:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002f54:	61d3      	str	r3, [r2, #28]

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8002f56:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002f5a:	4808      	ldr	r0, [pc, #32]	@ (8002f7c <HAL_I2C_MspDeInit+0x44>)
 8002f5c:	f000 fb56 	bl	800360c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8002f60:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002f64:	4805      	ldr	r0, [pc, #20]	@ (8002f7c <HAL_I2C_MspDeInit+0x44>)
 8002f66:	f000 fb51 	bl	800360c <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C2_MspDeInit 1 */

    /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8002f6a:	bf00      	nop
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	40005800 	.word	0x40005800
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	40010c00 	.word	0x40010c00

08002f80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f84:	bf00      	nop
 8002f86:	e7fd      	b.n	8002f84 <NMI_Handler+0x4>

08002f88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f8c:	bf00      	nop
 8002f8e:	e7fd      	b.n	8002f8c <HardFault_Handler+0x4>

08002f90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f94:	bf00      	nop
 8002f96:	e7fd      	b.n	8002f94 <MemManage_Handler+0x4>

08002f98 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f9c:	bf00      	nop
 8002f9e:	e7fd      	b.n	8002f9c <BusFault_Handler+0x4>

08002fa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fa4:	bf00      	nop
 8002fa6:	e7fd      	b.n	8002fa4 <UsageFault_Handler+0x4>

08002fa8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fac:	bf00      	nop
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bc80      	pop	{r7}
 8002fb2:	4770      	bx	lr

08002fb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fb8:	bf00      	nop
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bc80      	pop	{r7}
 8002fbe:	4770      	bx	lr

08002fc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fc4:	bf00      	nop
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bc80      	pop	{r7}
 8002fca:	4770      	bx	lr

08002fcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fd0:	f000 f874 	bl	80030bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fd4:	bf00      	nop
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fdc:	bf00      	nop
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr

08002fe4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002fe4:	f7ff fff8 	bl	8002fd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fe8:	480b      	ldr	r0, [pc, #44]	@ (8003018 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002fea:	490c      	ldr	r1, [pc, #48]	@ (800301c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002fec:	4a0c      	ldr	r2, [pc, #48]	@ (8003020 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ff0:	e002      	b.n	8002ff8 <LoopCopyDataInit>

08002ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ff6:	3304      	adds	r3, #4

08002ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ffc:	d3f9      	bcc.n	8002ff2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ffe:	4a09      	ldr	r2, [pc, #36]	@ (8003024 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003000:	4c09      	ldr	r4, [pc, #36]	@ (8003028 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003004:	e001      	b.n	800300a <LoopFillZerobss>

08003006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003008:	3204      	adds	r2, #4

0800300a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800300a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800300c:	d3fb      	bcc.n	8003006 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800300e:	f002 f851 	bl	80050b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003012:	f7ff fcc1 	bl	8002998 <main>
  bx lr
 8003016:	4770      	bx	lr
  ldr r0, =_sdata
 8003018:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800301c:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 8003020:	080056f8 	.word	0x080056f8
  ldr r2, =_sbss
 8003024:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 8003028:	200000f4 	.word	0x200000f4

0800302c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800302c:	e7fe      	b.n	800302c <ADC1_2_IRQHandler>
	...

08003030 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003034:	4b08      	ldr	r3, [pc, #32]	@ (8003058 <HAL_Init+0x28>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a07      	ldr	r2, [pc, #28]	@ (8003058 <HAL_Init+0x28>)
 800303a:	f043 0310 	orr.w	r3, r3, #16
 800303e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003040:	2003      	movs	r0, #3
 8003042:	f000 f92b 	bl	800329c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003046:	200f      	movs	r0, #15
 8003048:	f000 f808 	bl	800305c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800304c:	f7ff ff02 	bl	8002e54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	40022000 	.word	0x40022000

0800305c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003064:	4b12      	ldr	r3, [pc, #72]	@ (80030b0 <HAL_InitTick+0x54>)
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	4b12      	ldr	r3, [pc, #72]	@ (80030b4 <HAL_InitTick+0x58>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	4619      	mov	r1, r3
 800306e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003072:	fbb3 f3f1 	udiv	r3, r3, r1
 8003076:	fbb2 f3f3 	udiv	r3, r2, r3
 800307a:	4618      	mov	r0, r3
 800307c:	f000 f935 	bl	80032ea <HAL_SYSTICK_Config>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e00e      	b.n	80030a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b0f      	cmp	r3, #15
 800308e:	d80a      	bhi.n	80030a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003090:	2200      	movs	r2, #0
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	f04f 30ff 	mov.w	r0, #4294967295
 8003098:	f000 f90b 	bl	80032b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800309c:	4a06      	ldr	r2, [pc, #24]	@ (80030b8 <HAL_InitTick+0x5c>)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
 80030a4:	e000      	b.n	80030a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	20000038 	.word	0x20000038
 80030b4:	20000040 	.word	0x20000040
 80030b8:	2000003c 	.word	0x2000003c

080030bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030c0:	4b05      	ldr	r3, [pc, #20]	@ (80030d8 <HAL_IncTick+0x1c>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	461a      	mov	r2, r3
 80030c6:	4b05      	ldr	r3, [pc, #20]	@ (80030dc <HAL_IncTick+0x20>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4413      	add	r3, r2
 80030cc:	4a03      	ldr	r2, [pc, #12]	@ (80030dc <HAL_IncTick+0x20>)
 80030ce:	6013      	str	r3, [r2, #0]
}
 80030d0:	bf00      	nop
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bc80      	pop	{r7}
 80030d6:	4770      	bx	lr
 80030d8:	20000040 	.word	0x20000040
 80030dc:	200000f0 	.word	0x200000f0

080030e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
  return uwTick;
 80030e4:	4b02      	ldr	r3, [pc, #8]	@ (80030f0 <HAL_GetTick+0x10>)
 80030e6:	681b      	ldr	r3, [r3, #0]
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bc80      	pop	{r7}
 80030ee:	4770      	bx	lr
 80030f0:	200000f0 	.word	0x200000f0

080030f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030fc:	f7ff fff0 	bl	80030e0 <HAL_GetTick>
 8003100:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310c:	d005      	beq.n	800311a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800310e:	4b0a      	ldr	r3, [pc, #40]	@ (8003138 <HAL_Delay+0x44>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	461a      	mov	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	4413      	add	r3, r2
 8003118:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800311a:	bf00      	nop
 800311c:	f7ff ffe0 	bl	80030e0 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	429a      	cmp	r2, r3
 800312a:	d8f7      	bhi.n	800311c <HAL_Delay+0x28>
  {
  }
}
 800312c:	bf00      	nop
 800312e:	bf00      	nop
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	20000040 	.word	0x20000040

0800313c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f003 0307 	and.w	r3, r3, #7
 800314a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800314c:	4b0c      	ldr	r3, [pc, #48]	@ (8003180 <__NVIC_SetPriorityGrouping+0x44>)
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003158:	4013      	ands	r3, r2
 800315a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003164:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003168:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800316c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800316e:	4a04      	ldr	r2, [pc, #16]	@ (8003180 <__NVIC_SetPriorityGrouping+0x44>)
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	60d3      	str	r3, [r2, #12]
}
 8003174:	bf00      	nop
 8003176:	3714      	adds	r7, #20
 8003178:	46bd      	mov	sp, r7
 800317a:	bc80      	pop	{r7}
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	e000ed00 	.word	0xe000ed00

08003184 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003188:	4b04      	ldr	r3, [pc, #16]	@ (800319c <__NVIC_GetPriorityGrouping+0x18>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	0a1b      	lsrs	r3, r3, #8
 800318e:	f003 0307 	and.w	r3, r3, #7
}
 8003192:	4618      	mov	r0, r3
 8003194:	46bd      	mov	sp, r7
 8003196:	bc80      	pop	{r7}
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	e000ed00 	.word	0xe000ed00

080031a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	4603      	mov	r3, r0
 80031a8:	6039      	str	r1, [r7, #0]
 80031aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	db0a      	blt.n	80031ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	b2da      	uxtb	r2, r3
 80031b8:	490c      	ldr	r1, [pc, #48]	@ (80031ec <__NVIC_SetPriority+0x4c>)
 80031ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031be:	0112      	lsls	r2, r2, #4
 80031c0:	b2d2      	uxtb	r2, r2
 80031c2:	440b      	add	r3, r1
 80031c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031c8:	e00a      	b.n	80031e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	b2da      	uxtb	r2, r3
 80031ce:	4908      	ldr	r1, [pc, #32]	@ (80031f0 <__NVIC_SetPriority+0x50>)
 80031d0:	79fb      	ldrb	r3, [r7, #7]
 80031d2:	f003 030f 	and.w	r3, r3, #15
 80031d6:	3b04      	subs	r3, #4
 80031d8:	0112      	lsls	r2, r2, #4
 80031da:	b2d2      	uxtb	r2, r2
 80031dc:	440b      	add	r3, r1
 80031de:	761a      	strb	r2, [r3, #24]
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bc80      	pop	{r7}
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	e000e100 	.word	0xe000e100
 80031f0:	e000ed00 	.word	0xe000ed00

080031f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b089      	sub	sp, #36	@ 0x24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f003 0307 	and.w	r3, r3, #7
 8003206:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	f1c3 0307 	rsb	r3, r3, #7
 800320e:	2b04      	cmp	r3, #4
 8003210:	bf28      	it	cs
 8003212:	2304      	movcs	r3, #4
 8003214:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	3304      	adds	r3, #4
 800321a:	2b06      	cmp	r3, #6
 800321c:	d902      	bls.n	8003224 <NVIC_EncodePriority+0x30>
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	3b03      	subs	r3, #3
 8003222:	e000      	b.n	8003226 <NVIC_EncodePriority+0x32>
 8003224:	2300      	movs	r3, #0
 8003226:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003228:	f04f 32ff 	mov.w	r2, #4294967295
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	fa02 f303 	lsl.w	r3, r2, r3
 8003232:	43da      	mvns	r2, r3
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	401a      	ands	r2, r3
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800323c:	f04f 31ff 	mov.w	r1, #4294967295
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	fa01 f303 	lsl.w	r3, r1, r3
 8003246:	43d9      	mvns	r1, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800324c:	4313      	orrs	r3, r2
         );
}
 800324e:	4618      	mov	r0, r3
 8003250:	3724      	adds	r7, #36	@ 0x24
 8003252:	46bd      	mov	sp, r7
 8003254:	bc80      	pop	{r7}
 8003256:	4770      	bx	lr

08003258 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3b01      	subs	r3, #1
 8003264:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003268:	d301      	bcc.n	800326e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800326a:	2301      	movs	r3, #1
 800326c:	e00f      	b.n	800328e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800326e:	4a0a      	ldr	r2, [pc, #40]	@ (8003298 <SysTick_Config+0x40>)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3b01      	subs	r3, #1
 8003274:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003276:	210f      	movs	r1, #15
 8003278:	f04f 30ff 	mov.w	r0, #4294967295
 800327c:	f7ff ff90 	bl	80031a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003280:	4b05      	ldr	r3, [pc, #20]	@ (8003298 <SysTick_Config+0x40>)
 8003282:	2200      	movs	r2, #0
 8003284:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003286:	4b04      	ldr	r3, [pc, #16]	@ (8003298 <SysTick_Config+0x40>)
 8003288:	2207      	movs	r2, #7
 800328a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	e000e010 	.word	0xe000e010

0800329c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f7ff ff49 	bl	800313c <__NVIC_SetPriorityGrouping>
}
 80032aa:	bf00      	nop
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b086      	sub	sp, #24
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	4603      	mov	r3, r0
 80032ba:	60b9      	str	r1, [r7, #8]
 80032bc:	607a      	str	r2, [r7, #4]
 80032be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032c0:	2300      	movs	r3, #0
 80032c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032c4:	f7ff ff5e 	bl	8003184 <__NVIC_GetPriorityGrouping>
 80032c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	68b9      	ldr	r1, [r7, #8]
 80032ce:	6978      	ldr	r0, [r7, #20]
 80032d0:	f7ff ff90 	bl	80031f4 <NVIC_EncodePriority>
 80032d4:	4602      	mov	r2, r0
 80032d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032da:	4611      	mov	r1, r2
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff ff5f 	bl	80031a0 <__NVIC_SetPriority>
}
 80032e2:	bf00      	nop
 80032e4:	3718      	adds	r7, #24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b082      	sub	sp, #8
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f7ff ffb0 	bl	8003258 <SysTick_Config>
 80032f8:	4603      	mov	r3, r0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
	...

08003304 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003304:	b480      	push	{r7}
 8003306:	b08b      	sub	sp, #44	@ 0x2c
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800330e:	2300      	movs	r3, #0
 8003310:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003312:	2300      	movs	r3, #0
 8003314:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003316:	e169      	b.n	80035ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003318:	2201      	movs	r2, #1
 800331a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	69fa      	ldr	r2, [r7, #28]
 8003328:	4013      	ands	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	429a      	cmp	r2, r3
 8003332:	f040 8158 	bne.w	80035e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	4a9a      	ldr	r2, [pc, #616]	@ (80035a4 <HAL_GPIO_Init+0x2a0>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d05e      	beq.n	80033fe <HAL_GPIO_Init+0xfa>
 8003340:	4a98      	ldr	r2, [pc, #608]	@ (80035a4 <HAL_GPIO_Init+0x2a0>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d875      	bhi.n	8003432 <HAL_GPIO_Init+0x12e>
 8003346:	4a98      	ldr	r2, [pc, #608]	@ (80035a8 <HAL_GPIO_Init+0x2a4>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d058      	beq.n	80033fe <HAL_GPIO_Init+0xfa>
 800334c:	4a96      	ldr	r2, [pc, #600]	@ (80035a8 <HAL_GPIO_Init+0x2a4>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d86f      	bhi.n	8003432 <HAL_GPIO_Init+0x12e>
 8003352:	4a96      	ldr	r2, [pc, #600]	@ (80035ac <HAL_GPIO_Init+0x2a8>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d052      	beq.n	80033fe <HAL_GPIO_Init+0xfa>
 8003358:	4a94      	ldr	r2, [pc, #592]	@ (80035ac <HAL_GPIO_Init+0x2a8>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d869      	bhi.n	8003432 <HAL_GPIO_Init+0x12e>
 800335e:	4a94      	ldr	r2, [pc, #592]	@ (80035b0 <HAL_GPIO_Init+0x2ac>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d04c      	beq.n	80033fe <HAL_GPIO_Init+0xfa>
 8003364:	4a92      	ldr	r2, [pc, #584]	@ (80035b0 <HAL_GPIO_Init+0x2ac>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d863      	bhi.n	8003432 <HAL_GPIO_Init+0x12e>
 800336a:	4a92      	ldr	r2, [pc, #584]	@ (80035b4 <HAL_GPIO_Init+0x2b0>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d046      	beq.n	80033fe <HAL_GPIO_Init+0xfa>
 8003370:	4a90      	ldr	r2, [pc, #576]	@ (80035b4 <HAL_GPIO_Init+0x2b0>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d85d      	bhi.n	8003432 <HAL_GPIO_Init+0x12e>
 8003376:	2b12      	cmp	r3, #18
 8003378:	d82a      	bhi.n	80033d0 <HAL_GPIO_Init+0xcc>
 800337a:	2b12      	cmp	r3, #18
 800337c:	d859      	bhi.n	8003432 <HAL_GPIO_Init+0x12e>
 800337e:	a201      	add	r2, pc, #4	@ (adr r2, 8003384 <HAL_GPIO_Init+0x80>)
 8003380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003384:	080033ff 	.word	0x080033ff
 8003388:	080033d9 	.word	0x080033d9
 800338c:	080033eb 	.word	0x080033eb
 8003390:	0800342d 	.word	0x0800342d
 8003394:	08003433 	.word	0x08003433
 8003398:	08003433 	.word	0x08003433
 800339c:	08003433 	.word	0x08003433
 80033a0:	08003433 	.word	0x08003433
 80033a4:	08003433 	.word	0x08003433
 80033a8:	08003433 	.word	0x08003433
 80033ac:	08003433 	.word	0x08003433
 80033b0:	08003433 	.word	0x08003433
 80033b4:	08003433 	.word	0x08003433
 80033b8:	08003433 	.word	0x08003433
 80033bc:	08003433 	.word	0x08003433
 80033c0:	08003433 	.word	0x08003433
 80033c4:	08003433 	.word	0x08003433
 80033c8:	080033e1 	.word	0x080033e1
 80033cc:	080033f5 	.word	0x080033f5
 80033d0:	4a79      	ldr	r2, [pc, #484]	@ (80035b8 <HAL_GPIO_Init+0x2b4>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d013      	beq.n	80033fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80033d6:	e02c      	b.n	8003432 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	623b      	str	r3, [r7, #32]
          break;
 80033de:	e029      	b.n	8003434 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	3304      	adds	r3, #4
 80033e6:	623b      	str	r3, [r7, #32]
          break;
 80033e8:	e024      	b.n	8003434 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	3308      	adds	r3, #8
 80033f0:	623b      	str	r3, [r7, #32]
          break;
 80033f2:	e01f      	b.n	8003434 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	330c      	adds	r3, #12
 80033fa:	623b      	str	r3, [r7, #32]
          break;
 80033fc:	e01a      	b.n	8003434 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d102      	bne.n	800340c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003406:	2304      	movs	r3, #4
 8003408:	623b      	str	r3, [r7, #32]
          break;
 800340a:	e013      	b.n	8003434 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d105      	bne.n	8003420 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003414:	2308      	movs	r3, #8
 8003416:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	69fa      	ldr	r2, [r7, #28]
 800341c:	611a      	str	r2, [r3, #16]
          break;
 800341e:	e009      	b.n	8003434 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003420:	2308      	movs	r3, #8
 8003422:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	69fa      	ldr	r2, [r7, #28]
 8003428:	615a      	str	r2, [r3, #20]
          break;
 800342a:	e003      	b.n	8003434 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800342c:	2300      	movs	r3, #0
 800342e:	623b      	str	r3, [r7, #32]
          break;
 8003430:	e000      	b.n	8003434 <HAL_GPIO_Init+0x130>
          break;
 8003432:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	2bff      	cmp	r3, #255	@ 0xff
 8003438:	d801      	bhi.n	800343e <HAL_GPIO_Init+0x13a>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	e001      	b.n	8003442 <HAL_GPIO_Init+0x13e>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	3304      	adds	r3, #4
 8003442:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	2bff      	cmp	r3, #255	@ 0xff
 8003448:	d802      	bhi.n	8003450 <HAL_GPIO_Init+0x14c>
 800344a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	e002      	b.n	8003456 <HAL_GPIO_Init+0x152>
 8003450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003452:	3b08      	subs	r3, #8
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	210f      	movs	r1, #15
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	fa01 f303 	lsl.w	r3, r1, r3
 8003464:	43db      	mvns	r3, r3
 8003466:	401a      	ands	r2, r3
 8003468:	6a39      	ldr	r1, [r7, #32]
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	fa01 f303 	lsl.w	r3, r1, r3
 8003470:	431a      	orrs	r2, r3
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	f000 80b1 	beq.w	80035e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003484:	4b4d      	ldr	r3, [pc, #308]	@ (80035bc <HAL_GPIO_Init+0x2b8>)
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	4a4c      	ldr	r2, [pc, #304]	@ (80035bc <HAL_GPIO_Init+0x2b8>)
 800348a:	f043 0301 	orr.w	r3, r3, #1
 800348e:	6193      	str	r3, [r2, #24]
 8003490:	4b4a      	ldr	r3, [pc, #296]	@ (80035bc <HAL_GPIO_Init+0x2b8>)
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	60bb      	str	r3, [r7, #8]
 800349a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800349c:	4a48      	ldr	r2, [pc, #288]	@ (80035c0 <HAL_GPIO_Init+0x2bc>)
 800349e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a0:	089b      	lsrs	r3, r3, #2
 80034a2:	3302      	adds	r3, #2
 80034a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80034aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ac:	f003 0303 	and.w	r3, r3, #3
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	220f      	movs	r2, #15
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	43db      	mvns	r3, r3
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	4013      	ands	r3, r2
 80034be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a40      	ldr	r2, [pc, #256]	@ (80035c4 <HAL_GPIO_Init+0x2c0>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d013      	beq.n	80034f0 <HAL_GPIO_Init+0x1ec>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a3f      	ldr	r2, [pc, #252]	@ (80035c8 <HAL_GPIO_Init+0x2c4>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d00d      	beq.n	80034ec <HAL_GPIO_Init+0x1e8>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a3e      	ldr	r2, [pc, #248]	@ (80035cc <HAL_GPIO_Init+0x2c8>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d007      	beq.n	80034e8 <HAL_GPIO_Init+0x1e4>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a3d      	ldr	r2, [pc, #244]	@ (80035d0 <HAL_GPIO_Init+0x2cc>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d101      	bne.n	80034e4 <HAL_GPIO_Init+0x1e0>
 80034e0:	2303      	movs	r3, #3
 80034e2:	e006      	b.n	80034f2 <HAL_GPIO_Init+0x1ee>
 80034e4:	2304      	movs	r3, #4
 80034e6:	e004      	b.n	80034f2 <HAL_GPIO_Init+0x1ee>
 80034e8:	2302      	movs	r3, #2
 80034ea:	e002      	b.n	80034f2 <HAL_GPIO_Init+0x1ee>
 80034ec:	2301      	movs	r3, #1
 80034ee:	e000      	b.n	80034f2 <HAL_GPIO_Init+0x1ee>
 80034f0:	2300      	movs	r3, #0
 80034f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034f4:	f002 0203 	and.w	r2, r2, #3
 80034f8:	0092      	lsls	r2, r2, #2
 80034fa:	4093      	lsls	r3, r2
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	4313      	orrs	r3, r2
 8003500:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003502:	492f      	ldr	r1, [pc, #188]	@ (80035c0 <HAL_GPIO_Init+0x2bc>)
 8003504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003506:	089b      	lsrs	r3, r3, #2
 8003508:	3302      	adds	r3, #2
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d006      	beq.n	800352a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800351c:	4b2d      	ldr	r3, [pc, #180]	@ (80035d4 <HAL_GPIO_Init+0x2d0>)
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	492c      	ldr	r1, [pc, #176]	@ (80035d4 <HAL_GPIO_Init+0x2d0>)
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	4313      	orrs	r3, r2
 8003526:	608b      	str	r3, [r1, #8]
 8003528:	e006      	b.n	8003538 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800352a:	4b2a      	ldr	r3, [pc, #168]	@ (80035d4 <HAL_GPIO_Init+0x2d0>)
 800352c:	689a      	ldr	r2, [r3, #8]
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	43db      	mvns	r3, r3
 8003532:	4928      	ldr	r1, [pc, #160]	@ (80035d4 <HAL_GPIO_Init+0x2d0>)
 8003534:	4013      	ands	r3, r2
 8003536:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d006      	beq.n	8003552 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003544:	4b23      	ldr	r3, [pc, #140]	@ (80035d4 <HAL_GPIO_Init+0x2d0>)
 8003546:	68da      	ldr	r2, [r3, #12]
 8003548:	4922      	ldr	r1, [pc, #136]	@ (80035d4 <HAL_GPIO_Init+0x2d0>)
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	4313      	orrs	r3, r2
 800354e:	60cb      	str	r3, [r1, #12]
 8003550:	e006      	b.n	8003560 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003552:	4b20      	ldr	r3, [pc, #128]	@ (80035d4 <HAL_GPIO_Init+0x2d0>)
 8003554:	68da      	ldr	r2, [r3, #12]
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	43db      	mvns	r3, r3
 800355a:	491e      	ldr	r1, [pc, #120]	@ (80035d4 <HAL_GPIO_Init+0x2d0>)
 800355c:	4013      	ands	r3, r2
 800355e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d006      	beq.n	800357a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800356c:	4b19      	ldr	r3, [pc, #100]	@ (80035d4 <HAL_GPIO_Init+0x2d0>)
 800356e:	685a      	ldr	r2, [r3, #4]
 8003570:	4918      	ldr	r1, [pc, #96]	@ (80035d4 <HAL_GPIO_Init+0x2d0>)
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	4313      	orrs	r3, r2
 8003576:	604b      	str	r3, [r1, #4]
 8003578:	e006      	b.n	8003588 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800357a:	4b16      	ldr	r3, [pc, #88]	@ (80035d4 <HAL_GPIO_Init+0x2d0>)
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	43db      	mvns	r3, r3
 8003582:	4914      	ldr	r1, [pc, #80]	@ (80035d4 <HAL_GPIO_Init+0x2d0>)
 8003584:	4013      	ands	r3, r2
 8003586:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d021      	beq.n	80035d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003594:	4b0f      	ldr	r3, [pc, #60]	@ (80035d4 <HAL_GPIO_Init+0x2d0>)
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	490e      	ldr	r1, [pc, #56]	@ (80035d4 <HAL_GPIO_Init+0x2d0>)
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	4313      	orrs	r3, r2
 800359e:	600b      	str	r3, [r1, #0]
 80035a0:	e021      	b.n	80035e6 <HAL_GPIO_Init+0x2e2>
 80035a2:	bf00      	nop
 80035a4:	10320000 	.word	0x10320000
 80035a8:	10310000 	.word	0x10310000
 80035ac:	10220000 	.word	0x10220000
 80035b0:	10210000 	.word	0x10210000
 80035b4:	10120000 	.word	0x10120000
 80035b8:	10110000 	.word	0x10110000
 80035bc:	40021000 	.word	0x40021000
 80035c0:	40010000 	.word	0x40010000
 80035c4:	40010800 	.word	0x40010800
 80035c8:	40010c00 	.word	0x40010c00
 80035cc:	40011000 	.word	0x40011000
 80035d0:	40011400 	.word	0x40011400
 80035d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80035d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003608 <HAL_GPIO_Init+0x304>)
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	43db      	mvns	r3, r3
 80035e0:	4909      	ldr	r1, [pc, #36]	@ (8003608 <HAL_GPIO_Init+0x304>)
 80035e2:	4013      	ands	r3, r2
 80035e4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80035e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e8:	3301      	adds	r3, #1
 80035ea:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f2:	fa22 f303 	lsr.w	r3, r2, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f47f ae8e 	bne.w	8003318 <HAL_GPIO_Init+0x14>
  }
}
 80035fc:	bf00      	nop
 80035fe:	bf00      	nop
 8003600:	372c      	adds	r7, #44	@ 0x2c
 8003602:	46bd      	mov	sp, r7
 8003604:	bc80      	pop	{r7}
 8003606:	4770      	bx	lr
 8003608:	40010400 	.word	0x40010400

0800360c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800360c:	b480      	push	{r7}
 800360e:	b089      	sub	sp, #36	@ 0x24
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003616:	2300      	movs	r3, #0
 8003618:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800361a:	e09a      	b.n	8003752 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800361c:	2201      	movs	r2, #1
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	fa02 f303 	lsl.w	r3, r2, r3
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	4013      	ands	r3, r2
 8003628:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 808d 	beq.w	800374c <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8003632:	4a4e      	ldr	r2, [pc, #312]	@ (800376c <HAL_GPIO_DeInit+0x160>)
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	089b      	lsrs	r3, r3, #2
 8003638:	3302      	adds	r3, #2
 800363a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800363e:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	f003 0303 	and.w	r3, r3, #3
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	220f      	movs	r2, #15
 800364a:	fa02 f303 	lsl.w	r3, r2, r3
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	4013      	ands	r3, r2
 8003652:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a46      	ldr	r2, [pc, #280]	@ (8003770 <HAL_GPIO_DeInit+0x164>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d013      	beq.n	8003684 <HAL_GPIO_DeInit+0x78>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a45      	ldr	r2, [pc, #276]	@ (8003774 <HAL_GPIO_DeInit+0x168>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d00d      	beq.n	8003680 <HAL_GPIO_DeInit+0x74>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a44      	ldr	r2, [pc, #272]	@ (8003778 <HAL_GPIO_DeInit+0x16c>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d007      	beq.n	800367c <HAL_GPIO_DeInit+0x70>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a43      	ldr	r2, [pc, #268]	@ (800377c <HAL_GPIO_DeInit+0x170>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d101      	bne.n	8003678 <HAL_GPIO_DeInit+0x6c>
 8003674:	2303      	movs	r3, #3
 8003676:	e006      	b.n	8003686 <HAL_GPIO_DeInit+0x7a>
 8003678:	2304      	movs	r3, #4
 800367a:	e004      	b.n	8003686 <HAL_GPIO_DeInit+0x7a>
 800367c:	2302      	movs	r3, #2
 800367e:	e002      	b.n	8003686 <HAL_GPIO_DeInit+0x7a>
 8003680:	2301      	movs	r3, #1
 8003682:	e000      	b.n	8003686 <HAL_GPIO_DeInit+0x7a>
 8003684:	2300      	movs	r3, #0
 8003686:	69fa      	ldr	r2, [r7, #28]
 8003688:	f002 0203 	and.w	r2, r2, #3
 800368c:	0092      	lsls	r2, r2, #2
 800368e:	4093      	lsls	r3, r2
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	429a      	cmp	r2, r3
 8003694:	d132      	bne.n	80036fc <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8003696:	4b3a      	ldr	r3, [pc, #232]	@ (8003780 <HAL_GPIO_DeInit+0x174>)
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	43db      	mvns	r3, r3
 800369e:	4938      	ldr	r1, [pc, #224]	@ (8003780 <HAL_GPIO_DeInit+0x174>)
 80036a0:	4013      	ands	r3, r2
 80036a2:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80036a4:	4b36      	ldr	r3, [pc, #216]	@ (8003780 <HAL_GPIO_DeInit+0x174>)
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	43db      	mvns	r3, r3
 80036ac:	4934      	ldr	r1, [pc, #208]	@ (8003780 <HAL_GPIO_DeInit+0x174>)
 80036ae:	4013      	ands	r3, r2
 80036b0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80036b2:	4b33      	ldr	r3, [pc, #204]	@ (8003780 <HAL_GPIO_DeInit+0x174>)
 80036b4:	68da      	ldr	r2, [r3, #12]
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	43db      	mvns	r3, r3
 80036ba:	4931      	ldr	r1, [pc, #196]	@ (8003780 <HAL_GPIO_DeInit+0x174>)
 80036bc:	4013      	ands	r3, r2
 80036be:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80036c0:	4b2f      	ldr	r3, [pc, #188]	@ (8003780 <HAL_GPIO_DeInit+0x174>)
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	43db      	mvns	r3, r3
 80036c8:	492d      	ldr	r1, [pc, #180]	@ (8003780 <HAL_GPIO_DeInit+0x174>)
 80036ca:	4013      	ands	r3, r2
 80036cc:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	f003 0303 	and.w	r3, r3, #3
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	220f      	movs	r2, #15
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80036de:	4a23      	ldr	r2, [pc, #140]	@ (800376c <HAL_GPIO_DeInit+0x160>)
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	089b      	lsrs	r3, r3, #2
 80036e4:	3302      	adds	r3, #2
 80036e6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	43da      	mvns	r2, r3
 80036ee:	481f      	ldr	r0, [pc, #124]	@ (800376c <HAL_GPIO_DeInit+0x160>)
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	089b      	lsrs	r3, r3, #2
 80036f4:	400a      	ands	r2, r1
 80036f6:	3302      	adds	r3, #2
 80036f8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	2bff      	cmp	r3, #255	@ 0xff
 8003700:	d801      	bhi.n	8003706 <HAL_GPIO_DeInit+0xfa>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	e001      	b.n	800370a <HAL_GPIO_DeInit+0xfe>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	3304      	adds	r3, #4
 800370a:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	2bff      	cmp	r3, #255	@ 0xff
 8003710:	d802      	bhi.n	8003718 <HAL_GPIO_DeInit+0x10c>
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	e002      	b.n	800371e <HAL_GPIO_DeInit+0x112>
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	3b08      	subs	r3, #8
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	210f      	movs	r1, #15
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	fa01 f303 	lsl.w	r3, r1, r3
 800372c:	43db      	mvns	r3, r3
 800372e:	401a      	ands	r2, r3
 8003730:	2104      	movs	r1, #4
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	fa01 f303 	lsl.w	r3, r1, r3
 8003738:	431a      	orrs	r2, r3
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68da      	ldr	r2, [r3, #12]
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	43db      	mvns	r3, r3
 8003746:	401a      	ands	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	60da      	str	r2, [r3, #12]
    }

    position++;
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	3301      	adds	r3, #1
 8003750:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	fa22 f303 	lsr.w	r3, r2, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	f47f af5e 	bne.w	800361c <HAL_GPIO_DeInit+0x10>
  }
}
 8003760:	bf00      	nop
 8003762:	bf00      	nop
 8003764:	3724      	adds	r7, #36	@ 0x24
 8003766:	46bd      	mov	sp, r7
 8003768:	bc80      	pop	{r7}
 800376a:	4770      	bx	lr
 800376c:	40010000 	.word	0x40010000
 8003770:	40010800 	.word	0x40010800
 8003774:	40010c00 	.word	0x40010c00
 8003778:	40011000 	.word	0x40011000
 800377c:	40011400 	.word	0x40011400
 8003780:	40010400 	.word	0x40010400

08003784 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	460b      	mov	r3, r1
 800378e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	887b      	ldrh	r3, [r7, #2]
 8003796:	4013      	ands	r3, r2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d002      	beq.n	80037a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800379c:	2301      	movs	r3, #1
 800379e:	73fb      	strb	r3, [r7, #15]
 80037a0:	e001      	b.n	80037a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80037a2:	2300      	movs	r3, #0
 80037a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80037a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3714      	adds	r7, #20
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bc80      	pop	{r7}
 80037b0:	4770      	bx	lr

080037b2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b083      	sub	sp, #12
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
 80037ba:	460b      	mov	r3, r1
 80037bc:	807b      	strh	r3, [r7, #2]
 80037be:	4613      	mov	r3, r2
 80037c0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037c2:	787b      	ldrb	r3, [r7, #1]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d003      	beq.n	80037d0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037c8:	887a      	ldrh	r2, [r7, #2]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80037ce:	e003      	b.n	80037d8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80037d0:	887b      	ldrh	r3, [r7, #2]
 80037d2:	041a      	lsls	r2, r3, #16
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	611a      	str	r2, [r3, #16]
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	bc80      	pop	{r7}
 80037e0:	4770      	bx	lr
	...

080037e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e12b      	b.n	8003a4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d106      	bne.n	8003810 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7ff fb54 	bl	8002eb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2224      	movs	r2, #36	@ 0x24
 8003814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 0201 	bic.w	r2, r2, #1
 8003826:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003836:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003846:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003848:	f001 fbfa 	bl	8005040 <HAL_RCC_GetPCLK1Freq>
 800384c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	4a81      	ldr	r2, [pc, #516]	@ (8003a58 <HAL_I2C_Init+0x274>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d807      	bhi.n	8003868 <HAL_I2C_Init+0x84>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	4a80      	ldr	r2, [pc, #512]	@ (8003a5c <HAL_I2C_Init+0x278>)
 800385c:	4293      	cmp	r3, r2
 800385e:	bf94      	ite	ls
 8003860:	2301      	movls	r3, #1
 8003862:	2300      	movhi	r3, #0
 8003864:	b2db      	uxtb	r3, r3
 8003866:	e006      	b.n	8003876 <HAL_I2C_Init+0x92>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	4a7d      	ldr	r2, [pc, #500]	@ (8003a60 <HAL_I2C_Init+0x27c>)
 800386c:	4293      	cmp	r3, r2
 800386e:	bf94      	ite	ls
 8003870:	2301      	movls	r3, #1
 8003872:	2300      	movhi	r3, #0
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e0e7      	b.n	8003a4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	4a78      	ldr	r2, [pc, #480]	@ (8003a64 <HAL_I2C_Init+0x280>)
 8003882:	fba2 2303 	umull	r2, r3, r2, r3
 8003886:	0c9b      	lsrs	r3, r3, #18
 8003888:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68ba      	ldr	r2, [r7, #8]
 800389a:	430a      	orrs	r2, r1
 800389c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	4a6a      	ldr	r2, [pc, #424]	@ (8003a58 <HAL_I2C_Init+0x274>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d802      	bhi.n	80038b8 <HAL_I2C_Init+0xd4>
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	3301      	adds	r3, #1
 80038b6:	e009      	b.n	80038cc <HAL_I2C_Init+0xe8>
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80038be:	fb02 f303 	mul.w	r3, r2, r3
 80038c2:	4a69      	ldr	r2, [pc, #420]	@ (8003a68 <HAL_I2C_Init+0x284>)
 80038c4:	fba2 2303 	umull	r2, r3, r2, r3
 80038c8:	099b      	lsrs	r3, r3, #6
 80038ca:	3301      	adds	r3, #1
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	6812      	ldr	r2, [r2, #0]
 80038d0:	430b      	orrs	r3, r1
 80038d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	69db      	ldr	r3, [r3, #28]
 80038da:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80038de:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	495c      	ldr	r1, [pc, #368]	@ (8003a58 <HAL_I2C_Init+0x274>)
 80038e8:	428b      	cmp	r3, r1
 80038ea:	d819      	bhi.n	8003920 <HAL_I2C_Init+0x13c>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	1e59      	subs	r1, r3, #1
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80038fa:	1c59      	adds	r1, r3, #1
 80038fc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003900:	400b      	ands	r3, r1
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00a      	beq.n	800391c <HAL_I2C_Init+0x138>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	1e59      	subs	r1, r3, #1
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	fbb1 f3f3 	udiv	r3, r1, r3
 8003914:	3301      	adds	r3, #1
 8003916:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800391a:	e051      	b.n	80039c0 <HAL_I2C_Init+0x1dc>
 800391c:	2304      	movs	r3, #4
 800391e:	e04f      	b.n	80039c0 <HAL_I2C_Init+0x1dc>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d111      	bne.n	800394c <HAL_I2C_Init+0x168>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	1e58      	subs	r0, r3, #1
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6859      	ldr	r1, [r3, #4]
 8003930:	460b      	mov	r3, r1
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	440b      	add	r3, r1
 8003936:	fbb0 f3f3 	udiv	r3, r0, r3
 800393a:	3301      	adds	r3, #1
 800393c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003940:	2b00      	cmp	r3, #0
 8003942:	bf0c      	ite	eq
 8003944:	2301      	moveq	r3, #1
 8003946:	2300      	movne	r3, #0
 8003948:	b2db      	uxtb	r3, r3
 800394a:	e012      	b.n	8003972 <HAL_I2C_Init+0x18e>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	1e58      	subs	r0, r3, #1
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6859      	ldr	r1, [r3, #4]
 8003954:	460b      	mov	r3, r1
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	440b      	add	r3, r1
 800395a:	0099      	lsls	r1, r3, #2
 800395c:	440b      	add	r3, r1
 800395e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003962:	3301      	adds	r3, #1
 8003964:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003968:	2b00      	cmp	r3, #0
 800396a:	bf0c      	ite	eq
 800396c:	2301      	moveq	r3, #1
 800396e:	2300      	movne	r3, #0
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <HAL_I2C_Init+0x196>
 8003976:	2301      	movs	r3, #1
 8003978:	e022      	b.n	80039c0 <HAL_I2C_Init+0x1dc>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10e      	bne.n	80039a0 <HAL_I2C_Init+0x1bc>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	1e58      	subs	r0, r3, #1
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6859      	ldr	r1, [r3, #4]
 800398a:	460b      	mov	r3, r1
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	440b      	add	r3, r1
 8003990:	fbb0 f3f3 	udiv	r3, r0, r3
 8003994:	3301      	adds	r3, #1
 8003996:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800399a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800399e:	e00f      	b.n	80039c0 <HAL_I2C_Init+0x1dc>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	1e58      	subs	r0, r3, #1
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6859      	ldr	r1, [r3, #4]
 80039a8:	460b      	mov	r3, r1
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	440b      	add	r3, r1
 80039ae:	0099      	lsls	r1, r3, #2
 80039b0:	440b      	add	r3, r1
 80039b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80039b6:	3301      	adds	r3, #1
 80039b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80039c0:	6879      	ldr	r1, [r7, #4]
 80039c2:	6809      	ldr	r1, [r1, #0]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	69da      	ldr	r2, [r3, #28]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	431a      	orrs	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	430a      	orrs	r2, r1
 80039e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80039ee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	6911      	ldr	r1, [r2, #16]
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	68d2      	ldr	r2, [r2, #12]
 80039fa:	4311      	orrs	r1, r2
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	6812      	ldr	r2, [r2, #0]
 8003a00:	430b      	orrs	r3, r1
 8003a02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	695a      	ldr	r2, [r3, #20]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	431a      	orrs	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f042 0201 	orr.w	r2, r2, #1
 8003a2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2220      	movs	r2, #32
 8003a3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	000186a0 	.word	0x000186a0
 8003a5c:	001e847f 	.word	0x001e847f
 8003a60:	003d08ff 	.word	0x003d08ff
 8003a64:	431bde83 	.word	0x431bde83
 8003a68:	10624dd3 	.word	0x10624dd3

08003a6c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e021      	b.n	8003ac2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2224      	movs	r2, #36	@ 0x24
 8003a82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f022 0201 	bic.w	r2, r2, #1
 8003a94:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f7ff fa4e 	bl	8002f38 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3708      	adds	r7, #8
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
	...

08003acc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b088      	sub	sp, #32
 8003ad0:	af02      	add	r7, sp, #8
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	607a      	str	r2, [r7, #4]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	460b      	mov	r3, r1
 8003ada:	817b      	strh	r3, [r7, #10]
 8003adc:	4613      	mov	r3, r2
 8003ade:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ae0:	f7ff fafe 	bl	80030e0 <HAL_GetTick>
 8003ae4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b20      	cmp	r3, #32
 8003af0:	f040 80e0 	bne.w	8003cb4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	2319      	movs	r3, #25
 8003afa:	2201      	movs	r2, #1
 8003afc:	4970      	ldr	r1, [pc, #448]	@ (8003cc0 <HAL_I2C_Master_Transmit+0x1f4>)
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f000 fc9e 	bl	8004440 <I2C_WaitOnFlagUntilTimeout>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	e0d3      	b.n	8003cb6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d101      	bne.n	8003b1c <HAL_I2C_Master_Transmit+0x50>
 8003b18:	2302      	movs	r3, #2
 8003b1a:	e0cc      	b.n	8003cb6 <HAL_I2C_Master_Transmit+0x1ea>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d007      	beq.n	8003b42 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f042 0201 	orr.w	r2, r2, #1
 8003b40:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b50:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2221      	movs	r2, #33	@ 0x21
 8003b56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2210      	movs	r2, #16
 8003b5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	893a      	ldrh	r2, [r7, #8]
 8003b72:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	4a50      	ldr	r2, [pc, #320]	@ (8003cc4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003b82:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003b84:	8979      	ldrh	r1, [r7, #10]
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	6a3a      	ldr	r2, [r7, #32]
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 fb08 	bl	80041a0 <I2C_MasterRequestWrite>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e08d      	b.n	8003cb6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	613b      	str	r3, [r7, #16]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	613b      	str	r3, [r7, #16]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	613b      	str	r3, [r7, #16]
 8003bae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003bb0:	e066      	b.n	8003c80 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	6a39      	ldr	r1, [r7, #32]
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f000 fd5c 	bl	8004674 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00d      	beq.n	8003bde <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	d107      	bne.n	8003bda <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bd8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e06b      	b.n	8003cb6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be2:	781a      	ldrb	r2, [r3, #0]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bee:	1c5a      	adds	r2, r3, #1
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c06:	3b01      	subs	r3, #1
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	2b04      	cmp	r3, #4
 8003c1a:	d11b      	bne.n	8003c54 <HAL_I2C_Master_Transmit+0x188>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d017      	beq.n	8003c54 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c28:	781a      	ldrb	r2, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c34:	1c5a      	adds	r2, r3, #1
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	3b01      	subs	r3, #1
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	6a39      	ldr	r1, [r7, #32]
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f000 fd53 	bl	8004704 <I2C_WaitOnBTFFlagUntilTimeout>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00d      	beq.n	8003c80 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c68:	2b04      	cmp	r3, #4
 8003c6a:	d107      	bne.n	8003c7c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c7a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e01a      	b.n	8003cb6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d194      	bne.n	8003bb2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	e000      	b.n	8003cb6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003cb4:	2302      	movs	r3, #2
  }
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3718      	adds	r7, #24
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	00100002 	.word	0x00100002
 8003cc4:	ffff0000 	.word	0xffff0000

08003cc8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b08c      	sub	sp, #48	@ 0x30
 8003ccc:	af02      	add	r7, sp, #8
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	607a      	str	r2, [r7, #4]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	817b      	strh	r3, [r7, #10]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ce0:	f7ff f9fe 	bl	80030e0 <HAL_GetTick>
 8003ce4:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b20      	cmp	r3, #32
 8003cf0:	f040 824b 	bne.w	800418a <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf6:	9300      	str	r3, [sp, #0]
 8003cf8:	2319      	movs	r3, #25
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	497f      	ldr	r1, [pc, #508]	@ (8003efc <HAL_I2C_Master_Receive+0x234>)
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f000 fb9e 	bl	8004440 <I2C_WaitOnFlagUntilTimeout>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	e23e      	b.n	800418c <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d101      	bne.n	8003d1c <HAL_I2C_Master_Receive+0x54>
 8003d18:	2302      	movs	r3, #2
 8003d1a:	e237      	b.n	800418c <HAL_I2C_Master_Receive+0x4c4>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d007      	beq.n	8003d42 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f042 0201 	orr.w	r2, r2, #1
 8003d40:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d50:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2222      	movs	r2, #34	@ 0x22
 8003d56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2210      	movs	r2, #16
 8003d5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	893a      	ldrh	r2, [r7, #8]
 8003d72:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d78:	b29a      	uxth	r2, r3
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	4a5f      	ldr	r2, [pc, #380]	@ (8003f00 <HAL_I2C_Master_Receive+0x238>)
 8003d82:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d84:	8979      	ldrh	r1, [r7, #10]
 8003d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f000 fa8a 	bl	80042a4 <I2C_MasterRequestRead>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e1f8      	b.n	800418c <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d113      	bne.n	8003dca <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003da2:	2300      	movs	r3, #0
 8003da4:	61fb      	str	r3, [r7, #28]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	695b      	ldr	r3, [r3, #20]
 8003dac:	61fb      	str	r3, [r7, #28]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	61fb      	str	r3, [r7, #28]
 8003db6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dc6:	601a      	str	r2, [r3, #0]
 8003dc8:	e1cc      	b.n	8004164 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d11e      	bne.n	8003e10 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003de0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003de2:	b672      	cpsid	i
}
 8003de4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003de6:	2300      	movs	r3, #0
 8003de8:	61bb      	str	r3, [r7, #24]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	695b      	ldr	r3, [r3, #20]
 8003df0:	61bb      	str	r3, [r7, #24]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	61bb      	str	r3, [r7, #24]
 8003dfa:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e0a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003e0c:	b662      	cpsie	i
}
 8003e0e:	e035      	b.n	8003e7c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d11e      	bne.n	8003e56 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e26:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e28:	b672      	cpsid	i
}
 8003e2a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	617b      	str	r3, [r7, #20]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	617b      	str	r3, [r7, #20]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	617b      	str	r3, [r7, #20]
 8003e40:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e50:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003e52:	b662      	cpsie	i
}
 8003e54:	e012      	b.n	8003e7c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e66:	2300      	movs	r3, #0
 8003e68:	613b      	str	r3, [r7, #16]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	613b      	str	r3, [r7, #16]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	613b      	str	r3, [r7, #16]
 8003e7a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003e7c:	e172      	b.n	8004164 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e82:	2b03      	cmp	r3, #3
 8003e84:	f200 811f 	bhi.w	80040c6 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d123      	bne.n	8003ed8 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e92:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f000 fc7d 	bl	8004794 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d001      	beq.n	8003ea4 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e173      	b.n	800418c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	691a      	ldr	r2, [r3, #16]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eae:	b2d2      	uxtb	r2, r2
 8003eb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb6:	1c5a      	adds	r2, r3, #1
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ed6:	e145      	b.n	8004164 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d152      	bne.n	8003f86 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee2:	9300      	str	r3, [sp, #0]
 8003ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	4906      	ldr	r1, [pc, #24]	@ (8003f04 <HAL_I2C_Master_Receive+0x23c>)
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f000 faa8 	bl	8004440 <I2C_WaitOnFlagUntilTimeout>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d008      	beq.n	8003f08 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e148      	b.n	800418c <HAL_I2C_Master_Receive+0x4c4>
 8003efa:	bf00      	nop
 8003efc:	00100002 	.word	0x00100002
 8003f00:	ffff0000 	.word	0xffff0000
 8003f04:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003f08:	b672      	cpsid	i
}
 8003f0a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	691a      	ldr	r2, [r3, #16]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f26:	b2d2      	uxtb	r2, r2
 8003f28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2e:	1c5a      	adds	r2, r3, #1
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	3b01      	subs	r3, #1
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003f4e:	b662      	cpsie	i
}
 8003f50:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	691a      	ldr	r2, [r3, #16]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f5c:	b2d2      	uxtb	r2, r2
 8003f5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f64:	1c5a      	adds	r2, r3, #1
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003f84:	e0ee      	b.n	8004164 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f88:	9300      	str	r3, [sp, #0]
 8003f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	4981      	ldr	r1, [pc, #516]	@ (8004194 <HAL_I2C_Master_Receive+0x4cc>)
 8003f90:	68f8      	ldr	r0, [r7, #12]
 8003f92:	f000 fa55 	bl	8004440 <I2C_WaitOnFlagUntilTimeout>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d001      	beq.n	8003fa0 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e0f5      	b.n	800418c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003fb0:	b672      	cpsid	i
}
 8003fb2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	691a      	ldr	r2, [r3, #16]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fbe:	b2d2      	uxtb	r2, r2
 8003fc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc6:	1c5a      	adds	r2, r3, #1
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003fe6:	4b6c      	ldr	r3, [pc, #432]	@ (8004198 <HAL_I2C_Master_Receive+0x4d0>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	08db      	lsrs	r3, r3, #3
 8003fec:	4a6b      	ldr	r2, [pc, #428]	@ (800419c <HAL_I2C_Master_Receive+0x4d4>)
 8003fee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff2:	0a1a      	lsrs	r2, r3, #8
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4413      	add	r3, r2
 8003ffa:	00da      	lsls	r2, r3, #3
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004000:	6a3b      	ldr	r3, [r7, #32]
 8004002:	3b01      	subs	r3, #1
 8004004:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004006:	6a3b      	ldr	r3, [r7, #32]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d118      	bne.n	800403e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2220      	movs	r2, #32
 8004016:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004026:	f043 0220 	orr.w	r2, r3, #32
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800402e:	b662      	cpsie	i
}
 8004030:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e0a6      	b.n	800418c <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	695b      	ldr	r3, [r3, #20]
 8004044:	f003 0304 	and.w	r3, r3, #4
 8004048:	2b04      	cmp	r3, #4
 800404a:	d1d9      	bne.n	8004000 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800405a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	691a      	ldr	r2, [r3, #16]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004066:	b2d2      	uxtb	r2, r2
 8004068:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406e:	1c5a      	adds	r2, r3, #1
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004078:	3b01      	subs	r3, #1
 800407a:	b29a      	uxth	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004084:	b29b      	uxth	r3, r3
 8004086:	3b01      	subs	r3, #1
 8004088:	b29a      	uxth	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800408e:	b662      	cpsie	i
}
 8004090:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	691a      	ldr	r2, [r3, #16]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409c:	b2d2      	uxtb	r2, r2
 800409e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a4:	1c5a      	adds	r2, r3, #1
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040ae:	3b01      	subs	r3, #1
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	3b01      	subs	r3, #1
 80040be:	b29a      	uxth	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80040c4:	e04e      	b.n	8004164 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040c8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f000 fb62 	bl	8004794 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e058      	b.n	800418c <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	691a      	ldr	r2, [r3, #16]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e4:	b2d2      	uxtb	r2, r2
 80040e6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ec:	1c5a      	adds	r2, r3, #1
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040f6:	3b01      	subs	r3, #1
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004102:	b29b      	uxth	r3, r3
 8004104:	3b01      	subs	r3, #1
 8004106:	b29a      	uxth	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	f003 0304 	and.w	r3, r3, #4
 8004116:	2b04      	cmp	r3, #4
 8004118:	d124      	bne.n	8004164 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800411e:	2b03      	cmp	r3, #3
 8004120:	d107      	bne.n	8004132 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004130:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	691a      	ldr	r2, [r3, #16]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800413c:	b2d2      	uxtb	r2, r2
 800413e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004144:	1c5a      	adds	r2, r3, #1
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800414e:	3b01      	subs	r3, #1
 8004150:	b29a      	uxth	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800415a:	b29b      	uxth	r3, r3
 800415c:	3b01      	subs	r3, #1
 800415e:	b29a      	uxth	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004168:	2b00      	cmp	r3, #0
 800416a:	f47f ae88 	bne.w	8003e7e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2220      	movs	r2, #32
 8004172:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004186:	2300      	movs	r3, #0
 8004188:	e000      	b.n	800418c <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800418a:	2302      	movs	r3, #2
  }
}
 800418c:	4618      	mov	r0, r3
 800418e:	3728      	adds	r7, #40	@ 0x28
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	00010004 	.word	0x00010004
 8004198:	20000038 	.word	0x20000038
 800419c:	14f8b589 	.word	0x14f8b589

080041a0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b088      	sub	sp, #32
 80041a4:	af02      	add	r7, sp, #8
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	607a      	str	r2, [r7, #4]
 80041aa:	603b      	str	r3, [r7, #0]
 80041ac:	460b      	mov	r3, r1
 80041ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	2b08      	cmp	r3, #8
 80041ba:	d006      	beq.n	80041ca <I2C_MasterRequestWrite+0x2a>
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d003      	beq.n	80041ca <I2C_MasterRequestWrite+0x2a>
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80041c8:	d108      	bne.n	80041dc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041d8:	601a      	str	r2, [r3, #0]
 80041da:	e00b      	b.n	80041f4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e0:	2b12      	cmp	r3, #18
 80041e2:	d107      	bne.n	80041f4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	9300      	str	r3, [sp, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f000 f91d 	bl	8004440 <I2C_WaitOnFlagUntilTimeout>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00d      	beq.n	8004228 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004216:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800421a:	d103      	bne.n	8004224 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004222:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e035      	b.n	8004294 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004230:	d108      	bne.n	8004244 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004232:	897b      	ldrh	r3, [r7, #10]
 8004234:	b2db      	uxtb	r3, r3
 8004236:	461a      	mov	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004240:	611a      	str	r2, [r3, #16]
 8004242:	e01b      	b.n	800427c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004244:	897b      	ldrh	r3, [r7, #10]
 8004246:	11db      	asrs	r3, r3, #7
 8004248:	b2db      	uxtb	r3, r3
 800424a:	f003 0306 	and.w	r3, r3, #6
 800424e:	b2db      	uxtb	r3, r3
 8004250:	f063 030f 	orn	r3, r3, #15
 8004254:	b2da      	uxtb	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	490e      	ldr	r1, [pc, #56]	@ (800429c <I2C_MasterRequestWrite+0xfc>)
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f000 f966 	bl	8004534 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e010      	b.n	8004294 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004272:	897b      	ldrh	r3, [r7, #10]
 8004274:	b2da      	uxtb	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	4907      	ldr	r1, [pc, #28]	@ (80042a0 <I2C_MasterRequestWrite+0x100>)
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f000 f956 	bl	8004534 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e000      	b.n	8004294 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3718      	adds	r7, #24
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	00010008 	.word	0x00010008
 80042a0:	00010002 	.word	0x00010002

080042a4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b088      	sub	sp, #32
 80042a8:	af02      	add	r7, sp, #8
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	607a      	str	r2, [r7, #4]
 80042ae:	603b      	str	r3, [r7, #0]
 80042b0:	460b      	mov	r3, r1
 80042b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80042c8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	2b08      	cmp	r3, #8
 80042ce:	d006      	beq.n	80042de <I2C_MasterRequestRead+0x3a>
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d003      	beq.n	80042de <I2C_MasterRequestRead+0x3a>
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80042dc:	d108      	bne.n	80042f0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042ec:	601a      	str	r2, [r3, #0]
 80042ee:	e00b      	b.n	8004308 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f4:	2b11      	cmp	r3, #17
 80042f6:	d107      	bne.n	8004308 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004306:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	9300      	str	r3, [sp, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f000 f893 	bl	8004440 <I2C_WaitOnFlagUntilTimeout>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00d      	beq.n	800433c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800432a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800432e:	d103      	bne.n	8004338 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004336:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e079      	b.n	8004430 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004344:	d108      	bne.n	8004358 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004346:	897b      	ldrh	r3, [r7, #10]
 8004348:	b2db      	uxtb	r3, r3
 800434a:	f043 0301 	orr.w	r3, r3, #1
 800434e:	b2da      	uxtb	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	611a      	str	r2, [r3, #16]
 8004356:	e05f      	b.n	8004418 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004358:	897b      	ldrh	r3, [r7, #10]
 800435a:	11db      	asrs	r3, r3, #7
 800435c:	b2db      	uxtb	r3, r3
 800435e:	f003 0306 	and.w	r3, r3, #6
 8004362:	b2db      	uxtb	r3, r3
 8004364:	f063 030f 	orn	r3, r3, #15
 8004368:	b2da      	uxtb	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	4930      	ldr	r1, [pc, #192]	@ (8004438 <I2C_MasterRequestRead+0x194>)
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	f000 f8dc 	bl	8004534 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e054      	b.n	8004430 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004386:	897b      	ldrh	r3, [r7, #10]
 8004388:	b2da      	uxtb	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	4929      	ldr	r1, [pc, #164]	@ (800443c <I2C_MasterRequestRead+0x198>)
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f000 f8cc 	bl	8004534 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e044      	b.n	8004430 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043a6:	2300      	movs	r3, #0
 80043a8:	613b      	str	r3, [r7, #16]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	613b      	str	r3, [r7, #16]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	613b      	str	r3, [r7, #16]
 80043ba:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043ca:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	9300      	str	r3, [sp, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f000 f831 	bl	8004440 <I2C_WaitOnFlagUntilTimeout>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00d      	beq.n	8004400 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043f2:	d103      	bne.n	80043fc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043fa:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e017      	b.n	8004430 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004400:	897b      	ldrh	r3, [r7, #10]
 8004402:	11db      	asrs	r3, r3, #7
 8004404:	b2db      	uxtb	r3, r3
 8004406:	f003 0306 	and.w	r3, r3, #6
 800440a:	b2db      	uxtb	r3, r3
 800440c:	f063 030e 	orn	r3, r3, #14
 8004410:	b2da      	uxtb	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	4907      	ldr	r1, [pc, #28]	@ (800443c <I2C_MasterRequestRead+0x198>)
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f000 f888 	bl	8004534 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e000      	b.n	8004430 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3718      	adds	r7, #24
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	00010008 	.word	0x00010008
 800443c:	00010002 	.word	0x00010002

08004440 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	603b      	str	r3, [r7, #0]
 800444c:	4613      	mov	r3, r2
 800444e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004450:	e048      	b.n	80044e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004458:	d044      	beq.n	80044e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800445a:	f7fe fe41 	bl	80030e0 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	683a      	ldr	r2, [r7, #0]
 8004466:	429a      	cmp	r2, r3
 8004468:	d302      	bcc.n	8004470 <I2C_WaitOnFlagUntilTimeout+0x30>
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d139      	bne.n	80044e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	0c1b      	lsrs	r3, r3, #16
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b01      	cmp	r3, #1
 8004478:	d10d      	bne.n	8004496 <I2C_WaitOnFlagUntilTimeout+0x56>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	43da      	mvns	r2, r3
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	4013      	ands	r3, r2
 8004486:	b29b      	uxth	r3, r3
 8004488:	2b00      	cmp	r3, #0
 800448a:	bf0c      	ite	eq
 800448c:	2301      	moveq	r3, #1
 800448e:	2300      	movne	r3, #0
 8004490:	b2db      	uxtb	r3, r3
 8004492:	461a      	mov	r2, r3
 8004494:	e00c      	b.n	80044b0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	43da      	mvns	r2, r3
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	4013      	ands	r3, r2
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	bf0c      	ite	eq
 80044a8:	2301      	moveq	r3, #1
 80044aa:	2300      	movne	r3, #0
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	461a      	mov	r2, r3
 80044b0:	79fb      	ldrb	r3, [r7, #7]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d116      	bne.n	80044e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2220      	movs	r2, #32
 80044c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d0:	f043 0220 	orr.w	r2, r3, #32
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e023      	b.n	800452c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	0c1b      	lsrs	r3, r3, #16
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d10d      	bne.n	800450a <I2C_WaitOnFlagUntilTimeout+0xca>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	43da      	mvns	r2, r3
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	4013      	ands	r3, r2
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	bf0c      	ite	eq
 8004500:	2301      	moveq	r3, #1
 8004502:	2300      	movne	r3, #0
 8004504:	b2db      	uxtb	r3, r3
 8004506:	461a      	mov	r2, r3
 8004508:	e00c      	b.n	8004524 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	43da      	mvns	r2, r3
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	4013      	ands	r3, r2
 8004516:	b29b      	uxth	r3, r3
 8004518:	2b00      	cmp	r3, #0
 800451a:	bf0c      	ite	eq
 800451c:	2301      	moveq	r3, #1
 800451e:	2300      	movne	r3, #0
 8004520:	b2db      	uxtb	r3, r3
 8004522:	461a      	mov	r2, r3
 8004524:	79fb      	ldrb	r3, [r7, #7]
 8004526:	429a      	cmp	r2, r3
 8004528:	d093      	beq.n	8004452 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3710      	adds	r7, #16
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
 8004540:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004542:	e071      	b.n	8004628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800454e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004552:	d123      	bne.n	800459c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004562:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800456c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2220      	movs	r2, #32
 8004578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004588:	f043 0204 	orr.w	r2, r3, #4
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e067      	b.n	800466c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a2:	d041      	beq.n	8004628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045a4:	f7fe fd9c 	bl	80030e0 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d302      	bcc.n	80045ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d136      	bne.n	8004628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	0c1b      	lsrs	r3, r3, #16
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d10c      	bne.n	80045de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	43da      	mvns	r2, r3
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	4013      	ands	r3, r2
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	bf14      	ite	ne
 80045d6:	2301      	movne	r3, #1
 80045d8:	2300      	moveq	r3, #0
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	e00b      	b.n	80045f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	43da      	mvns	r2, r3
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	4013      	ands	r3, r2
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	bf14      	ite	ne
 80045f0:	2301      	movne	r3, #1
 80045f2:	2300      	moveq	r3, #0
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d016      	beq.n	8004628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2220      	movs	r2, #32
 8004604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004614:	f043 0220 	orr.w	r2, r3, #32
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e021      	b.n	800466c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	0c1b      	lsrs	r3, r3, #16
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2b01      	cmp	r3, #1
 8004630:	d10c      	bne.n	800464c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	43da      	mvns	r2, r3
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	4013      	ands	r3, r2
 800463e:	b29b      	uxth	r3, r3
 8004640:	2b00      	cmp	r3, #0
 8004642:	bf14      	ite	ne
 8004644:	2301      	movne	r3, #1
 8004646:	2300      	moveq	r3, #0
 8004648:	b2db      	uxtb	r3, r3
 800464a:	e00b      	b.n	8004664 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	43da      	mvns	r2, r3
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	4013      	ands	r3, r2
 8004658:	b29b      	uxth	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	bf14      	ite	ne
 800465e:	2301      	movne	r3, #1
 8004660:	2300      	moveq	r3, #0
 8004662:	b2db      	uxtb	r3, r3
 8004664:	2b00      	cmp	r3, #0
 8004666:	f47f af6d 	bne.w	8004544 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	3710      	adds	r7, #16
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004680:	e034      	b.n	80046ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	f000 f8e3 	bl	800484e <I2C_IsAcknowledgeFailed>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d001      	beq.n	8004692 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e034      	b.n	80046fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004698:	d028      	beq.n	80046ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800469a:	f7fe fd21 	bl	80030e0 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	68ba      	ldr	r2, [r7, #8]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d302      	bcc.n	80046b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d11d      	bne.n	80046ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046ba:	2b80      	cmp	r3, #128	@ 0x80
 80046bc:	d016      	beq.n	80046ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2220      	movs	r2, #32
 80046c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d8:	f043 0220 	orr.w	r2, r3, #32
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e007      	b.n	80046fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046f6:	2b80      	cmp	r3, #128	@ 0x80
 80046f8:	d1c3      	bne.n	8004682 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004710:	e034      	b.n	800477c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f000 f89b 	bl	800484e <I2C_IsAcknowledgeFailed>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d001      	beq.n	8004722 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e034      	b.n	800478c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004728:	d028      	beq.n	800477c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800472a:	f7fe fcd9 	bl	80030e0 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	429a      	cmp	r2, r3
 8004738:	d302      	bcc.n	8004740 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d11d      	bne.n	800477c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	f003 0304 	and.w	r3, r3, #4
 800474a:	2b04      	cmp	r3, #4
 800474c:	d016      	beq.n	800477c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2220      	movs	r2, #32
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004768:	f043 0220 	orr.w	r2, r3, #32
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e007      	b.n	800478c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	f003 0304 	and.w	r3, r3, #4
 8004786:	2b04      	cmp	r3, #4
 8004788:	d1c3      	bne.n	8004712 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047a0:	e049      	b.n	8004836 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	f003 0310 	and.w	r3, r3, #16
 80047ac:	2b10      	cmp	r3, #16
 80047ae:	d119      	bne.n	80047e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f06f 0210 	mvn.w	r2, #16
 80047b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2220      	movs	r2, #32
 80047c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e030      	b.n	8004846 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047e4:	f7fe fc7c 	bl	80030e0 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d302      	bcc.n	80047fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d11d      	bne.n	8004836 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	695b      	ldr	r3, [r3, #20]
 8004800:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004804:	2b40      	cmp	r3, #64	@ 0x40
 8004806:	d016      	beq.n	8004836 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2220      	movs	r2, #32
 8004812:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004822:	f043 0220 	orr.w	r2, r3, #32
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e007      	b.n	8004846 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	695b      	ldr	r3, [r3, #20]
 800483c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004840:	2b40      	cmp	r3, #64	@ 0x40
 8004842:	d1ae      	bne.n	80047a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800484e:	b480      	push	{r7}
 8004850:	b083      	sub	sp, #12
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004860:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004864:	d11b      	bne.n	800489e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800486e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2220      	movs	r2, #32
 800487a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488a:	f043 0204 	orr.w	r2, r3, #4
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e000      	b.n	80048a0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bc80      	pop	{r7}
 80048a8:	4770      	bx	lr
	...

080048ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e272      	b.n	8004da4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f000 8087 	beq.w	80049da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80048cc:	4b92      	ldr	r3, [pc, #584]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f003 030c 	and.w	r3, r3, #12
 80048d4:	2b04      	cmp	r3, #4
 80048d6:	d00c      	beq.n	80048f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80048d8:	4b8f      	ldr	r3, [pc, #572]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f003 030c 	and.w	r3, r3, #12
 80048e0:	2b08      	cmp	r3, #8
 80048e2:	d112      	bne.n	800490a <HAL_RCC_OscConfig+0x5e>
 80048e4:	4b8c      	ldr	r3, [pc, #560]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048f0:	d10b      	bne.n	800490a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048f2:	4b89      	ldr	r3, [pc, #548]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d06c      	beq.n	80049d8 <HAL_RCC_OscConfig+0x12c>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d168      	bne.n	80049d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e24c      	b.n	8004da4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004912:	d106      	bne.n	8004922 <HAL_RCC_OscConfig+0x76>
 8004914:	4b80      	ldr	r3, [pc, #512]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a7f      	ldr	r2, [pc, #508]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 800491a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800491e:	6013      	str	r3, [r2, #0]
 8004920:	e02e      	b.n	8004980 <HAL_RCC_OscConfig+0xd4>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10c      	bne.n	8004944 <HAL_RCC_OscConfig+0x98>
 800492a:	4b7b      	ldr	r3, [pc, #492]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a7a      	ldr	r2, [pc, #488]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 8004930:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004934:	6013      	str	r3, [r2, #0]
 8004936:	4b78      	ldr	r3, [pc, #480]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a77      	ldr	r2, [pc, #476]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 800493c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004940:	6013      	str	r3, [r2, #0]
 8004942:	e01d      	b.n	8004980 <HAL_RCC_OscConfig+0xd4>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800494c:	d10c      	bne.n	8004968 <HAL_RCC_OscConfig+0xbc>
 800494e:	4b72      	ldr	r3, [pc, #456]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a71      	ldr	r2, [pc, #452]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 8004954:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004958:	6013      	str	r3, [r2, #0]
 800495a:	4b6f      	ldr	r3, [pc, #444]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a6e      	ldr	r2, [pc, #440]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 8004960:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004964:	6013      	str	r3, [r2, #0]
 8004966:	e00b      	b.n	8004980 <HAL_RCC_OscConfig+0xd4>
 8004968:	4b6b      	ldr	r3, [pc, #428]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a6a      	ldr	r2, [pc, #424]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 800496e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004972:	6013      	str	r3, [r2, #0]
 8004974:	4b68      	ldr	r3, [pc, #416]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a67      	ldr	r2, [pc, #412]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 800497a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800497e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d013      	beq.n	80049b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004988:	f7fe fbaa 	bl	80030e0 <HAL_GetTick>
 800498c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800498e:	e008      	b.n	80049a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004990:	f7fe fba6 	bl	80030e0 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b64      	cmp	r3, #100	@ 0x64
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e200      	b.n	8004da4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049a2:	4b5d      	ldr	r3, [pc, #372]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d0f0      	beq.n	8004990 <HAL_RCC_OscConfig+0xe4>
 80049ae:	e014      	b.n	80049da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b0:	f7fe fb96 	bl	80030e0 <HAL_GetTick>
 80049b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049b6:	e008      	b.n	80049ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049b8:	f7fe fb92 	bl	80030e0 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	2b64      	cmp	r3, #100	@ 0x64
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e1ec      	b.n	8004da4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ca:	4b53      	ldr	r3, [pc, #332]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1f0      	bne.n	80049b8 <HAL_RCC_OscConfig+0x10c>
 80049d6:	e000      	b.n	80049da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d063      	beq.n	8004aae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80049e6:	4b4c      	ldr	r3, [pc, #304]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f003 030c 	and.w	r3, r3, #12
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00b      	beq.n	8004a0a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80049f2:	4b49      	ldr	r3, [pc, #292]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f003 030c 	and.w	r3, r3, #12
 80049fa:	2b08      	cmp	r3, #8
 80049fc:	d11c      	bne.n	8004a38 <HAL_RCC_OscConfig+0x18c>
 80049fe:	4b46      	ldr	r3, [pc, #280]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d116      	bne.n	8004a38 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a0a:	4b43      	ldr	r3, [pc, #268]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d005      	beq.n	8004a22 <HAL_RCC_OscConfig+0x176>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d001      	beq.n	8004a22 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e1c0      	b.n	8004da4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a22:	4b3d      	ldr	r3, [pc, #244]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	00db      	lsls	r3, r3, #3
 8004a30:	4939      	ldr	r1, [pc, #228]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a36:	e03a      	b.n	8004aae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d020      	beq.n	8004a82 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a40:	4b36      	ldr	r3, [pc, #216]	@ (8004b1c <HAL_RCC_OscConfig+0x270>)
 8004a42:	2201      	movs	r2, #1
 8004a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a46:	f7fe fb4b 	bl	80030e0 <HAL_GetTick>
 8004a4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a4c:	e008      	b.n	8004a60 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a4e:	f7fe fb47 	bl	80030e0 <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d901      	bls.n	8004a60 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e1a1      	b.n	8004da4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a60:	4b2d      	ldr	r3, [pc, #180]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0302 	and.w	r3, r3, #2
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d0f0      	beq.n	8004a4e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a6c:	4b2a      	ldr	r3, [pc, #168]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	00db      	lsls	r3, r3, #3
 8004a7a:	4927      	ldr	r1, [pc, #156]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	600b      	str	r3, [r1, #0]
 8004a80:	e015      	b.n	8004aae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a82:	4b26      	ldr	r3, [pc, #152]	@ (8004b1c <HAL_RCC_OscConfig+0x270>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a88:	f7fe fb2a 	bl	80030e0 <HAL_GetTick>
 8004a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a8e:	e008      	b.n	8004aa2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a90:	f7fe fb26 	bl	80030e0 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d901      	bls.n	8004aa2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e180      	b.n	8004da4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aa2:	4b1d      	ldr	r3, [pc, #116]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1f0      	bne.n	8004a90 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0308 	and.w	r3, r3, #8
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d03a      	beq.n	8004b30 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d019      	beq.n	8004af6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ac2:	4b17      	ldr	r3, [pc, #92]	@ (8004b20 <HAL_RCC_OscConfig+0x274>)
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ac8:	f7fe fb0a 	bl	80030e0 <HAL_GetTick>
 8004acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ace:	e008      	b.n	8004ae2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ad0:	f7fe fb06 	bl	80030e0 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e160      	b.n	8004da4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8004b18 <HAL_RCC_OscConfig+0x26c>)
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d0f0      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004aee:	2001      	movs	r0, #1
 8004af0:	f000 faba 	bl	8005068 <RCC_Delay>
 8004af4:	e01c      	b.n	8004b30 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004af6:	4b0a      	ldr	r3, [pc, #40]	@ (8004b20 <HAL_RCC_OscConfig+0x274>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004afc:	f7fe faf0 	bl	80030e0 <HAL_GetTick>
 8004b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b02:	e00f      	b.n	8004b24 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b04:	f7fe faec 	bl	80030e0 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d908      	bls.n	8004b24 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e146      	b.n	8004da4 <HAL_RCC_OscConfig+0x4f8>
 8004b16:	bf00      	nop
 8004b18:	40021000 	.word	0x40021000
 8004b1c:	42420000 	.word	0x42420000
 8004b20:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b24:	4b92      	ldr	r3, [pc, #584]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b28:	f003 0302 	and.w	r3, r3, #2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1e9      	bne.n	8004b04 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0304 	and.w	r3, r3, #4
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f000 80a6 	beq.w	8004c8a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b42:	4b8b      	ldr	r3, [pc, #556]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004b44:	69db      	ldr	r3, [r3, #28]
 8004b46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d10d      	bne.n	8004b6a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b4e:	4b88      	ldr	r3, [pc, #544]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004b50:	69db      	ldr	r3, [r3, #28]
 8004b52:	4a87      	ldr	r2, [pc, #540]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004b54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b58:	61d3      	str	r3, [r2, #28]
 8004b5a:	4b85      	ldr	r3, [pc, #532]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004b5c:	69db      	ldr	r3, [r3, #28]
 8004b5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b62:	60bb      	str	r3, [r7, #8]
 8004b64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b66:	2301      	movs	r3, #1
 8004b68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b6a:	4b82      	ldr	r3, [pc, #520]	@ (8004d74 <HAL_RCC_OscConfig+0x4c8>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d118      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b76:	4b7f      	ldr	r3, [pc, #508]	@ (8004d74 <HAL_RCC_OscConfig+0x4c8>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a7e      	ldr	r2, [pc, #504]	@ (8004d74 <HAL_RCC_OscConfig+0x4c8>)
 8004b7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b82:	f7fe faad 	bl	80030e0 <HAL_GetTick>
 8004b86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b88:	e008      	b.n	8004b9c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b8a:	f7fe faa9 	bl	80030e0 <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	2b64      	cmp	r3, #100	@ 0x64
 8004b96:	d901      	bls.n	8004b9c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e103      	b.n	8004da4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b9c:	4b75      	ldr	r3, [pc, #468]	@ (8004d74 <HAL_RCC_OscConfig+0x4c8>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d0f0      	beq.n	8004b8a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d106      	bne.n	8004bbe <HAL_RCC_OscConfig+0x312>
 8004bb0:	4b6f      	ldr	r3, [pc, #444]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004bb2:	6a1b      	ldr	r3, [r3, #32]
 8004bb4:	4a6e      	ldr	r2, [pc, #440]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004bb6:	f043 0301 	orr.w	r3, r3, #1
 8004bba:	6213      	str	r3, [r2, #32]
 8004bbc:	e02d      	b.n	8004c1a <HAL_RCC_OscConfig+0x36e>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d10c      	bne.n	8004be0 <HAL_RCC_OscConfig+0x334>
 8004bc6:	4b6a      	ldr	r3, [pc, #424]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	4a69      	ldr	r2, [pc, #420]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004bcc:	f023 0301 	bic.w	r3, r3, #1
 8004bd0:	6213      	str	r3, [r2, #32]
 8004bd2:	4b67      	ldr	r3, [pc, #412]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	4a66      	ldr	r2, [pc, #408]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004bd8:	f023 0304 	bic.w	r3, r3, #4
 8004bdc:	6213      	str	r3, [r2, #32]
 8004bde:	e01c      	b.n	8004c1a <HAL_RCC_OscConfig+0x36e>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	2b05      	cmp	r3, #5
 8004be6:	d10c      	bne.n	8004c02 <HAL_RCC_OscConfig+0x356>
 8004be8:	4b61      	ldr	r3, [pc, #388]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004bea:	6a1b      	ldr	r3, [r3, #32]
 8004bec:	4a60      	ldr	r2, [pc, #384]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004bee:	f043 0304 	orr.w	r3, r3, #4
 8004bf2:	6213      	str	r3, [r2, #32]
 8004bf4:	4b5e      	ldr	r3, [pc, #376]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004bf6:	6a1b      	ldr	r3, [r3, #32]
 8004bf8:	4a5d      	ldr	r2, [pc, #372]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004bfa:	f043 0301 	orr.w	r3, r3, #1
 8004bfe:	6213      	str	r3, [r2, #32]
 8004c00:	e00b      	b.n	8004c1a <HAL_RCC_OscConfig+0x36e>
 8004c02:	4b5b      	ldr	r3, [pc, #364]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	4a5a      	ldr	r2, [pc, #360]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004c08:	f023 0301 	bic.w	r3, r3, #1
 8004c0c:	6213      	str	r3, [r2, #32]
 8004c0e:	4b58      	ldr	r3, [pc, #352]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	4a57      	ldr	r2, [pc, #348]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004c14:	f023 0304 	bic.w	r3, r3, #4
 8004c18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d015      	beq.n	8004c4e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c22:	f7fe fa5d 	bl	80030e0 <HAL_GetTick>
 8004c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c28:	e00a      	b.n	8004c40 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c2a:	f7fe fa59 	bl	80030e0 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d901      	bls.n	8004c40 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e0b1      	b.n	8004da4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c40:	4b4b      	ldr	r3, [pc, #300]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004c42:	6a1b      	ldr	r3, [r3, #32]
 8004c44:	f003 0302 	and.w	r3, r3, #2
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d0ee      	beq.n	8004c2a <HAL_RCC_OscConfig+0x37e>
 8004c4c:	e014      	b.n	8004c78 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c4e:	f7fe fa47 	bl	80030e0 <HAL_GetTick>
 8004c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c54:	e00a      	b.n	8004c6c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c56:	f7fe fa43 	bl	80030e0 <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d901      	bls.n	8004c6c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e09b      	b.n	8004da4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c6c:	4b40      	ldr	r3, [pc, #256]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	f003 0302 	and.w	r3, r3, #2
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1ee      	bne.n	8004c56 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c78:	7dfb      	ldrb	r3, [r7, #23]
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d105      	bne.n	8004c8a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c7e:	4b3c      	ldr	r3, [pc, #240]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004c80:	69db      	ldr	r3, [r3, #28]
 8004c82:	4a3b      	ldr	r2, [pc, #236]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004c84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c88:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	69db      	ldr	r3, [r3, #28]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f000 8087 	beq.w	8004da2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c94:	4b36      	ldr	r3, [pc, #216]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f003 030c 	and.w	r3, r3, #12
 8004c9c:	2b08      	cmp	r3, #8
 8004c9e:	d061      	beq.n	8004d64 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	69db      	ldr	r3, [r3, #28]
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d146      	bne.n	8004d36 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ca8:	4b33      	ldr	r3, [pc, #204]	@ (8004d78 <HAL_RCC_OscConfig+0x4cc>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cae:	f7fe fa17 	bl	80030e0 <HAL_GetTick>
 8004cb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cb4:	e008      	b.n	8004cc8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cb6:	f7fe fa13 	bl	80030e0 <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d901      	bls.n	8004cc8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e06d      	b.n	8004da4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cc8:	4b29      	ldr	r3, [pc, #164]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d1f0      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a1b      	ldr	r3, [r3, #32]
 8004cd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cdc:	d108      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004cde:	4b24      	ldr	r3, [pc, #144]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	4921      	ldr	r1, [pc, #132]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cf0:	4b1f      	ldr	r3, [pc, #124]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a19      	ldr	r1, [r3, #32]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d00:	430b      	orrs	r3, r1
 8004d02:	491b      	ldr	r1, [pc, #108]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d08:	4b1b      	ldr	r3, [pc, #108]	@ (8004d78 <HAL_RCC_OscConfig+0x4cc>)
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d0e:	f7fe f9e7 	bl	80030e0 <HAL_GetTick>
 8004d12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d14:	e008      	b.n	8004d28 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d16:	f7fe f9e3 	bl	80030e0 <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d901      	bls.n	8004d28 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e03d      	b.n	8004da4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d28:	4b11      	ldr	r3, [pc, #68]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d0f0      	beq.n	8004d16 <HAL_RCC_OscConfig+0x46a>
 8004d34:	e035      	b.n	8004da2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d36:	4b10      	ldr	r3, [pc, #64]	@ (8004d78 <HAL_RCC_OscConfig+0x4cc>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d3c:	f7fe f9d0 	bl	80030e0 <HAL_GetTick>
 8004d40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d42:	e008      	b.n	8004d56 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d44:	f7fe f9cc 	bl	80030e0 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e026      	b.n	8004da4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d56:	4b06      	ldr	r3, [pc, #24]	@ (8004d70 <HAL_RCC_OscConfig+0x4c4>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1f0      	bne.n	8004d44 <HAL_RCC_OscConfig+0x498>
 8004d62:	e01e      	b.n	8004da2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	69db      	ldr	r3, [r3, #28]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d107      	bne.n	8004d7c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e019      	b.n	8004da4 <HAL_RCC_OscConfig+0x4f8>
 8004d70:	40021000 	.word	0x40021000
 8004d74:	40007000 	.word	0x40007000
 8004d78:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8004dac <HAL_RCC_OscConfig+0x500>)
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a1b      	ldr	r3, [r3, #32]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d106      	bne.n	8004d9e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d001      	beq.n	8004da2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e000      	b.n	8004da4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3718      	adds	r7, #24
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	40021000 	.word	0x40021000

08004db0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d101      	bne.n	8004dc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e0d0      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004dc4:	4b6a      	ldr	r3, [pc, #424]	@ (8004f70 <HAL_RCC_ClockConfig+0x1c0>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0307 	and.w	r3, r3, #7
 8004dcc:	683a      	ldr	r2, [r7, #0]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d910      	bls.n	8004df4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dd2:	4b67      	ldr	r3, [pc, #412]	@ (8004f70 <HAL_RCC_ClockConfig+0x1c0>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f023 0207 	bic.w	r2, r3, #7
 8004dda:	4965      	ldr	r1, [pc, #404]	@ (8004f70 <HAL_RCC_ClockConfig+0x1c0>)
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004de2:	4b63      	ldr	r3, [pc, #396]	@ (8004f70 <HAL_RCC_ClockConfig+0x1c0>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0307 	and.w	r3, r3, #7
 8004dea:	683a      	ldr	r2, [r7, #0]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d001      	beq.n	8004df4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e0b8      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0302 	and.w	r3, r3, #2
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d020      	beq.n	8004e42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0304 	and.w	r3, r3, #4
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d005      	beq.n	8004e18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e0c:	4b59      	ldr	r3, [pc, #356]	@ (8004f74 <HAL_RCC_ClockConfig+0x1c4>)
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	4a58      	ldr	r2, [pc, #352]	@ (8004f74 <HAL_RCC_ClockConfig+0x1c4>)
 8004e12:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004e16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0308 	and.w	r3, r3, #8
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d005      	beq.n	8004e30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e24:	4b53      	ldr	r3, [pc, #332]	@ (8004f74 <HAL_RCC_ClockConfig+0x1c4>)
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	4a52      	ldr	r2, [pc, #328]	@ (8004f74 <HAL_RCC_ClockConfig+0x1c4>)
 8004e2a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004e2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e30:	4b50      	ldr	r3, [pc, #320]	@ (8004f74 <HAL_RCC_ClockConfig+0x1c4>)
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	494d      	ldr	r1, [pc, #308]	@ (8004f74 <HAL_RCC_ClockConfig+0x1c4>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d040      	beq.n	8004ed0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d107      	bne.n	8004e66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e56:	4b47      	ldr	r3, [pc, #284]	@ (8004f74 <HAL_RCC_ClockConfig+0x1c4>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d115      	bne.n	8004e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e07f      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d107      	bne.n	8004e7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e6e:	4b41      	ldr	r3, [pc, #260]	@ (8004f74 <HAL_RCC_ClockConfig+0x1c4>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d109      	bne.n	8004e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e073      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e7e:	4b3d      	ldr	r3, [pc, #244]	@ (8004f74 <HAL_RCC_ClockConfig+0x1c4>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e06b      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e8e:	4b39      	ldr	r3, [pc, #228]	@ (8004f74 <HAL_RCC_ClockConfig+0x1c4>)
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f023 0203 	bic.w	r2, r3, #3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	4936      	ldr	r1, [pc, #216]	@ (8004f74 <HAL_RCC_ClockConfig+0x1c4>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ea0:	f7fe f91e 	bl	80030e0 <HAL_GetTick>
 8004ea4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ea6:	e00a      	b.n	8004ebe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ea8:	f7fe f91a 	bl	80030e0 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e053      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ebe:	4b2d      	ldr	r3, [pc, #180]	@ (8004f74 <HAL_RCC_ClockConfig+0x1c4>)
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f003 020c 	and.w	r2, r3, #12
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d1eb      	bne.n	8004ea8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ed0:	4b27      	ldr	r3, [pc, #156]	@ (8004f70 <HAL_RCC_ClockConfig+0x1c0>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0307 	and.w	r3, r3, #7
 8004ed8:	683a      	ldr	r2, [r7, #0]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d210      	bcs.n	8004f00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ede:	4b24      	ldr	r3, [pc, #144]	@ (8004f70 <HAL_RCC_ClockConfig+0x1c0>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f023 0207 	bic.w	r2, r3, #7
 8004ee6:	4922      	ldr	r1, [pc, #136]	@ (8004f70 <HAL_RCC_ClockConfig+0x1c0>)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eee:	4b20      	ldr	r3, [pc, #128]	@ (8004f70 <HAL_RCC_ClockConfig+0x1c0>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0307 	and.w	r3, r3, #7
 8004ef6:	683a      	ldr	r2, [r7, #0]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d001      	beq.n	8004f00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e032      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0304 	and.w	r3, r3, #4
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d008      	beq.n	8004f1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f0c:	4b19      	ldr	r3, [pc, #100]	@ (8004f74 <HAL_RCC_ClockConfig+0x1c4>)
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	4916      	ldr	r1, [pc, #88]	@ (8004f74 <HAL_RCC_ClockConfig+0x1c4>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0308 	and.w	r3, r3, #8
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d009      	beq.n	8004f3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004f2a:	4b12      	ldr	r3, [pc, #72]	@ (8004f74 <HAL_RCC_ClockConfig+0x1c4>)
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	00db      	lsls	r3, r3, #3
 8004f38:	490e      	ldr	r1, [pc, #56]	@ (8004f74 <HAL_RCC_ClockConfig+0x1c4>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f3e:	f000 f821 	bl	8004f84 <HAL_RCC_GetSysClockFreq>
 8004f42:	4602      	mov	r2, r0
 8004f44:	4b0b      	ldr	r3, [pc, #44]	@ (8004f74 <HAL_RCC_ClockConfig+0x1c4>)
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	091b      	lsrs	r3, r3, #4
 8004f4a:	f003 030f 	and.w	r3, r3, #15
 8004f4e:	490a      	ldr	r1, [pc, #40]	@ (8004f78 <HAL_RCC_ClockConfig+0x1c8>)
 8004f50:	5ccb      	ldrb	r3, [r1, r3]
 8004f52:	fa22 f303 	lsr.w	r3, r2, r3
 8004f56:	4a09      	ldr	r2, [pc, #36]	@ (8004f7c <HAL_RCC_ClockConfig+0x1cc>)
 8004f58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004f5a:	4b09      	ldr	r3, [pc, #36]	@ (8004f80 <HAL_RCC_ClockConfig+0x1d0>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7fe f87c 	bl	800305c <HAL_InitTick>

  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	40022000 	.word	0x40022000
 8004f74:	40021000 	.word	0x40021000
 8004f78:	08005654 	.word	0x08005654
 8004f7c:	20000038 	.word	0x20000038
 8004f80:	2000003c 	.word	0x2000003c

08004f84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b087      	sub	sp, #28
 8004f88:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	60fb      	str	r3, [r7, #12]
 8004f8e:	2300      	movs	r3, #0
 8004f90:	60bb      	str	r3, [r7, #8]
 8004f92:	2300      	movs	r3, #0
 8004f94:	617b      	str	r3, [r7, #20]
 8004f96:	2300      	movs	r3, #0
 8004f98:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004f9e:	4b1e      	ldr	r3, [pc, #120]	@ (8005018 <HAL_RCC_GetSysClockFreq+0x94>)
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f003 030c 	and.w	r3, r3, #12
 8004faa:	2b04      	cmp	r3, #4
 8004fac:	d002      	beq.n	8004fb4 <HAL_RCC_GetSysClockFreq+0x30>
 8004fae:	2b08      	cmp	r3, #8
 8004fb0:	d003      	beq.n	8004fba <HAL_RCC_GetSysClockFreq+0x36>
 8004fb2:	e027      	b.n	8005004 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004fb4:	4b19      	ldr	r3, [pc, #100]	@ (800501c <HAL_RCC_GetSysClockFreq+0x98>)
 8004fb6:	613b      	str	r3, [r7, #16]
      break;
 8004fb8:	e027      	b.n	800500a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	0c9b      	lsrs	r3, r3, #18
 8004fbe:	f003 030f 	and.w	r3, r3, #15
 8004fc2:	4a17      	ldr	r2, [pc, #92]	@ (8005020 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004fc4:	5cd3      	ldrb	r3, [r2, r3]
 8004fc6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d010      	beq.n	8004ff4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004fd2:	4b11      	ldr	r3, [pc, #68]	@ (8005018 <HAL_RCC_GetSysClockFreq+0x94>)
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	0c5b      	lsrs	r3, r3, #17
 8004fd8:	f003 0301 	and.w	r3, r3, #1
 8004fdc:	4a11      	ldr	r2, [pc, #68]	@ (8005024 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004fde:	5cd3      	ldrb	r3, [r2, r3]
 8004fe0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a0d      	ldr	r2, [pc, #52]	@ (800501c <HAL_RCC_GetSysClockFreq+0x98>)
 8004fe6:	fb03 f202 	mul.w	r2, r3, r2
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff0:	617b      	str	r3, [r7, #20]
 8004ff2:	e004      	b.n	8004ffe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a0c      	ldr	r2, [pc, #48]	@ (8005028 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004ff8:	fb02 f303 	mul.w	r3, r2, r3
 8004ffc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	613b      	str	r3, [r7, #16]
      break;
 8005002:	e002      	b.n	800500a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005004:	4b05      	ldr	r3, [pc, #20]	@ (800501c <HAL_RCC_GetSysClockFreq+0x98>)
 8005006:	613b      	str	r3, [r7, #16]
      break;
 8005008:	bf00      	nop
    }
  }
  return sysclockfreq;
 800500a:	693b      	ldr	r3, [r7, #16]
}
 800500c:	4618      	mov	r0, r3
 800500e:	371c      	adds	r7, #28
 8005010:	46bd      	mov	sp, r7
 8005012:	bc80      	pop	{r7}
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	40021000 	.word	0x40021000
 800501c:	007a1200 	.word	0x007a1200
 8005020:	0800566c 	.word	0x0800566c
 8005024:	0800567c 	.word	0x0800567c
 8005028:	003d0900 	.word	0x003d0900

0800502c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800502c:	b480      	push	{r7}
 800502e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005030:	4b02      	ldr	r3, [pc, #8]	@ (800503c <HAL_RCC_GetHCLKFreq+0x10>)
 8005032:	681b      	ldr	r3, [r3, #0]
}
 8005034:	4618      	mov	r0, r3
 8005036:	46bd      	mov	sp, r7
 8005038:	bc80      	pop	{r7}
 800503a:	4770      	bx	lr
 800503c:	20000038 	.word	0x20000038

08005040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005044:	f7ff fff2 	bl	800502c <HAL_RCC_GetHCLKFreq>
 8005048:	4602      	mov	r2, r0
 800504a:	4b05      	ldr	r3, [pc, #20]	@ (8005060 <HAL_RCC_GetPCLK1Freq+0x20>)
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	0a1b      	lsrs	r3, r3, #8
 8005050:	f003 0307 	and.w	r3, r3, #7
 8005054:	4903      	ldr	r1, [pc, #12]	@ (8005064 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005056:	5ccb      	ldrb	r3, [r1, r3]
 8005058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800505c:	4618      	mov	r0, r3
 800505e:	bd80      	pop	{r7, pc}
 8005060:	40021000 	.word	0x40021000
 8005064:	08005664 	.word	0x08005664

08005068 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005068:	b480      	push	{r7}
 800506a:	b085      	sub	sp, #20
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005070:	4b0a      	ldr	r3, [pc, #40]	@ (800509c <RCC_Delay+0x34>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a0a      	ldr	r2, [pc, #40]	@ (80050a0 <RCC_Delay+0x38>)
 8005076:	fba2 2303 	umull	r2, r3, r2, r3
 800507a:	0a5b      	lsrs	r3, r3, #9
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	fb02 f303 	mul.w	r3, r2, r3
 8005082:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005084:	bf00      	nop
  }
  while (Delay --);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	1e5a      	subs	r2, r3, #1
 800508a:	60fa      	str	r2, [r7, #12]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1f9      	bne.n	8005084 <RCC_Delay+0x1c>
}
 8005090:	bf00      	nop
 8005092:	bf00      	nop
 8005094:	3714      	adds	r7, #20
 8005096:	46bd      	mov	sp, r7
 8005098:	bc80      	pop	{r7}
 800509a:	4770      	bx	lr
 800509c:	20000038 	.word	0x20000038
 80050a0:	10624dd3 	.word	0x10624dd3

080050a4 <memset>:
 80050a4:	4603      	mov	r3, r0
 80050a6:	4402      	add	r2, r0
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d100      	bne.n	80050ae <memset+0xa>
 80050ac:	4770      	bx	lr
 80050ae:	f803 1b01 	strb.w	r1, [r3], #1
 80050b2:	e7f9      	b.n	80050a8 <memset+0x4>

080050b4 <__libc_init_array>:
 80050b4:	b570      	push	{r4, r5, r6, lr}
 80050b6:	2600      	movs	r6, #0
 80050b8:	4d0c      	ldr	r5, [pc, #48]	@ (80050ec <__libc_init_array+0x38>)
 80050ba:	4c0d      	ldr	r4, [pc, #52]	@ (80050f0 <__libc_init_array+0x3c>)
 80050bc:	1b64      	subs	r4, r4, r5
 80050be:	10a4      	asrs	r4, r4, #2
 80050c0:	42a6      	cmp	r6, r4
 80050c2:	d109      	bne.n	80050d8 <__libc_init_array+0x24>
 80050c4:	f000 fa84 	bl	80055d0 <_init>
 80050c8:	2600      	movs	r6, #0
 80050ca:	4d0a      	ldr	r5, [pc, #40]	@ (80050f4 <__libc_init_array+0x40>)
 80050cc:	4c0a      	ldr	r4, [pc, #40]	@ (80050f8 <__libc_init_array+0x44>)
 80050ce:	1b64      	subs	r4, r4, r5
 80050d0:	10a4      	asrs	r4, r4, #2
 80050d2:	42a6      	cmp	r6, r4
 80050d4:	d105      	bne.n	80050e2 <__libc_init_array+0x2e>
 80050d6:	bd70      	pop	{r4, r5, r6, pc}
 80050d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80050dc:	4798      	blx	r3
 80050de:	3601      	adds	r6, #1
 80050e0:	e7ee      	b.n	80050c0 <__libc_init_array+0xc>
 80050e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80050e6:	4798      	blx	r3
 80050e8:	3601      	adds	r6, #1
 80050ea:	e7f2      	b.n	80050d2 <__libc_init_array+0x1e>
 80050ec:	080056f0 	.word	0x080056f0
 80050f0:	080056f0 	.word	0x080056f0
 80050f4:	080056f0 	.word	0x080056f0
 80050f8:	080056f4 	.word	0x080056f4

080050fc <atan2>:
 80050fc:	f000 b804 	b.w	8005108 <__ieee754_atan2>

08005100 <fabs>:
 8005100:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005104:	4619      	mov	r1, r3
 8005106:	4770      	bx	lr

08005108 <__ieee754_atan2>:
 8005108:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800510c:	4617      	mov	r7, r2
 800510e:	4690      	mov	r8, r2
 8005110:	4699      	mov	r9, r3
 8005112:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005116:	427b      	negs	r3, r7
 8005118:	f8df a184 	ldr.w	sl, [pc, #388]	@ 80052a0 <__ieee754_atan2+0x198>
 800511c:	433b      	orrs	r3, r7
 800511e:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8005122:	4553      	cmp	r3, sl
 8005124:	4604      	mov	r4, r0
 8005126:	460d      	mov	r5, r1
 8005128:	d809      	bhi.n	800513e <__ieee754_atan2+0x36>
 800512a:	4246      	negs	r6, r0
 800512c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005130:	4306      	orrs	r6, r0
 8005132:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8005136:	4556      	cmp	r6, sl
 8005138:	468e      	mov	lr, r1
 800513a:	4683      	mov	fp, r0
 800513c:	d908      	bls.n	8005150 <__ieee754_atan2+0x48>
 800513e:	4642      	mov	r2, r8
 8005140:	464b      	mov	r3, r9
 8005142:	4620      	mov	r0, r4
 8005144:	4629      	mov	r1, r5
 8005146:	f7fb f809 	bl	800015c <__adddf3>
 800514a:	4604      	mov	r4, r0
 800514c:	460d      	mov	r5, r1
 800514e:	e016      	b.n	800517e <__ieee754_atan2+0x76>
 8005150:	f109 4640 	add.w	r6, r9, #3221225472	@ 0xc0000000
 8005154:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8005158:	433e      	orrs	r6, r7
 800515a:	d103      	bne.n	8005164 <__ieee754_atan2+0x5c>
 800515c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005160:	f000 b8a6 	b.w	80052b0 <atan>
 8005164:	ea4f 76a9 	mov.w	r6, r9, asr #30
 8005168:	f006 0602 	and.w	r6, r6, #2
 800516c:	ea53 0b0b 	orrs.w	fp, r3, fp
 8005170:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8005174:	d107      	bne.n	8005186 <__ieee754_atan2+0x7e>
 8005176:	2e02      	cmp	r6, #2
 8005178:	d064      	beq.n	8005244 <__ieee754_atan2+0x13c>
 800517a:	2e03      	cmp	r6, #3
 800517c:	d066      	beq.n	800524c <__ieee754_atan2+0x144>
 800517e:	4620      	mov	r0, r4
 8005180:	4629      	mov	r1, r5
 8005182:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005186:	4317      	orrs	r7, r2
 8005188:	d106      	bne.n	8005198 <__ieee754_atan2+0x90>
 800518a:	f1be 0f00 	cmp.w	lr, #0
 800518e:	db68      	blt.n	8005262 <__ieee754_atan2+0x15a>
 8005190:	a537      	add	r5, pc, #220	@ (adr r5, 8005270 <__ieee754_atan2+0x168>)
 8005192:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005196:	e7f2      	b.n	800517e <__ieee754_atan2+0x76>
 8005198:	4552      	cmp	r2, sl
 800519a:	d10f      	bne.n	80051bc <__ieee754_atan2+0xb4>
 800519c:	4293      	cmp	r3, r2
 800519e:	f106 36ff 	add.w	r6, r6, #4294967295
 80051a2:	d107      	bne.n	80051b4 <__ieee754_atan2+0xac>
 80051a4:	2e02      	cmp	r6, #2
 80051a6:	d855      	bhi.n	8005254 <__ieee754_atan2+0x14c>
 80051a8:	4b3e      	ldr	r3, [pc, #248]	@ (80052a4 <__ieee754_atan2+0x19c>)
 80051aa:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80051ae:	e9d3 4500 	ldrd	r4, r5, [r3]
 80051b2:	e7e4      	b.n	800517e <__ieee754_atan2+0x76>
 80051b4:	2e02      	cmp	r6, #2
 80051b6:	d851      	bhi.n	800525c <__ieee754_atan2+0x154>
 80051b8:	4b3b      	ldr	r3, [pc, #236]	@ (80052a8 <__ieee754_atan2+0x1a0>)
 80051ba:	e7f6      	b.n	80051aa <__ieee754_atan2+0xa2>
 80051bc:	4553      	cmp	r3, sl
 80051be:	d0e4      	beq.n	800518a <__ieee754_atan2+0x82>
 80051c0:	1a9b      	subs	r3, r3, r2
 80051c2:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 80051c6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80051ca:	da21      	bge.n	8005210 <__ieee754_atan2+0x108>
 80051cc:	f1b9 0f00 	cmp.w	r9, #0
 80051d0:	da01      	bge.n	80051d6 <__ieee754_atan2+0xce>
 80051d2:	323c      	adds	r2, #60	@ 0x3c
 80051d4:	db20      	blt.n	8005218 <__ieee754_atan2+0x110>
 80051d6:	4642      	mov	r2, r8
 80051d8:	464b      	mov	r3, r9
 80051da:	4620      	mov	r0, r4
 80051dc:	4629      	mov	r1, r5
 80051de:	f7fb fa9d 	bl	800071c <__aeabi_ddiv>
 80051e2:	f7ff ff8d 	bl	8005100 <fabs>
 80051e6:	f000 f863 	bl	80052b0 <atan>
 80051ea:	4604      	mov	r4, r0
 80051ec:	460d      	mov	r5, r1
 80051ee:	2e01      	cmp	r6, #1
 80051f0:	d015      	beq.n	800521e <__ieee754_atan2+0x116>
 80051f2:	2e02      	cmp	r6, #2
 80051f4:	d017      	beq.n	8005226 <__ieee754_atan2+0x11e>
 80051f6:	2e00      	cmp	r6, #0
 80051f8:	d0c1      	beq.n	800517e <__ieee754_atan2+0x76>
 80051fa:	a31f      	add	r3, pc, #124	@ (adr r3, 8005278 <__ieee754_atan2+0x170>)
 80051fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005200:	4620      	mov	r0, r4
 8005202:	4629      	mov	r1, r5
 8005204:	f7fa ffa8 	bl	8000158 <__aeabi_dsub>
 8005208:	a31d      	add	r3, pc, #116	@ (adr r3, 8005280 <__ieee754_atan2+0x178>)
 800520a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800520e:	e016      	b.n	800523e <__ieee754_atan2+0x136>
 8005210:	a517      	add	r5, pc, #92	@ (adr r5, 8005270 <__ieee754_atan2+0x168>)
 8005212:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005216:	e7ea      	b.n	80051ee <__ieee754_atan2+0xe6>
 8005218:	2400      	movs	r4, #0
 800521a:	2500      	movs	r5, #0
 800521c:	e7e7      	b.n	80051ee <__ieee754_atan2+0xe6>
 800521e:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 8005222:	461d      	mov	r5, r3
 8005224:	e7ab      	b.n	800517e <__ieee754_atan2+0x76>
 8005226:	a314      	add	r3, pc, #80	@ (adr r3, 8005278 <__ieee754_atan2+0x170>)
 8005228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522c:	4620      	mov	r0, r4
 800522e:	4629      	mov	r1, r5
 8005230:	f7fa ff92 	bl	8000158 <__aeabi_dsub>
 8005234:	4602      	mov	r2, r0
 8005236:	460b      	mov	r3, r1
 8005238:	a111      	add	r1, pc, #68	@ (adr r1, 8005280 <__ieee754_atan2+0x178>)
 800523a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800523e:	f7fa ff8b 	bl	8000158 <__aeabi_dsub>
 8005242:	e782      	b.n	800514a <__ieee754_atan2+0x42>
 8005244:	a50e      	add	r5, pc, #56	@ (adr r5, 8005280 <__ieee754_atan2+0x178>)
 8005246:	e9d5 4500 	ldrd	r4, r5, [r5]
 800524a:	e798      	b.n	800517e <__ieee754_atan2+0x76>
 800524c:	a50e      	add	r5, pc, #56	@ (adr r5, 8005288 <__ieee754_atan2+0x180>)
 800524e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005252:	e794      	b.n	800517e <__ieee754_atan2+0x76>
 8005254:	a50e      	add	r5, pc, #56	@ (adr r5, 8005290 <__ieee754_atan2+0x188>)
 8005256:	e9d5 4500 	ldrd	r4, r5, [r5]
 800525a:	e790      	b.n	800517e <__ieee754_atan2+0x76>
 800525c:	2400      	movs	r4, #0
 800525e:	2500      	movs	r5, #0
 8005260:	e78d      	b.n	800517e <__ieee754_atan2+0x76>
 8005262:	a50d      	add	r5, pc, #52	@ (adr r5, 8005298 <__ieee754_atan2+0x190>)
 8005264:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005268:	e789      	b.n	800517e <__ieee754_atan2+0x76>
 800526a:	bf00      	nop
 800526c:	f3af 8000 	nop.w
 8005270:	54442d18 	.word	0x54442d18
 8005274:	3ff921fb 	.word	0x3ff921fb
 8005278:	33145c07 	.word	0x33145c07
 800527c:	3ca1a626 	.word	0x3ca1a626
 8005280:	54442d18 	.word	0x54442d18
 8005284:	400921fb 	.word	0x400921fb
 8005288:	54442d18 	.word	0x54442d18
 800528c:	c00921fb 	.word	0xc00921fb
 8005290:	54442d18 	.word	0x54442d18
 8005294:	3fe921fb 	.word	0x3fe921fb
 8005298:	54442d18 	.word	0x54442d18
 800529c:	bff921fb 	.word	0xbff921fb
 80052a0:	7ff00000 	.word	0x7ff00000
 80052a4:	08005698 	.word	0x08005698
 80052a8:	08005680 	.word	0x08005680
 80052ac:	00000000 	.word	0x00000000

080052b0 <atan>:
 80052b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052b4:	4bbc      	ldr	r3, [pc, #752]	@ (80055a8 <atan+0x2f8>)
 80052b6:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 80052ba:	429e      	cmp	r6, r3
 80052bc:	4604      	mov	r4, r0
 80052be:	460d      	mov	r5, r1
 80052c0:	468b      	mov	fp, r1
 80052c2:	d918      	bls.n	80052f6 <atan+0x46>
 80052c4:	4bb9      	ldr	r3, [pc, #740]	@ (80055ac <atan+0x2fc>)
 80052c6:	429e      	cmp	r6, r3
 80052c8:	d801      	bhi.n	80052ce <atan+0x1e>
 80052ca:	d109      	bne.n	80052e0 <atan+0x30>
 80052cc:	b140      	cbz	r0, 80052e0 <atan+0x30>
 80052ce:	4622      	mov	r2, r4
 80052d0:	462b      	mov	r3, r5
 80052d2:	4620      	mov	r0, r4
 80052d4:	4629      	mov	r1, r5
 80052d6:	f7fa ff41 	bl	800015c <__adddf3>
 80052da:	4604      	mov	r4, r0
 80052dc:	460d      	mov	r5, r1
 80052de:	e006      	b.n	80052ee <atan+0x3e>
 80052e0:	f1bb 0f00 	cmp.w	fp, #0
 80052e4:	f340 8123 	ble.w	800552e <atan+0x27e>
 80052e8:	a593      	add	r5, pc, #588	@ (adr r5, 8005538 <atan+0x288>)
 80052ea:	e9d5 4500 	ldrd	r4, r5, [r5]
 80052ee:	4620      	mov	r0, r4
 80052f0:	4629      	mov	r1, r5
 80052f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052f6:	4bae      	ldr	r3, [pc, #696]	@ (80055b0 <atan+0x300>)
 80052f8:	429e      	cmp	r6, r3
 80052fa:	d811      	bhi.n	8005320 <atan+0x70>
 80052fc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8005300:	429e      	cmp	r6, r3
 8005302:	d80a      	bhi.n	800531a <atan+0x6a>
 8005304:	a38e      	add	r3, pc, #568	@ (adr r3, 8005540 <atan+0x290>)
 8005306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530a:	f7fa ff27 	bl	800015c <__adddf3>
 800530e:	2200      	movs	r2, #0
 8005310:	4ba8      	ldr	r3, [pc, #672]	@ (80055b4 <atan+0x304>)
 8005312:	f7fb fb69 	bl	80009e8 <__aeabi_dcmpgt>
 8005316:	2800      	cmp	r0, #0
 8005318:	d1e9      	bne.n	80052ee <atan+0x3e>
 800531a:	f04f 3aff 	mov.w	sl, #4294967295
 800531e:	e027      	b.n	8005370 <atan+0xc0>
 8005320:	f7ff feee 	bl	8005100 <fabs>
 8005324:	4ba4      	ldr	r3, [pc, #656]	@ (80055b8 <atan+0x308>)
 8005326:	4604      	mov	r4, r0
 8005328:	429e      	cmp	r6, r3
 800532a:	460d      	mov	r5, r1
 800532c:	f200 80b8 	bhi.w	80054a0 <atan+0x1f0>
 8005330:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8005334:	429e      	cmp	r6, r3
 8005336:	f200 809c 	bhi.w	8005472 <atan+0x1c2>
 800533a:	4602      	mov	r2, r0
 800533c:	460b      	mov	r3, r1
 800533e:	f7fa ff0d 	bl	800015c <__adddf3>
 8005342:	2200      	movs	r2, #0
 8005344:	4b9b      	ldr	r3, [pc, #620]	@ (80055b4 <atan+0x304>)
 8005346:	f7fa ff07 	bl	8000158 <__aeabi_dsub>
 800534a:	2200      	movs	r2, #0
 800534c:	4606      	mov	r6, r0
 800534e:	460f      	mov	r7, r1
 8005350:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005354:	4620      	mov	r0, r4
 8005356:	4629      	mov	r1, r5
 8005358:	f7fa ff00 	bl	800015c <__adddf3>
 800535c:	4602      	mov	r2, r0
 800535e:	460b      	mov	r3, r1
 8005360:	4630      	mov	r0, r6
 8005362:	4639      	mov	r1, r7
 8005364:	f7fb f9da 	bl	800071c <__aeabi_ddiv>
 8005368:	f04f 0a00 	mov.w	sl, #0
 800536c:	4604      	mov	r4, r0
 800536e:	460d      	mov	r5, r1
 8005370:	4622      	mov	r2, r4
 8005372:	462b      	mov	r3, r5
 8005374:	4620      	mov	r0, r4
 8005376:	4629      	mov	r1, r5
 8005378:	f7fb f8a6 	bl	80004c8 <__aeabi_dmul>
 800537c:	4602      	mov	r2, r0
 800537e:	460b      	mov	r3, r1
 8005380:	4680      	mov	r8, r0
 8005382:	4689      	mov	r9, r1
 8005384:	f7fb f8a0 	bl	80004c8 <__aeabi_dmul>
 8005388:	a36f      	add	r3, pc, #444	@ (adr r3, 8005548 <atan+0x298>)
 800538a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800538e:	4606      	mov	r6, r0
 8005390:	460f      	mov	r7, r1
 8005392:	f7fb f899 	bl	80004c8 <__aeabi_dmul>
 8005396:	a36e      	add	r3, pc, #440	@ (adr r3, 8005550 <atan+0x2a0>)
 8005398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539c:	f7fa fede 	bl	800015c <__adddf3>
 80053a0:	4632      	mov	r2, r6
 80053a2:	463b      	mov	r3, r7
 80053a4:	f7fb f890 	bl	80004c8 <__aeabi_dmul>
 80053a8:	a36b      	add	r3, pc, #428	@ (adr r3, 8005558 <atan+0x2a8>)
 80053aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ae:	f7fa fed5 	bl	800015c <__adddf3>
 80053b2:	4632      	mov	r2, r6
 80053b4:	463b      	mov	r3, r7
 80053b6:	f7fb f887 	bl	80004c8 <__aeabi_dmul>
 80053ba:	a369      	add	r3, pc, #420	@ (adr r3, 8005560 <atan+0x2b0>)
 80053bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c0:	f7fa fecc 	bl	800015c <__adddf3>
 80053c4:	4632      	mov	r2, r6
 80053c6:	463b      	mov	r3, r7
 80053c8:	f7fb f87e 	bl	80004c8 <__aeabi_dmul>
 80053cc:	a366      	add	r3, pc, #408	@ (adr r3, 8005568 <atan+0x2b8>)
 80053ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d2:	f7fa fec3 	bl	800015c <__adddf3>
 80053d6:	4632      	mov	r2, r6
 80053d8:	463b      	mov	r3, r7
 80053da:	f7fb f875 	bl	80004c8 <__aeabi_dmul>
 80053de:	a364      	add	r3, pc, #400	@ (adr r3, 8005570 <atan+0x2c0>)
 80053e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e4:	f7fa feba 	bl	800015c <__adddf3>
 80053e8:	4642      	mov	r2, r8
 80053ea:	464b      	mov	r3, r9
 80053ec:	f7fb f86c 	bl	80004c8 <__aeabi_dmul>
 80053f0:	a361      	add	r3, pc, #388	@ (adr r3, 8005578 <atan+0x2c8>)
 80053f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f6:	4680      	mov	r8, r0
 80053f8:	4689      	mov	r9, r1
 80053fa:	4630      	mov	r0, r6
 80053fc:	4639      	mov	r1, r7
 80053fe:	f7fb f863 	bl	80004c8 <__aeabi_dmul>
 8005402:	a35f      	add	r3, pc, #380	@ (adr r3, 8005580 <atan+0x2d0>)
 8005404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005408:	f7fa fea6 	bl	8000158 <__aeabi_dsub>
 800540c:	4632      	mov	r2, r6
 800540e:	463b      	mov	r3, r7
 8005410:	f7fb f85a 	bl	80004c8 <__aeabi_dmul>
 8005414:	a35c      	add	r3, pc, #368	@ (adr r3, 8005588 <atan+0x2d8>)
 8005416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541a:	f7fa fe9d 	bl	8000158 <__aeabi_dsub>
 800541e:	4632      	mov	r2, r6
 8005420:	463b      	mov	r3, r7
 8005422:	f7fb f851 	bl	80004c8 <__aeabi_dmul>
 8005426:	a35a      	add	r3, pc, #360	@ (adr r3, 8005590 <atan+0x2e0>)
 8005428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542c:	f7fa fe94 	bl	8000158 <__aeabi_dsub>
 8005430:	4632      	mov	r2, r6
 8005432:	463b      	mov	r3, r7
 8005434:	f7fb f848 	bl	80004c8 <__aeabi_dmul>
 8005438:	a357      	add	r3, pc, #348	@ (adr r3, 8005598 <atan+0x2e8>)
 800543a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543e:	f7fa fe8b 	bl	8000158 <__aeabi_dsub>
 8005442:	4632      	mov	r2, r6
 8005444:	463b      	mov	r3, r7
 8005446:	f7fb f83f 	bl	80004c8 <__aeabi_dmul>
 800544a:	4602      	mov	r2, r0
 800544c:	460b      	mov	r3, r1
 800544e:	4640      	mov	r0, r8
 8005450:	4649      	mov	r1, r9
 8005452:	f7fa fe83 	bl	800015c <__adddf3>
 8005456:	4622      	mov	r2, r4
 8005458:	462b      	mov	r3, r5
 800545a:	f7fb f835 	bl	80004c8 <__aeabi_dmul>
 800545e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005462:	4602      	mov	r2, r0
 8005464:	460b      	mov	r3, r1
 8005466:	d144      	bne.n	80054f2 <atan+0x242>
 8005468:	4620      	mov	r0, r4
 800546a:	4629      	mov	r1, r5
 800546c:	f7fa fe74 	bl	8000158 <__aeabi_dsub>
 8005470:	e733      	b.n	80052da <atan+0x2a>
 8005472:	2200      	movs	r2, #0
 8005474:	4b4f      	ldr	r3, [pc, #316]	@ (80055b4 <atan+0x304>)
 8005476:	f7fa fe6f 	bl	8000158 <__aeabi_dsub>
 800547a:	2200      	movs	r2, #0
 800547c:	4606      	mov	r6, r0
 800547e:	460f      	mov	r7, r1
 8005480:	4620      	mov	r0, r4
 8005482:	4629      	mov	r1, r5
 8005484:	4b4b      	ldr	r3, [pc, #300]	@ (80055b4 <atan+0x304>)
 8005486:	f7fa fe69 	bl	800015c <__adddf3>
 800548a:	4602      	mov	r2, r0
 800548c:	460b      	mov	r3, r1
 800548e:	4630      	mov	r0, r6
 8005490:	4639      	mov	r1, r7
 8005492:	f7fb f943 	bl	800071c <__aeabi_ddiv>
 8005496:	f04f 0a01 	mov.w	sl, #1
 800549a:	4604      	mov	r4, r0
 800549c:	460d      	mov	r5, r1
 800549e:	e767      	b.n	8005370 <atan+0xc0>
 80054a0:	4b46      	ldr	r3, [pc, #280]	@ (80055bc <atan+0x30c>)
 80054a2:	429e      	cmp	r6, r3
 80054a4:	d21a      	bcs.n	80054dc <atan+0x22c>
 80054a6:	2200      	movs	r2, #0
 80054a8:	4b45      	ldr	r3, [pc, #276]	@ (80055c0 <atan+0x310>)
 80054aa:	f7fa fe55 	bl	8000158 <__aeabi_dsub>
 80054ae:	2200      	movs	r2, #0
 80054b0:	4606      	mov	r6, r0
 80054b2:	460f      	mov	r7, r1
 80054b4:	4620      	mov	r0, r4
 80054b6:	4629      	mov	r1, r5
 80054b8:	4b41      	ldr	r3, [pc, #260]	@ (80055c0 <atan+0x310>)
 80054ba:	f7fb f805 	bl	80004c8 <__aeabi_dmul>
 80054be:	2200      	movs	r2, #0
 80054c0:	4b3c      	ldr	r3, [pc, #240]	@ (80055b4 <atan+0x304>)
 80054c2:	f7fa fe4b 	bl	800015c <__adddf3>
 80054c6:	4602      	mov	r2, r0
 80054c8:	460b      	mov	r3, r1
 80054ca:	4630      	mov	r0, r6
 80054cc:	4639      	mov	r1, r7
 80054ce:	f7fb f925 	bl	800071c <__aeabi_ddiv>
 80054d2:	f04f 0a02 	mov.w	sl, #2
 80054d6:	4604      	mov	r4, r0
 80054d8:	460d      	mov	r5, r1
 80054da:	e749      	b.n	8005370 <atan+0xc0>
 80054dc:	4602      	mov	r2, r0
 80054de:	460b      	mov	r3, r1
 80054e0:	2000      	movs	r0, #0
 80054e2:	4938      	ldr	r1, [pc, #224]	@ (80055c4 <atan+0x314>)
 80054e4:	f7fb f91a 	bl	800071c <__aeabi_ddiv>
 80054e8:	f04f 0a03 	mov.w	sl, #3
 80054ec:	4604      	mov	r4, r0
 80054ee:	460d      	mov	r5, r1
 80054f0:	e73e      	b.n	8005370 <atan+0xc0>
 80054f2:	4b35      	ldr	r3, [pc, #212]	@ (80055c8 <atan+0x318>)
 80054f4:	4e35      	ldr	r6, [pc, #212]	@ (80055cc <atan+0x31c>)
 80054f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80054fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fe:	f7fa fe2b 	bl	8000158 <__aeabi_dsub>
 8005502:	4622      	mov	r2, r4
 8005504:	462b      	mov	r3, r5
 8005506:	f7fa fe27 	bl	8000158 <__aeabi_dsub>
 800550a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800550e:	4602      	mov	r2, r0
 8005510:	460b      	mov	r3, r1
 8005512:	e9d6 0100 	ldrd	r0, r1, [r6]
 8005516:	f7fa fe1f 	bl	8000158 <__aeabi_dsub>
 800551a:	f1bb 0f00 	cmp.w	fp, #0
 800551e:	4604      	mov	r4, r0
 8005520:	460d      	mov	r5, r1
 8005522:	f6bf aee4 	bge.w	80052ee <atan+0x3e>
 8005526:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800552a:	461d      	mov	r5, r3
 800552c:	e6df      	b.n	80052ee <atan+0x3e>
 800552e:	a51c      	add	r5, pc, #112	@ (adr r5, 80055a0 <atan+0x2f0>)
 8005530:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005534:	e6db      	b.n	80052ee <atan+0x3e>
 8005536:	bf00      	nop
 8005538:	54442d18 	.word	0x54442d18
 800553c:	3ff921fb 	.word	0x3ff921fb
 8005540:	8800759c 	.word	0x8800759c
 8005544:	7e37e43c 	.word	0x7e37e43c
 8005548:	e322da11 	.word	0xe322da11
 800554c:	3f90ad3a 	.word	0x3f90ad3a
 8005550:	24760deb 	.word	0x24760deb
 8005554:	3fa97b4b 	.word	0x3fa97b4b
 8005558:	a0d03d51 	.word	0xa0d03d51
 800555c:	3fb10d66 	.word	0x3fb10d66
 8005560:	c54c206e 	.word	0xc54c206e
 8005564:	3fb745cd 	.word	0x3fb745cd
 8005568:	920083ff 	.word	0x920083ff
 800556c:	3fc24924 	.word	0x3fc24924
 8005570:	5555550d 	.word	0x5555550d
 8005574:	3fd55555 	.word	0x3fd55555
 8005578:	2c6a6c2f 	.word	0x2c6a6c2f
 800557c:	bfa2b444 	.word	0xbfa2b444
 8005580:	52defd9a 	.word	0x52defd9a
 8005584:	3fadde2d 	.word	0x3fadde2d
 8005588:	af749a6d 	.word	0xaf749a6d
 800558c:	3fb3b0f2 	.word	0x3fb3b0f2
 8005590:	fe231671 	.word	0xfe231671
 8005594:	3fbc71c6 	.word	0x3fbc71c6
 8005598:	9998ebc4 	.word	0x9998ebc4
 800559c:	3fc99999 	.word	0x3fc99999
 80055a0:	54442d18 	.word	0x54442d18
 80055a4:	bff921fb 	.word	0xbff921fb
 80055a8:	440fffff 	.word	0x440fffff
 80055ac:	7ff00000 	.word	0x7ff00000
 80055b0:	3fdbffff 	.word	0x3fdbffff
 80055b4:	3ff00000 	.word	0x3ff00000
 80055b8:	3ff2ffff 	.word	0x3ff2ffff
 80055bc:	40038000 	.word	0x40038000
 80055c0:	3ff80000 	.word	0x3ff80000
 80055c4:	bff00000 	.word	0xbff00000
 80055c8:	080056b0 	.word	0x080056b0
 80055cc:	080056d0 	.word	0x080056d0

080055d0 <_init>:
 80055d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055d2:	bf00      	nop
 80055d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055d6:	bc08      	pop	{r3}
 80055d8:	469e      	mov	lr, r3
 80055da:	4770      	bx	lr

080055dc <_fini>:
 80055dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055de:	bf00      	nop
 80055e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055e2:	bc08      	pop	{r3}
 80055e4:	469e      	mov	lr, r3
 80055e6:	4770      	bx	lr
