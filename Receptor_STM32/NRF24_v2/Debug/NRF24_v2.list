
NRF24_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cb0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08004dbc  08004dbc  00005dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e68  08004e68  00006064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004e68  08004e68  00005e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e70  08004e70  00006064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e70  08004e70  00005e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e74  08004e74  00005e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08004e78  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  20000064  08004edc  00006064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  08004edc  000062bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e9fb  00000000  00000000  0000608d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021ba  00000000  00000000  00014a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f88  00000000  00000000  00016c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c22  00000000  00000000  00017bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018759  00000000  00000000  000187f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f831  00000000  00000000  00030f4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c9e3  00000000  00000000  0004077c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cd15f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046b0  00000000  00000000  000cd1a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000d1854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	08004da4 	.word	0x08004da4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	08004da4 	.word	0x08004da4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <csn_high>:
#include "NRF24.h"

extern SPI_HandleTypeDef hspiX;


void csn_high(void){
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(csn_gpio_port, csn_gpio_pin, 1);
 8000160:	2201      	movs	r2, #1
 8000162:	2108      	movs	r1, #8
 8000164:	4802      	ldr	r0, [pc, #8]	@ (8000170 <csn_high+0x14>)
 8000166:	f001 fb71 	bl	800184c <HAL_GPIO_WritePin>
}
 800016a:	bf00      	nop
 800016c:	bd80      	pop	{r7, pc}
 800016e:	bf00      	nop
 8000170:	40010800 	.word	0x40010800

08000174 <csn_low>:

void csn_low(void){
 8000174:	b580      	push	{r7, lr}
 8000176:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(csn_gpio_port, csn_gpio_pin, 0);
 8000178:	2200      	movs	r2, #0
 800017a:	2108      	movs	r1, #8
 800017c:	4802      	ldr	r0, [pc, #8]	@ (8000188 <csn_low+0x14>)
 800017e:	f001 fb65 	bl	800184c <HAL_GPIO_WritePin>
}
 8000182:	bf00      	nop
 8000184:	bd80      	pop	{r7, pc}
 8000186:	bf00      	nop
 8000188:	40010800 	.word	0x40010800

0800018c <ce_high>:

void ce_high(void){
 800018c:	b580      	push	{r7, lr}
 800018e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ce_gpio_port, ce_gpio_pin, 1);
 8000190:	2201      	movs	r2, #1
 8000192:	2110      	movs	r1, #16
 8000194:	4802      	ldr	r0, [pc, #8]	@ (80001a0 <ce_high+0x14>)
 8000196:	f001 fb59 	bl	800184c <HAL_GPIO_WritePin>
}
 800019a:	bf00      	nop
 800019c:	bd80      	pop	{r7, pc}
 800019e:	bf00      	nop
 80001a0:	40010800 	.word	0x40010800

080001a4 <ce_low>:

void ce_low(void){
 80001a4:	b580      	push	{r7, lr}
 80001a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ce_gpio_port, ce_gpio_pin, 0);
 80001a8:	2200      	movs	r2, #0
 80001aa:	2110      	movs	r1, #16
 80001ac:	4802      	ldr	r0, [pc, #8]	@ (80001b8 <ce_low+0x14>)
 80001ae:	f001 fb4d 	bl	800184c <HAL_GPIO_WritePin>
}
 80001b2:	bf00      	nop
 80001b4:	bd80      	pop	{r7, pc}
 80001b6:	bf00      	nop
 80001b8:	40010800 	.word	0x40010800

080001bc <nrf24_w_reg>:

void nrf24_w_reg(uint8_t reg, uint8_t *data, uint8_t size){
 80001bc:	b580      	push	{r7, lr}
 80001be:	b084      	sub	sp, #16
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	4603      	mov	r3, r0
 80001c4:	6039      	str	r1, [r7, #0]
 80001c6:	71fb      	strb	r3, [r7, #7]
 80001c8:	4613      	mov	r3, r2
 80001ca:	71bb      	strb	r3, [r7, #6]

	uint8_t cmd = W_REGISTER | reg;
 80001cc:	79fb      	ldrb	r3, [r7, #7]
 80001ce:	f043 0320 	orr.w	r3, r3, #32
 80001d2:	b2db      	uxtb	r3, r3
 80001d4:	73fb      	strb	r3, [r7, #15]

	csn_low();
 80001d6:	f7ff ffcd 	bl	8000174 <csn_low>

	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 80001da:	f107 010f 	add.w	r1, r7, #15
 80001de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80001e2:	2201      	movs	r2, #1
 80001e4:	4808      	ldr	r0, [pc, #32]	@ (8000208 <nrf24_w_reg+0x4c>)
 80001e6:	f001 ffdd 	bl	80021a4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspiX, data, size, spi_w_timeout);
 80001ea:	79bb      	ldrb	r3, [r7, #6]
 80001ec:	b29a      	uxth	r2, r3
 80001ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80001f2:	6839      	ldr	r1, [r7, #0]
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <nrf24_w_reg+0x4c>)
 80001f6:	f001 ffd5 	bl	80021a4 <HAL_SPI_Transmit>

	csn_high();
 80001fa:	f7ff ffaf 	bl	800015c <csn_high>
}
 80001fe:	bf00      	nop
 8000200:	3710      	adds	r7, #16
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	20000080 	.word	0x20000080

0800020c <nrf24_r_reg>:

uint8_t nrf24_r_reg(uint8_t reg, uint8_t size){
 800020c:	b580      	push	{r7, lr}
 800020e:	b084      	sub	sp, #16
 8000210:	af00      	add	r7, sp, #0
 8000212:	4603      	mov	r3, r0
 8000214:	460a      	mov	r2, r1
 8000216:	71fb      	strb	r3, [r7, #7]
 8000218:	4613      	mov	r3, r2
 800021a:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd = R_REGISTER | reg;
 800021c:	79fb      	ldrb	r3, [r7, #7]
 800021e:	73fb      	strb	r3, [r7, #15]
	uint8_t data = 0;
 8000220:	2300      	movs	r3, #0
 8000222:	73bb      	strb	r3, [r7, #14]

	csn_low();
 8000224:	f7ff ffa6 	bl	8000174 <csn_low>

	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 8000228:	f107 010f 	add.w	r1, r7, #15
 800022c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000230:	2201      	movs	r2, #1
 8000232:	4809      	ldr	r0, [pc, #36]	@ (8000258 <nrf24_r_reg+0x4c>)
 8000234:	f001 ffb6 	bl	80021a4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspiX, &data, size, spi_r_timeout);
 8000238:	79bb      	ldrb	r3, [r7, #6]
 800023a:	b29a      	uxth	r2, r3
 800023c:	f107 010e 	add.w	r1, r7, #14
 8000240:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <nrf24_r_reg+0x4c>)
 8000246:	f002 f8f0 	bl	800242a <HAL_SPI_Receive>

	csn_high();
 800024a:	f7ff ff87 	bl	800015c <csn_high>

	return data;
 800024e:	7bbb      	ldrb	r3, [r7, #14]
}
 8000250:	4618      	mov	r0, r3
 8000252:	3710      	adds	r7, #16
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}
 8000258:	20000080 	.word	0x20000080

0800025c <nrf24_w_spec_cmd>:

void nrf24_w_spec_cmd(uint8_t cmd){
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
 8000262:	4603      	mov	r3, r0
 8000264:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 8000266:	1df9      	adds	r1, r7, #7
 8000268:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800026c:	2201      	movs	r2, #1
 800026e:	4803      	ldr	r0, [pc, #12]	@ (800027c <nrf24_w_spec_cmd+0x20>)
 8000270:	f001 ff98 	bl	80021a4 <HAL_SPI_Transmit>
}
 8000274:	bf00      	nop
 8000276:	3708      	adds	r7, #8
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}
 800027c:	20000080 	.word	0x20000080

08000280 <nrf24_pwr_up>:

void nrf24_r_spec_reg(uint8_t *data, uint8_t size){
	HAL_SPI_Receive(&hspiX, data, size, spi_r_timeout);
}

void nrf24_pwr_up(void){
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8000286:	2300      	movs	r3, #0
 8000288:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 800028a:	2101      	movs	r1, #1
 800028c:	2000      	movs	r0, #0
 800028e:	f7ff ffbd 	bl	800020c <nrf24_r_reg>
 8000292:	4603      	mov	r3, r0
 8000294:	71fb      	strb	r3, [r7, #7]

	data |= (1 << PWR_UP);
 8000296:	79fb      	ldrb	r3, [r7, #7]
 8000298:	f043 0302 	orr.w	r3, r3, #2
 800029c:	b2db      	uxtb	r3, r3
 800029e:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 80002a0:	1dfb      	adds	r3, r7, #7
 80002a2:	2201      	movs	r2, #1
 80002a4:	4619      	mov	r1, r3
 80002a6:	2000      	movs	r0, #0
 80002a8:	f7ff ff88 	bl	80001bc <nrf24_w_reg>
}
 80002ac:	bf00      	nop
 80002ae:	3708      	adds	r7, #8
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}

080002b4 <nrf24_data_rate>:
	data |= (pwr << RF_PWR);

	nrf24_w_reg(RF_SETUP, &data, 1);
}

void nrf24_data_rate(uint8_t bps){
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b084      	sub	sp, #16
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 80002be:	2300      	movs	r3, #0
 80002c0:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(RF_SETUP, 1);
 80002c2:	2101      	movs	r1, #1
 80002c4:	2006      	movs	r0, #6
 80002c6:	f7ff ffa1 	bl	800020c <nrf24_r_reg>
 80002ca:	4603      	mov	r3, r0
 80002cc:	73fb      	strb	r3, [r7, #15]

	data &= ~(1 << RF_DR_LOW) & ~(1 << RF_DR_HIGH);
 80002ce:	7bfb      	ldrb	r3, [r7, #15]
 80002d0:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	73fb      	strb	r3, [r7, #15]

	if(bps == _2mbps){
 80002d8:	79fb      	ldrb	r3, [r7, #7]
 80002da:	2b01      	cmp	r3, #1
 80002dc:	d105      	bne.n	80002ea <nrf24_data_rate+0x36>
		data |= (1 << RF_DR_HIGH);
 80002de:	7bfb      	ldrb	r3, [r7, #15]
 80002e0:	f043 0308 	orr.w	r3, r3, #8
 80002e4:	b2db      	uxtb	r3, r3
 80002e6:	73fb      	strb	r3, [r7, #15]
 80002e8:	e007      	b.n	80002fa <nrf24_data_rate+0x46>
	}else if(bps == _250kbps){
 80002ea:	79fb      	ldrb	r3, [r7, #7]
 80002ec:	2b02      	cmp	r3, #2
 80002ee:	d104      	bne.n	80002fa <nrf24_data_rate+0x46>
		data |= (1 << RF_DR_LOW);
 80002f0:	7bfb      	ldrb	r3, [r7, #15]
 80002f2:	f043 0320 	orr.w	r3, r3, #32
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(RF_SETUP, &data, 1);
 80002fa:	f107 030f 	add.w	r3, r7, #15
 80002fe:	2201      	movs	r2, #1
 8000300:	4619      	mov	r1, r3
 8000302:	2006      	movs	r0, #6
 8000304:	f7ff ff5a 	bl	80001bc <nrf24_w_reg>
}
 8000308:	bf00      	nop
 800030a:	3710      	adds	r7, #16
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}

08000310 <nrf24_set_channel>:

void nrf24_set_channel(uint8_t ch){
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	71fb      	strb	r3, [r7, #7]
	nrf24_w_reg(RF_CH, &ch, 1);
 800031a:	1dfb      	adds	r3, r7, #7
 800031c:	2201      	movs	r2, #1
 800031e:	4619      	mov	r1, r3
 8000320:	2005      	movs	r0, #5
 8000322:	f7ff ff4b 	bl	80001bc <nrf24_w_reg>
}
 8000326:	bf00      	nop
 8000328:	3708      	adds	r7, #8
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
	...

08000330 <nrf24_pipe_pld_size>:

void nrf24_open_tx_pipe(uint8_t *addr){
	nrf24_w_reg(TX_ADDR, addr, 5);
}

void nrf24_pipe_pld_size(uint8_t pipe, uint8_t size){
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
 8000336:	4603      	mov	r3, r0
 8000338:	460a      	mov	r2, r1
 800033a:	71fb      	strb	r3, [r7, #7]
 800033c:	4613      	mov	r3, r2
 800033e:	71bb      	strb	r3, [r7, #6]
	if(size > 32){
 8000340:	79bb      	ldrb	r3, [r7, #6]
 8000342:	2b20      	cmp	r3, #32
 8000344:	d901      	bls.n	800034a <nrf24_pipe_pld_size+0x1a>
		size = 32;
 8000346:	2320      	movs	r3, #32
 8000348:	71bb      	strb	r3, [r7, #6]
	}

	switch(pipe){
 800034a:	79fb      	ldrb	r3, [r7, #7]
 800034c:	2b05      	cmp	r3, #5
 800034e:	d839      	bhi.n	80003c4 <nrf24_pipe_pld_size+0x94>
 8000350:	a201      	add	r2, pc, #4	@ (adr r2, 8000358 <nrf24_pipe_pld_size+0x28>)
 8000352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000356:	bf00      	nop
 8000358:	08000371 	.word	0x08000371
 800035c:	0800037f 	.word	0x0800037f
 8000360:	0800038d 	.word	0x0800038d
 8000364:	0800039b 	.word	0x0800039b
 8000368:	080003a9 	.word	0x080003a9
 800036c:	080003b7 	.word	0x080003b7
	case 0:
		nrf24_w_reg(RX_PW_P0, &size, 1);
 8000370:	1dbb      	adds	r3, r7, #6
 8000372:	2201      	movs	r2, #1
 8000374:	4619      	mov	r1, r3
 8000376:	2011      	movs	r0, #17
 8000378:	f7ff ff20 	bl	80001bc <nrf24_w_reg>

		break;
 800037c:	e022      	b.n	80003c4 <nrf24_pipe_pld_size+0x94>
	case 1:
		nrf24_w_reg(RX_PW_P1, &size, 1);
 800037e:	1dbb      	adds	r3, r7, #6
 8000380:	2201      	movs	r2, #1
 8000382:	4619      	mov	r1, r3
 8000384:	2012      	movs	r0, #18
 8000386:	f7ff ff19 	bl	80001bc <nrf24_w_reg>

		break;
 800038a:	e01b      	b.n	80003c4 <nrf24_pipe_pld_size+0x94>
	case 2:
		nrf24_w_reg(RX_PW_P2, &size, 1);
 800038c:	1dbb      	adds	r3, r7, #6
 800038e:	2201      	movs	r2, #1
 8000390:	4619      	mov	r1, r3
 8000392:	2013      	movs	r0, #19
 8000394:	f7ff ff12 	bl	80001bc <nrf24_w_reg>

		break;
 8000398:	e014      	b.n	80003c4 <nrf24_pipe_pld_size+0x94>
	case 3:
		nrf24_w_reg(RX_PW_P3, &size, 1);
 800039a:	1dbb      	adds	r3, r7, #6
 800039c:	2201      	movs	r2, #1
 800039e:	4619      	mov	r1, r3
 80003a0:	2014      	movs	r0, #20
 80003a2:	f7ff ff0b 	bl	80001bc <nrf24_w_reg>

		break;
 80003a6:	e00d      	b.n	80003c4 <nrf24_pipe_pld_size+0x94>
	case 4:
		nrf24_w_reg(RX_PW_P4, &size, 1);
 80003a8:	1dbb      	adds	r3, r7, #6
 80003aa:	2201      	movs	r2, #1
 80003ac:	4619      	mov	r1, r3
 80003ae:	2015      	movs	r0, #21
 80003b0:	f7ff ff04 	bl	80001bc <nrf24_w_reg>

		break;
 80003b4:	e006      	b.n	80003c4 <nrf24_pipe_pld_size+0x94>
	case 5:
		nrf24_w_reg(RX_PW_P5, &size, 1);
 80003b6:	1dbb      	adds	r3, r7, #6
 80003b8:	2201      	movs	r2, #1
 80003ba:	4619      	mov	r1, r3
 80003bc:	2016      	movs	r0, #22
 80003be:	f7ff fefd 	bl	80001bc <nrf24_w_reg>

		break;
 80003c2:	bf00      	nop
	}
}
 80003c4:	bf00      	nop
 80003c6:	3708      	adds	r7, #8
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}

080003cc <nrf24_open_rx_pipe>:

void nrf24_open_rx_pipe(uint8_t pipe, uint8_t *addr){
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b084      	sub	sp, #16
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	4603      	mov	r3, r0
 80003d4:	6039      	str	r1, [r7, #0]
 80003d6:	71fb      	strb	r3, [r7, #7]

	uint8_t data = 0;
 80003d8:	2300      	movs	r3, #0
 80003da:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(EN_RXADDR, 1);
 80003dc:	2101      	movs	r1, #1
 80003de:	2002      	movs	r0, #2
 80003e0:	f7ff ff14 	bl	800020c <nrf24_r_reg>
 80003e4:	4603      	mov	r3, r0
 80003e6:	73fb      	strb	r3, [r7, #15]

	switch(pipe){
 80003e8:	79fb      	ldrb	r3, [r7, #7]
 80003ea:	2b05      	cmp	r3, #5
 80003ec:	d850      	bhi.n	8000490 <nrf24_open_rx_pipe+0xc4>
 80003ee:	a201      	add	r2, pc, #4	@ (adr r2, 80003f4 <nrf24_open_rx_pipe+0x28>)
 80003f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003f4:	0800040d 	.word	0x0800040d
 80003f8:	08000423 	.word	0x08000423
 80003fc:	08000439 	.word	0x08000439
 8000400:	0800044f 	.word	0x0800044f
 8000404:	08000465 	.word	0x08000465
 8000408:	0800047b 	.word	0x0800047b
	case 0:
		nrf24_w_reg(RX_ADDR_P0, addr, 5);
 800040c:	2205      	movs	r2, #5
 800040e:	6839      	ldr	r1, [r7, #0]
 8000410:	200a      	movs	r0, #10
 8000412:	f7ff fed3 	bl	80001bc <nrf24_w_reg>

		data |= (1 << ERX_P0);
 8000416:	7bfb      	ldrb	r3, [r7, #15]
 8000418:	f043 0301 	orr.w	r3, r3, #1
 800041c:	b2db      	uxtb	r3, r3
 800041e:	73fb      	strb	r3, [r7, #15]
		break;
 8000420:	e036      	b.n	8000490 <nrf24_open_rx_pipe+0xc4>
	case 1:
		nrf24_w_reg(RX_ADDR_P1, addr, 5);
 8000422:	2205      	movs	r2, #5
 8000424:	6839      	ldr	r1, [r7, #0]
 8000426:	200b      	movs	r0, #11
 8000428:	f7ff fec8 	bl	80001bc <nrf24_w_reg>

		data |= (1 << ERX_P1);
 800042c:	7bfb      	ldrb	r3, [r7, #15]
 800042e:	f043 0302 	orr.w	r3, r3, #2
 8000432:	b2db      	uxtb	r3, r3
 8000434:	73fb      	strb	r3, [r7, #15]
		break;
 8000436:	e02b      	b.n	8000490 <nrf24_open_rx_pipe+0xc4>
	case 2:
		nrf24_w_reg(RX_ADDR_P2, addr, 1);
 8000438:	2201      	movs	r2, #1
 800043a:	6839      	ldr	r1, [r7, #0]
 800043c:	200c      	movs	r0, #12
 800043e:	f7ff febd 	bl	80001bc <nrf24_w_reg>

		data |= (1 << ERX_P2);
 8000442:	7bfb      	ldrb	r3, [r7, #15]
 8000444:	f043 0304 	orr.w	r3, r3, #4
 8000448:	b2db      	uxtb	r3, r3
 800044a:	73fb      	strb	r3, [r7, #15]
		break;
 800044c:	e020      	b.n	8000490 <nrf24_open_rx_pipe+0xc4>
	case 3:
		nrf24_w_reg(RX_ADDR_P3, addr, 1);
 800044e:	2201      	movs	r2, #1
 8000450:	6839      	ldr	r1, [r7, #0]
 8000452:	200d      	movs	r0, #13
 8000454:	f7ff feb2 	bl	80001bc <nrf24_w_reg>

		data |= (1 << ERX_P3);
 8000458:	7bfb      	ldrb	r3, [r7, #15]
 800045a:	f043 0308 	orr.w	r3, r3, #8
 800045e:	b2db      	uxtb	r3, r3
 8000460:	73fb      	strb	r3, [r7, #15]
		break;
 8000462:	e015      	b.n	8000490 <nrf24_open_rx_pipe+0xc4>
	case 4:
		nrf24_w_reg(RX_ADDR_P4, addr, 1);
 8000464:	2201      	movs	r2, #1
 8000466:	6839      	ldr	r1, [r7, #0]
 8000468:	200e      	movs	r0, #14
 800046a:	f7ff fea7 	bl	80001bc <nrf24_w_reg>

		data |= (1 << ERX_P4);
 800046e:	7bfb      	ldrb	r3, [r7, #15]
 8000470:	f043 0310 	orr.w	r3, r3, #16
 8000474:	b2db      	uxtb	r3, r3
 8000476:	73fb      	strb	r3, [r7, #15]
		break;
 8000478:	e00a      	b.n	8000490 <nrf24_open_rx_pipe+0xc4>
	case 5:
		nrf24_w_reg(RX_ADDR_P5, addr, 1);
 800047a:	2201      	movs	r2, #1
 800047c:	6839      	ldr	r1, [r7, #0]
 800047e:	200f      	movs	r0, #15
 8000480:	f7ff fe9c 	bl	80001bc <nrf24_w_reg>

		data |= (1 << ERX_P5);
 8000484:	7bfb      	ldrb	r3, [r7, #15]
 8000486:	f043 0320 	orr.w	r3, r3, #32
 800048a:	b2db      	uxtb	r3, r3
 800048c:	73fb      	strb	r3, [r7, #15]
		break;
 800048e:	bf00      	nop
	}

	nrf24_w_reg(EN_RXADDR, &data, 1);
 8000490:	f107 030f 	add.w	r3, r7, #15
 8000494:	2201      	movs	r2, #1
 8000496:	4619      	mov	r1, r3
 8000498:	2002      	movs	r0, #2
 800049a:	f7ff fe8f 	bl	80001bc <nrf24_w_reg>
}
 800049e:	bf00      	nop
 80004a0:	3710      	adds	r7, #16
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop

080004a8 <nrf24_set_crc>:
	data &= ~(1 << pipe);

	nrf24_w_reg(EN_RXADDR, &data, 1);
}

void nrf24_set_crc(uint8_t en_crc, uint8_t crc0){
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	4603      	mov	r3, r0
 80004b0:	460a      	mov	r2, r1
 80004b2:	71fb      	strb	r3, [r7, #7]
 80004b4:	4613      	mov	r3, r2
 80004b6:	71bb      	strb	r3, [r7, #6]
	uint8_t data = nrf24_r_reg(CONFIG, 1);
 80004b8:	2101      	movs	r1, #1
 80004ba:	2000      	movs	r0, #0
 80004bc:	f7ff fea6 	bl	800020c <nrf24_r_reg>
 80004c0:	4603      	mov	r3, r0
 80004c2:	73fb      	strb	r3, [r7, #15]

	data &= ~(1 << EN_CRC) & ~(1 << CRCO);
 80004c4:	7bfb      	ldrb	r3, [r7, #15]
 80004c6:	f023 030c 	bic.w	r3, r3, #12
 80004ca:	b2db      	uxtb	r3, r3
 80004cc:	73fb      	strb	r3, [r7, #15]

	data |= (en_crc << EN_CRC) | (crc0 << CRCO);
 80004ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004d2:	00db      	lsls	r3, r3, #3
 80004d4:	b25a      	sxtb	r2, r3
 80004d6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80004da:	009b      	lsls	r3, r3, #2
 80004dc:	b25b      	sxtb	r3, r3
 80004de:	4313      	orrs	r3, r2
 80004e0:	b25a      	sxtb	r2, r3
 80004e2:	7bfb      	ldrb	r3, [r7, #15]
 80004e4:	b25b      	sxtb	r3, r3
 80004e6:	4313      	orrs	r3, r2
 80004e8:	b25b      	sxtb	r3, r3
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(CONFIG, &data, 1);
 80004ee:	f107 030f 	add.w	r3, r7, #15
 80004f2:	2201      	movs	r2, #1
 80004f4:	4619      	mov	r1, r3
 80004f6:	2000      	movs	r0, #0
 80004f8:	f7ff fe60 	bl	80001bc <nrf24_w_reg>
}
 80004fc:	bf00      	nop
 80004fe:	3710      	adds	r7, #16
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}

08000504 <nrf24_set_addr_width>:

void nrf24_set_addr_width(uint8_t bytes){
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	71fb      	strb	r3, [r7, #7]
	bytes -= 2;
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	3b02      	subs	r3, #2
 8000512:	b2db      	uxtb	r3, r3
 8000514:	71fb      	strb	r3, [r7, #7]
	nrf24_w_reg(SETUP_AW, &bytes, 1);
 8000516:	1dfb      	adds	r3, r7, #7
 8000518:	2201      	movs	r2, #1
 800051a:	4619      	mov	r1, r3
 800051c:	2003      	movs	r0, #3
 800051e:	f7ff fe4d 	bl	80001bc <nrf24_w_reg>
}
 8000522:	bf00      	nop
 8000524:	3708      	adds	r7, #8
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}

0800052a <nrf24_flush_tx>:

void nrf24_flush_tx(void){
 800052a:	b580      	push	{r7, lr}
 800052c:	af00      	add	r7, sp, #0
	csn_low();
 800052e:	f7ff fe21 	bl	8000174 <csn_low>
	nrf24_w_spec_cmd(FLUSH_TX);
 8000532:	20e1      	movs	r0, #225	@ 0xe1
 8000534:	f7ff fe92 	bl	800025c <nrf24_w_spec_cmd>
	csn_high();
 8000538:	f7ff fe10 	bl	800015c <csn_high>
}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}

08000540 <nrf24_flush_rx>:

void nrf24_flush_rx(void){
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	csn_low();
 8000544:	f7ff fe16 	bl	8000174 <csn_low>
	nrf24_w_spec_cmd(FLUSH_RX);
 8000548:	20e2      	movs	r0, #226	@ 0xe2
 800054a:	f7ff fe87 	bl	800025c <nrf24_w_spec_cmd>
	csn_high();
 800054e:	f7ff fe05 	bl	800015c <csn_high>
}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
	...

08000558 <nrf24_r_status>:

uint8_t nrf24_r_status(void){
 8000558:	b580      	push	{r7, lr}
 800055a:	b084      	sub	sp, #16
 800055c:	af02      	add	r7, sp, #8
	uint8_t data = 0;
 800055e:	2300      	movs	r3, #0
 8000560:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = NOP_CMD;
 8000562:	23ff      	movs	r3, #255	@ 0xff
 8000564:	71bb      	strb	r3, [r7, #6]

	csn_low();
 8000566:	f7ff fe05 	bl	8000174 <csn_low>
	HAL_SPI_TransmitReceive(&hspiX, &cmd, &data, 1, spi_rw_timeout);
 800056a:	1dfa      	adds	r2, r7, #7
 800056c:	1db9      	adds	r1, r7, #6
 800056e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000572:	9300      	str	r3, [sp, #0]
 8000574:	2301      	movs	r3, #1
 8000576:	4805      	ldr	r0, [pc, #20]	@ (800058c <nrf24_r_status+0x34>)
 8000578:	f002 f86f 	bl	800265a <HAL_SPI_TransmitReceive>
	csn_high();
 800057c:	f7ff fdee 	bl	800015c <csn_high>

	return data;
 8000580:	79fb      	ldrb	r3, [r7, #7]
}
 8000582:	4618      	mov	r0, r3
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	20000080 	.word	0x20000080

08000590 <nrf24_clear_rx_dr>:

void nrf24_clear_rx_dr(void){
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8000596:	2300      	movs	r3, #0
 8000598:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 800059a:	f7ff ffdd 	bl	8000558 <nrf24_r_status>
 800059e:	4603      	mov	r3, r0
 80005a0:	71fb      	strb	r3, [r7, #7]

	data |= (1 << RX_DR);
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(STATUS, &data, 1);
 80005ac:	1dfb      	adds	r3, r7, #7
 80005ae:	2201      	movs	r2, #1
 80005b0:	4619      	mov	r1, r3
 80005b2:	2007      	movs	r0, #7
 80005b4:	f7ff fe02 	bl	80001bc <nrf24_w_reg>
}
 80005b8:	bf00      	nop
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <nrf24_clear_tx_ds>:

void nrf24_clear_tx_ds(void){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 80005ca:	f7ff ffc5 	bl	8000558 <nrf24_r_status>
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]

	data |= (1 << TX_DS);
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	f043 0320 	orr.w	r3, r3, #32
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	71fb      	strb	r3, [r7, #7]

    nrf24_w_reg(STATUS, &data, 1);
 80005dc:	1dfb      	adds	r3, r7, #7
 80005de:	2201      	movs	r2, #1
 80005e0:	4619      	mov	r1, r3
 80005e2:	2007      	movs	r0, #7
 80005e4:	f7ff fdea 	bl	80001bc <nrf24_w_reg>
}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <nrf24_clear_max_rt>:

void nrf24_clear_max_rt(void){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 80005fa:	f7ff ffad 	bl	8000558 <nrf24_r_status>
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]

	data |= (1 << MAX_RT);
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	f043 0310 	orr.w	r3, r3, #16
 8000608:	b2db      	uxtb	r3, r3
 800060a:	71fb      	strb	r3, [r7, #7]

    nrf24_w_reg(STATUS, &data, 1);
 800060c:	1dfb      	adds	r3, r7, #7
 800060e:	2201      	movs	r2, #1
 8000610:	4619      	mov	r1, r3
 8000612:	2007      	movs	r0, #7
 8000614:	f7ff fdd2 	bl	80001bc <nrf24_w_reg>
}
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <nrf24_set_bit>:
	}

	return 0;
}

void nrf24_set_bit(uint8_t reg, uint8_t bit, uint8_t val){
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	71fb      	strb	r3, [r7, #7]
 800062a:	460b      	mov	r3, r1
 800062c:	71bb      	strb	r3, [r7, #6]
 800062e:	4613      	mov	r3, r2
 8000630:	717b      	strb	r3, [r7, #5]
	uint8_t data = 0;
 8000632:	2300      	movs	r3, #0
 8000634:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(reg, 1);
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	2101      	movs	r1, #1
 800063a:	4618      	mov	r0, r3
 800063c:	f7ff fde6 	bl	800020c <nrf24_r_reg>
 8000640:	4603      	mov	r3, r0
 8000642:	73fb      	strb	r3, [r7, #15]

	if(val){
 8000644:	797b      	ldrb	r3, [r7, #5]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d00b      	beq.n	8000662 <nrf24_set_bit+0x42>
		data |= (1 << bit);
 800064a:	79bb      	ldrb	r3, [r7, #6]
 800064c:	2201      	movs	r2, #1
 800064e:	fa02 f303 	lsl.w	r3, r2, r3
 8000652:	b25a      	sxtb	r2, r3
 8000654:	7bfb      	ldrb	r3, [r7, #15]
 8000656:	b25b      	sxtb	r3, r3
 8000658:	4313      	orrs	r3, r2
 800065a:	b25b      	sxtb	r3, r3
 800065c:	b2db      	uxtb	r3, r3
 800065e:	73fb      	strb	r3, [r7, #15]
 8000660:	e00c      	b.n	800067c <nrf24_set_bit+0x5c>
	}else{
		data &= ~(1 << bit);
 8000662:	79bb      	ldrb	r3, [r7, #6]
 8000664:	2201      	movs	r2, #1
 8000666:	fa02 f303 	lsl.w	r3, r2, r3
 800066a:	b25b      	sxtb	r3, r3
 800066c:	43db      	mvns	r3, r3
 800066e:	b25a      	sxtb	r2, r3
 8000670:	7bfb      	ldrb	r3, [r7, #15]
 8000672:	b25b      	sxtb	r3, r3
 8000674:	4013      	ands	r3, r2
 8000676:	b25b      	sxtb	r3, r3
 8000678:	b2db      	uxtb	r3, r3
 800067a:	73fb      	strb	r3, [r7, #15]
	}

    nrf24_w_reg(reg, &data, 1);
 800067c:	f107 010f 	add.w	r1, r7, #15
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	2201      	movs	r2, #1
 8000684:	4618      	mov	r0, r3
 8000686:	f7ff fd99 	bl	80001bc <nrf24_w_reg>
}
 800068a:	bf00      	nop
 800068c:	3710      	adds	r7, #16
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <nrf24_listen>:
	csn_high();

	return width;
}

void nrf24_listen(void){
 8000692:	b580      	push	{r7, lr}
 8000694:	b082      	sub	sp, #8
 8000696:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 800069c:	2101      	movs	r1, #1
 800069e:	2000      	movs	r0, #0
 80006a0:	f7ff fdb4 	bl	800020c <nrf24_r_reg>
 80006a4:	4603      	mov	r3, r0
 80006a6:	71fb      	strb	r3, [r7, #7]

	data |= (1 << PRIM_RX);
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	f043 0301 	orr.w	r3, r3, #1
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 80006b2:	1dfb      	adds	r3, r7, #7
 80006b4:	2201      	movs	r2, #1
 80006b6:	4619      	mov	r1, r3
 80006b8:	2000      	movs	r0, #0
 80006ba:	f7ff fd7f 	bl	80001bc <nrf24_w_reg>

	ce_high();
 80006be:	f7ff fd65 	bl	800018c <ce_high>
}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}

080006ca <nrf24_dpl>:
	data &= ~(1 << PRIM_RX);

	nrf24_w_reg(CONFIG, &data, 1);
}

void nrf24_dpl(uint8_t en){
 80006ca:	b580      	push	{r7, lr}
 80006cc:	b084      	sub	sp, #16
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	4603      	mov	r3, r0
 80006d2:	71fb      	strb	r3, [r7, #7]
	uint8_t feature = nrf24_r_reg(FEATURE, 1);
 80006d4:	2101      	movs	r1, #1
 80006d6:	201d      	movs	r0, #29
 80006d8:	f7ff fd98 	bl	800020c <nrf24_r_reg>
 80006dc:	4603      	mov	r3, r0
 80006de:	73fb      	strb	r3, [r7, #15]

	if(en == enable){
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d105      	bne.n	80006f2 <nrf24_dpl+0x28>
		feature |= (1 << EN_DPL);
 80006e6:	7bfb      	ldrb	r3, [r7, #15]
 80006e8:	f043 0304 	orr.w	r3, r3, #4
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	73fb      	strb	r3, [r7, #15]
 80006f0:	e004      	b.n	80006fc <nrf24_dpl+0x32>
	}else{
		feature &= ~(1 << EN_DPL);
 80006f2:	7bfb      	ldrb	r3, [r7, #15]
 80006f4:	f023 0304 	bic.w	r3, r3, #4
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(FEATURE, &feature, 1);
 80006fc:	f107 030f 	add.w	r3, r7, #15
 8000700:	2201      	movs	r2, #1
 8000702:	4619      	mov	r1, r3
 8000704:	201d      	movs	r0, #29
 8000706:	f7ff fd59 	bl	80001bc <nrf24_w_reg>
}
 800070a:	bf00      	nop
 800070c:	3710      	adds	r7, #16
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}

08000712 <nrf24_auto_ack_all>:
	}

	nrf24_w_reg(EN_AA, &enaa, 1);
}

void nrf24_auto_ack_all(uint8_t ack){
 8000712:	b580      	push	{r7, lr}
 8000714:	b084      	sub	sp, #16
 8000716:	af00      	add	r7, sp, #0
 8000718:	4603      	mov	r3, r0
 800071a:	71fb      	strb	r3, [r7, #7]
	uint8_t enaa = nrf24_r_reg(EN_AA, 1);
 800071c:	2101      	movs	r1, #1
 800071e:	2001      	movs	r0, #1
 8000720:	f7ff fd74 	bl	800020c <nrf24_r_reg>
 8000724:	4603      	mov	r3, r0
 8000726:	73fb      	strb	r3, [r7, #15]

	if(ack){
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d002      	beq.n	8000734 <nrf24_auto_ack_all+0x22>
		enaa = 63;
 800072e:	233f      	movs	r3, #63	@ 0x3f
 8000730:	73fb      	strb	r3, [r7, #15]
 8000732:	e001      	b.n	8000738 <nrf24_auto_ack_all+0x26>
	}else{
		enaa = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(EN_AA, &enaa, 1);
 8000738:	f107 030f 	add.w	r3, r7, #15
 800073c:	2201      	movs	r2, #1
 800073e:	4619      	mov	r1, r3
 8000740:	2001      	movs	r0, #1
 8000742:	f7ff fd3b 	bl	80001bc <nrf24_w_reg>
}
 8000746:	bf00      	nop
 8000748:	3710      	adds	r7, #16
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <nrf24_en_ack_pld>:

void nrf24_en_ack_pld(uint8_t en){
 800074e:	b580      	push	{r7, lr}
 8000750:	b084      	sub	sp, #16
 8000752:	af00      	add	r7, sp, #0
 8000754:	4603      	mov	r3, r0
 8000756:	71fb      	strb	r3, [r7, #7]
	uint8_t feature = nrf24_r_reg(FEATURE, 1);
 8000758:	2101      	movs	r1, #1
 800075a:	201d      	movs	r0, #29
 800075c:	f7ff fd56 	bl	800020c <nrf24_r_reg>
 8000760:	4603      	mov	r3, r0
 8000762:	73fb      	strb	r3, [r7, #15]

	if(en){
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d005      	beq.n	8000776 <nrf24_en_ack_pld+0x28>
		feature |= (1 << EN_ACK_PAY);
 800076a:	7bfb      	ldrb	r3, [r7, #15]
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	b2db      	uxtb	r3, r3
 8000772:	73fb      	strb	r3, [r7, #15]
 8000774:	e004      	b.n	8000780 <nrf24_en_ack_pld+0x32>
	}else{
		feature &= ~(1 << EN_ACK_PAY);
 8000776:	7bfb      	ldrb	r3, [r7, #15]
 8000778:	f023 0302 	bic.w	r3, r3, #2
 800077c:	b2db      	uxtb	r3, r3
 800077e:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(FEATURE, &feature, 1);
 8000780:	f107 030f 	add.w	r3, r7, #15
 8000784:	2201      	movs	r2, #1
 8000786:	4619      	mov	r1, r3
 8000788:	201d      	movs	r0, #29
 800078a:	f7ff fd17 	bl	80001bc <nrf24_w_reg>
}
 800078e:	bf00      	nop
 8000790:	3710      	adds	r7, #16
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <nrf24_en_dyn_ack>:

void nrf24_en_dyn_ack(uint8_t en){
 8000796:	b580      	push	{r7, lr}
 8000798:	b084      	sub	sp, #16
 800079a:	af00      	add	r7, sp, #0
 800079c:	4603      	mov	r3, r0
 800079e:	71fb      	strb	r3, [r7, #7]
	uint8_t feature = nrf24_r_reg(FEATURE, 1);
 80007a0:	2101      	movs	r1, #1
 80007a2:	201d      	movs	r0, #29
 80007a4:	f7ff fd32 	bl	800020c <nrf24_r_reg>
 80007a8:	4603      	mov	r3, r0
 80007aa:	73fb      	strb	r3, [r7, #15]

	if(en){
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d005      	beq.n	80007be <nrf24_en_dyn_ack+0x28>
		feature |= (1 << EN_DYN_ACK);
 80007b2:	7bfb      	ldrb	r3, [r7, #15]
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	73fb      	strb	r3, [r7, #15]
 80007bc:	e004      	b.n	80007c8 <nrf24_en_dyn_ack+0x32>
	}else{
		feature &= ~(1 << EN_DYN_ACK);
 80007be:	7bfb      	ldrb	r3, [r7, #15]
 80007c0:	f023 0301 	bic.w	r3, r3, #1
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(FEATURE, &feature, 1);
 80007c8:	f107 030f 	add.w	r3, r7, #15
 80007cc:	2201      	movs	r2, #1
 80007ce:	4619      	mov	r1, r3
 80007d0:	201d      	movs	r0, #29
 80007d2:	f7ff fcf3 	bl	80001bc <nrf24_w_reg>
}
 80007d6:	bf00      	nop
 80007d8:	3710      	adds	r7, #16
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <nrf24_data_available>:

uint8_t nrf24_carrier_detect(void){
	return nrf24_r_reg(RPD, 1);
}

uint8_t nrf24_data_available(void){
 80007de:	b580      	push	{r7, lr}
 80007e0:	b082      	sub	sp, #8
 80007e2:	af00      	add	r7, sp, #0

 	uint8_t reg_dt = nrf24_r_reg(FIFO_STATUS, 1);
 80007e4:	2101      	movs	r1, #1
 80007e6:	2017      	movs	r0, #23
 80007e8:	f7ff fd10 	bl	800020c <nrf24_r_reg>
 80007ec:	4603      	mov	r3, r0
 80007ee:	71fb      	strb	r3, [r7, #7]

	if(!(reg_dt & (1 << RX_EMPTY))){
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d101      	bne.n	80007fe <nrf24_data_available+0x20>
		return 1;
 80007fa:	2301      	movs	r3, #1
 80007fc:	e000      	b.n	8000800 <nrf24_data_available+0x22>
	}

	return 0;
 80007fe:	2300      	movs	r3, #0
}
 8000800:	4618      	mov	r0, r3
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <nrf24_receive>:

void nrf24_receive(uint8_t *data, uint8_t size){
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	460b      	mov	r3, r1
 8000812:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd = R_RX_PAYLOAD;
 8000814:	2361      	movs	r3, #97	@ 0x61
 8000816:	73fb      	strb	r3, [r7, #15]

	csn_low();
 8000818:	f7ff fcac 	bl	8000174 <csn_low>
	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 800081c:	f107 010f 	add.w	r1, r7, #15
 8000820:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000824:	2201      	movs	r2, #1
 8000826:	4809      	ldr	r0, [pc, #36]	@ (800084c <nrf24_receive+0x44>)
 8000828:	f001 fcbc 	bl	80021a4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspiX, data, size, spi_r_timeout);
 800082c:	78fb      	ldrb	r3, [r7, #3]
 800082e:	b29a      	uxth	r2, r3
 8000830:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000834:	6879      	ldr	r1, [r7, #4]
 8000836:	4805      	ldr	r0, [pc, #20]	@ (800084c <nrf24_receive+0x44>)
 8000838:	f001 fdf7 	bl	800242a <HAL_SPI_Receive>
	csn_high();
 800083c:	f7ff fc8e 	bl	800015c <csn_high>

	nrf24_clear_rx_dr();
 8000840:	f7ff fea6 	bl	8000590 <nrf24_clear_rx_dr>
}
 8000844:	bf00      	nop
 8000846:	3710      	adds	r7, #16
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000080 	.word	0x20000080

08000850 <NRF24_Init>:
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */
bool NRF24_Init(void){
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
	ce_low();
 8000856:	f7ff fca5 	bl	80001a4 <ce_low>
	csn_high();
 800085a:	f7ff fc7f 	bl	800015c <csn_high>

	HAL_Delay(5);
 800085e:	2005      	movs	r0, #5
 8000860:	f000 fc8c 	bl	800117c <HAL_Delay>

	// Velocidad inicial confiable (1 Mbps)
	nrf24_data_rate(_1mbps);
 8000864:	2000      	movs	r0, #0
 8000866:	f7ff fd25 	bl	80002b4 <nrf24_data_rate>

    // Deshabilitar ACK payload y payload dinámico por defecto
	nrf24_en_ack_pld(disable);
 800086a:	2000      	movs	r0, #0
 800086c:	f7ff ff6f 	bl	800074e <nrf24_en_ack_pld>
	nrf24_en_dyn_ack(disable);
 8000870:	2000      	movs	r0, #0
 8000872:	f7ff ff90 	bl	8000796 <nrf24_en_dyn_ack>
	nrf24_dpl(disable);
 8000876:	2000      	movs	r0, #0
 8000878:	f7ff ff27 	bl	80006ca <nrf24_dpl>

    // Habilitar auto-ack en todos los pipes (puede ajustarse)
	nrf24_auto_ack_all(enable);
 800087c:	2001      	movs	r0, #1
 800087e:	f7ff ff48 	bl	8000712 <nrf24_auto_ack_all>

    // Habilitar solo pipes RX 0 y 1 por defecto
	nrf24_open_rx_pipe(0, addr);
 8000882:	4933      	ldr	r1, [pc, #204]	@ (8000950 <NRF24_Init+0x100>)
 8000884:	2000      	movs	r0, #0
 8000886:	f7ff fda1 	bl	80003cc <nrf24_open_rx_pipe>
	nrf24_open_rx_pipe(1, addr);
 800088a:	4931      	ldr	r1, [pc, #196]	@ (8000950 <NRF24_Init+0x100>)
 800088c:	2001      	movs	r0, #1
 800088e:	f7ff fd9d 	bl	80003cc <nrf24_open_rx_pipe>
//	uint8_t data = 0x03
//	nrf24_w_reg(EN_RXADDR, data, sizeof(data));

    // Tamaño fijo de payload (por defecto 32 bytes)
	nrf24_pipe_pld_size(0, PLD_SIZE);
 8000892:	2120      	movs	r1, #32
 8000894:	2000      	movs	r0, #0
 8000896:	f7ff fd4b 	bl	8000330 <nrf24_pipe_pld_size>
	nrf24_pipe_pld_size(1, PLD_SIZE);
 800089a:	2120      	movs	r1, #32
 800089c:	2001      	movs	r0, #1
 800089e:	f7ff fd47 	bl	8000330 <nrf24_pipe_pld_size>
	nrf24_pipe_pld_size(2, PLD_SIZE);
 80008a2:	2120      	movs	r1, #32
 80008a4:	2002      	movs	r0, #2
 80008a6:	f7ff fd43 	bl	8000330 <nrf24_pipe_pld_size>
	nrf24_pipe_pld_size(3, PLD_SIZE);
 80008aa:	2120      	movs	r1, #32
 80008ac:	2003      	movs	r0, #3
 80008ae:	f7ff fd3f 	bl	8000330 <nrf24_pipe_pld_size>
	nrf24_pipe_pld_size(4, PLD_SIZE);
 80008b2:	2120      	movs	r1, #32
 80008b4:	2004      	movs	r0, #4
 80008b6:	f7ff fd3b 	bl	8000330 <nrf24_pipe_pld_size>
	nrf24_pipe_pld_size(5, PLD_SIZE);
 80008ba:	2120      	movs	r1, #32
 80008bc:	2005      	movs	r0, #5
 80008be:	f7ff fd37 	bl	8000330 <nrf24_pipe_pld_size>

    // Ancho de dirección: 5 bytes (máximo permitido)
	nrf24_set_addr_width(5);
 80008c2:	2005      	movs	r0, #5
 80008c4:	f7ff fe1e 	bl	8000504 <nrf24_set_addr_width>

	// Canal por defecto (76 → dentro de ISM band y sin interferencia típica)
	nrf24_set_channel(76);
 80008c8:	204c      	movs	r0, #76	@ 0x4c
 80008ca:	f7ff fd21 	bl	8000310 <nrf24_set_channel>

    // Limpiar flags de status
	nrf24_clear_max_rt();
 80008ce:	f7ff fe8f 	bl	80005f0 <nrf24_clear_max_rt>
	nrf24_clear_rx_dr();
 80008d2:	f7ff fe5d 	bl	8000590 <nrf24_clear_rx_dr>
	nrf24_clear_tx_ds();
 80008d6:	f7ff fe73 	bl	80005c0 <nrf24_clear_tx_ds>

    // Flush buffers
	nrf24_flush_rx();
 80008da:	f7ff fe31 	bl	8000540 <nrf24_flush_rx>
	nrf24_flush_tx();
 80008de:	f7ff fe24 	bl	800052a <nrf24_flush_tx>

	//Retransmission setup
	// 0110 (ARD) = 1.5ms, 0101 (ARC) = 5 retries.
	uint8_t setup = 0b01100101;
 80008e2:	2365      	movs	r3, #101	@ 0x65
 80008e4:	707b      	strb	r3, [r7, #1]
	uint8_t* p = &setup;
 80008e6:	1c7b      	adds	r3, r7, #1
 80008e8:	607b      	str	r3, [r7, #4]
	nrf24_w_reg(SETUP_RETR, p, sizeof(setup));
 80008ea:	2201      	movs	r2, #1
 80008ec:	6879      	ldr	r1, [r7, #4]
 80008ee:	2004      	movs	r0, #4
 80008f0:	f7ff fc64 	bl	80001bc <nrf24_w_reg>

	uint8_t SETUP_reg = nrf24_r_reg(SETUP_RETR, 1);
 80008f4:	2101      	movs	r1, #1
 80008f6:	2004      	movs	r0, #4
 80008f8:	f7ff fc88 	bl	800020c <nrf24_r_reg>
 80008fc:	4603      	mov	r3, r0
 80008fe:	70fb      	strb	r3, [r7, #3]

	//Para debug
	uint8_t CONFIG_reg = nrf24_r_reg(CONFIG, 1);
 8000900:	2101      	movs	r1, #1
 8000902:	2000      	movs	r0, #0
 8000904:	f7ff fc82 	bl	800020c <nrf24_r_reg>
 8000908:	4603      	mov	r3, r0
 800090a:	70bb      	strb	r3, [r7, #2]
    // Configurar registro CONFIG:
    // - CRC de 2 bytes (CRCO)
    // - CRC habilitado (EN_CRC)
    // - Power Up (PWR_UP)
    // - Modo PTX (PRIM_RX = 0)
	nrf24_set_crc(en_crc, _2byte);
 800090c:	2101      	movs	r1, #1
 800090e:	2001      	movs	r0, #1
 8000910:	f7ff fdca 	bl	80004a8 <nrf24_set_crc>
	nrf24_pwr_up();
 8000914:	f7ff fcb4 	bl	8000280 <nrf24_pwr_up>
	// Pongo en Modo PTX (PRIM_RX = 0)
	nrf24_set_bit(CONFIG, 0, 0);
 8000918:	2200      	movs	r2, #0
 800091a:	2100      	movs	r1, #0
 800091c:	2000      	movs	r0, #0
 800091e:	f7ff fe7f 	bl	8000620 <nrf24_set_bit>

	//Para debug
	CONFIG_reg = nrf24_r_reg(CONFIG, 1);
 8000922:	2101      	movs	r1, #1
 8000924:	2000      	movs	r0, #0
 8000926:	f7ff fc71 	bl	800020c <nrf24_r_reg>
 800092a:	4603      	mov	r3, r0
 800092c:	70bb      	strb	r3, [r7, #2]

    // Delay de power-up a standby (~1.5ms recomendado)
    HAL_Delay(2);
 800092e:	2002      	movs	r0, #2
 8000930:	f000 fc24 	bl	800117c <HAL_Delay>

    // Verificación de escritura de CONFIG
    return (nrf24_r_reg(CONFIG, 1) == (_BV(EN_CRC) | _BV(CRCO) | _BV(PWR_UP))) ? true : false;
 8000934:	2101      	movs	r1, #1
 8000936:	2000      	movs	r0, #0
 8000938:	f7ff fc68 	bl	800020c <nrf24_r_reg>
 800093c:	4603      	mov	r3, r0
 800093e:	2b0e      	cmp	r3, #14
 8000940:	bf0c      	ite	eq
 8000942:	2301      	moveq	r3, #1
 8000944:	2300      	movne	r3, #0
 8000946:	b2db      	uxtb	r3, r3

}
 8000948:	4618      	mov	r0, r3
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000000 	.word	0x20000000

08000954 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b09c      	sub	sp, #112	@ 0x70
 8000958:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800095a:	f000 fbad 	bl	80010b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800095e:	f000 f877 	bl	8000a50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000962:	f000 f98d 	bl	8000c80 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000966:	f000 f8b3 	bl	8000ad0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800096a:	f000 f95f 	bl	8000c2c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800096e:	f000 f8e5 	bl	8000b3c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  if (NRF24_Init() == 0) {
 8000972:	f7ff ff6d 	bl	8000850 <NRF24_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	f083 0301 	eor.w	r3, r3, #1
 800097c:	b2db      	uxtb	r3, r3
 800097e:	2b00      	cmp	r3, #0
 8000980:	d007      	beq.n	8000992 <main+0x3e>

	HAL_UART_Transmit(&huart1, "Error al iniciar la radio.\n", strlen("Error al iniciar la radio.\n"), HAL_MAX_DELAY);
 8000982:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000986:	221b      	movs	r2, #27
 8000988:	492b      	ldr	r1, [pc, #172]	@ (8000a38 <main+0xe4>)
 800098a:	482c      	ldr	r0, [pc, #176]	@ (8000a3c <main+0xe8>)
 800098c:	f002 ff72 	bl	8003874 <HAL_UART_Transmit>
 8000990:	e006      	b.n	80009a0 <main+0x4c>
  }
  else{

	HAL_UART_Transmit(&huart1, "Radio Iniciada.\n", strlen("Radio Iniciada.\n"), HAL_MAX_DELAY);
 8000992:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000996:	2210      	movs	r2, #16
 8000998:	4929      	ldr	r1, [pc, #164]	@ (8000a40 <main+0xec>)
 800099a:	4828      	ldr	r0, [pc, #160]	@ (8000a3c <main+0xe8>)
 800099c:	f002 ff6a 	bl	8003874 <HAL_UART_Transmit>
  }

  //radio.setDataRate(RF24_250KBPS);
  nrf24_data_rate(_250kbps);
 80009a0:	2002      	movs	r0, #2
 80009a2:	f7ff fc87 	bl	80002b4 <nrf24_data_rate>
  //radio.openReadingPipe(1, direccion);
  nrf24_open_rx_pipe(1, addr);
 80009a6:	4927      	ldr	r1, [pc, #156]	@ (8000a44 <main+0xf0>)
 80009a8:	2001      	movs	r0, #1
 80009aa:	f7ff fd0f 	bl	80003cc <nrf24_open_rx_pipe>
  //radio.startListening();
  nrf24_listen();
 80009ae:	f7ff fe70 	bl	8000692 <nrf24_listen>
//	  Serial.print("\nCoord X: ");
//	  Serial.print((int)mensaje.x);
//	  Serial.print("\tCoord Y: ");
//	  Serial.print((int)mensaje.y);
//	}
	if (nrf24_data_available()) {
 80009b2:	f7ff ff14 	bl	80007de <nrf24_data_available>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d039      	beq.n	8000a30 <main+0xdc>
	  //radio.read(&mensaje, sizeof(mensaje));
		uint8_t rx_buffer[sizeof(mensaje_t)];

		nrf24_receive(rx_buffer, sizeof(mensaje_t));
 80009bc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80009c0:	2104      	movs	r1, #4
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff ff20 	bl	8000808 <nrf24_receive>

		mensaje.x = (rx_buffer[1] << 8) | rx_buffer[0];
 80009c8:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 80009cc:	b21b      	sxth	r3, r3
 80009ce:	021b      	lsls	r3, r3, #8
 80009d0:	b21a      	sxth	r2, r3
 80009d2:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 80009d6:	b21b      	sxth	r3, r3
 80009d8:	4313      	orrs	r3, r2
 80009da:	b21b      	sxth	r3, r3
 80009dc:	b29a      	uxth	r2, r3
 80009de:	4b1a      	ldr	r3, [pc, #104]	@ (8000a48 <main+0xf4>)
 80009e0:	801a      	strh	r2, [r3, #0]
		mensaje.y = (rx_buffer[3] << 8) | rx_buffer[2];
 80009e2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80009e6:	b21b      	sxth	r3, r3
 80009e8:	021b      	lsls	r3, r3, #8
 80009ea:	b21a      	sxth	r2, r3
 80009ec:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80009f0:	b21b      	sxth	r3, r3
 80009f2:	4313      	orrs	r3, r2
 80009f4:	b21b      	sxth	r3, r3
 80009f6:	b29a      	uxth	r2, r3
 80009f8:	4b13      	ldr	r3, [pc, #76]	@ (8000a48 <main+0xf4>)
 80009fa:	805a      	strh	r2, [r3, #2]

	    char buffer[100];
		snprintf(buffer,sizeof(buffer),"\nCoord X: %i\tCoord Y: %i",mensaje.x,mensaje.y);
 80009fc:	4b12      	ldr	r3, [pc, #72]	@ (8000a48 <main+0xf4>)
 80009fe:	881b      	ldrh	r3, [r3, #0]
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b11      	ldr	r3, [pc, #68]	@ (8000a48 <main+0xf4>)
 8000a04:	885b      	ldrh	r3, [r3, #2]
 8000a06:	4638      	mov	r0, r7
 8000a08:	9300      	str	r3, [sp, #0]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	4a0f      	ldr	r2, [pc, #60]	@ (8000a4c <main+0xf8>)
 8000a0e:	2164      	movs	r1, #100	@ 0x64
 8000a10:	f003 fd04 	bl	800441c <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000a14:	463b      	mov	r3, r7
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff fb98 	bl	800014c <strlen>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	b29a      	uxth	r2, r3
 8000a20:	4639      	mov	r1, r7
 8000a22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a26:	4805      	ldr	r0, [pc, #20]	@ (8000a3c <main+0xe8>)
 8000a28:	f002 ff24 	bl	8003874 <HAL_UART_Transmit>

		nrf24_flush_rx();
 8000a2c:	f7ff fd88 	bl	8000540 <nrf24_flush_rx>
	}

	HAL_Delay(5);
 8000a30:	2005      	movs	r0, #5
 8000a32:	f000 fba3 	bl	800117c <HAL_Delay>
	if (nrf24_data_available()) {
 8000a36:	e7bc      	b.n	80009b2 <main+0x5e>
 8000a38:	08004dbc 	.word	0x08004dbc
 8000a3c:	20000120 	.word	0x20000120
 8000a40:	08004dd8 	.word	0x08004dd8
 8000a44:	20000000 	.word	0x20000000
 8000a48:	20000168 	.word	0x20000168
 8000a4c:	08004dec 	.word	0x08004dec

08000a50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b090      	sub	sp, #64	@ 0x40
 8000a54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a56:	f107 0318 	add.w	r3, r7, #24
 8000a5a:	2228      	movs	r2, #40	@ 0x28
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f003 fd12 	bl	8004488 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
 8000a6e:	60da      	str	r2, [r3, #12]
 8000a70:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a72:	2302      	movs	r3, #2
 8000a74:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a76:	2301      	movs	r3, #1
 8000a78:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a7a:	2310      	movs	r3, #16
 8000a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000a82:	2300      	movs	r3, #0
 8000a84:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000a86:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a8c:	f107 0318 	add.w	r3, r7, #24
 8000a90:	4618      	mov	r0, r3
 8000a92:	f000 fef3 	bl	800187c <HAL_RCC_OscConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000a9c:	f000 f93c 	bl	8000d18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa0:	230f      	movs	r3, #15
 8000aa2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aac:	2300      	movs	r3, #0
 8000aae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f001 f961 	bl	8001d80 <HAL_RCC_ClockConfig>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000ac4:	f000 f928 	bl	8000d18 <Error_Handler>
  }
}
 8000ac8:	bf00      	nop
 8000aca:	3740      	adds	r7, #64	@ 0x40
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ad4:	4b17      	ldr	r3, [pc, #92]	@ (8000b34 <MX_SPI1_Init+0x64>)
 8000ad6:	4a18      	ldr	r2, [pc, #96]	@ (8000b38 <MX_SPI1_Init+0x68>)
 8000ad8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ada:	4b16      	ldr	r3, [pc, #88]	@ (8000b34 <MX_SPI1_Init+0x64>)
 8000adc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ae0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ae2:	4b14      	ldr	r3, [pc, #80]	@ (8000b34 <MX_SPI1_Init+0x64>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ae8:	4b12      	ldr	r3, [pc, #72]	@ (8000b34 <MX_SPI1_Init+0x64>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aee:	4b11      	ldr	r3, [pc, #68]	@ (8000b34 <MX_SPI1_Init+0x64>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000af4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b34 <MX_SPI1_Init+0x64>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000afa:	4b0e      	ldr	r3, [pc, #56]	@ (8000b34 <MX_SPI1_Init+0x64>)
 8000afc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b00:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b02:	4b0c      	ldr	r3, [pc, #48]	@ (8000b34 <MX_SPI1_Init+0x64>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b08:	4b0a      	ldr	r3, [pc, #40]	@ (8000b34 <MX_SPI1_Init+0x64>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b0e:	4b09      	ldr	r3, [pc, #36]	@ (8000b34 <MX_SPI1_Init+0x64>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b14:	4b07      	ldr	r3, [pc, #28]	@ (8000b34 <MX_SPI1_Init+0x64>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b1a:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <MX_SPI1_Init+0x64>)
 8000b1c:	220a      	movs	r2, #10
 8000b1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b20:	4804      	ldr	r0, [pc, #16]	@ (8000b34 <MX_SPI1_Init+0x64>)
 8000b22:	f001 fabb 	bl	800209c <HAL_SPI_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b2c:	f000 f8f4 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000080 	.word	0x20000080
 8000b38:	40013000 	.word	0x40013000

08000b3c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08e      	sub	sp, #56	@ 0x38
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b50:	f107 0320 	add.w	r3, r7, #32
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
 8000b68:	615a      	str	r2, [r3, #20]
 8000b6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b6c:	4b2d      	ldr	r3, [pc, #180]	@ (8000c24 <MX_TIM3_Init+0xe8>)
 8000b6e:	4a2e      	ldr	r2, [pc, #184]	@ (8000c28 <MX_TIM3_Init+0xec>)
 8000b70:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6250-1;
 8000b72:	4b2c      	ldr	r3, [pc, #176]	@ (8000c24 <MX_TIM3_Init+0xe8>)
 8000b74:	f641 0269 	movw	r2, #6249	@ 0x1869
 8000b78:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7a:	4b2a      	ldr	r3, [pc, #168]	@ (8000c24 <MX_TIM3_Init+0xe8>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5120-1;
 8000b80:	4b28      	ldr	r3, [pc, #160]	@ (8000c24 <MX_TIM3_Init+0xe8>)
 8000b82:	f241 32ff 	movw	r2, #5119	@ 0x13ff
 8000b86:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b88:	4b26      	ldr	r3, [pc, #152]	@ (8000c24 <MX_TIM3_Init+0xe8>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b8e:	4b25      	ldr	r3, [pc, #148]	@ (8000c24 <MX_TIM3_Init+0xe8>)
 8000b90:	2280      	movs	r2, #128	@ 0x80
 8000b92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b94:	4823      	ldr	r0, [pc, #140]	@ (8000c24 <MX_TIM3_Init+0xe8>)
 8000b96:	f002 f90d 	bl	8002db4 <HAL_TIM_Base_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000ba0:	f000 f8ba 	bl	8000d18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ba4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000baa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bae:	4619      	mov	r1, r3
 8000bb0:	481c      	ldr	r0, [pc, #112]	@ (8000c24 <MX_TIM3_Init+0xe8>)
 8000bb2:	f002 fa69 	bl	8003088 <HAL_TIM_ConfigClockSource>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000bbc:	f000 f8ac 	bl	8000d18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000bc0:	4818      	ldr	r0, [pc, #96]	@ (8000c24 <MX_TIM3_Init+0xe8>)
 8000bc2:	f002 f946 	bl	8002e52 <HAL_TIM_PWM_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000bcc:	f000 f8a4 	bl	8000d18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bd8:	f107 0320 	add.w	r3, r7, #32
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4811      	ldr	r0, [pc, #68]	@ (8000c24 <MX_TIM3_Init+0xe8>)
 8000be0:	f002 fd9a 	bl	8003718 <HAL_TIMEx_MasterConfigSynchronization>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000bea:	f000 f895 	bl	8000d18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bee:	2360      	movs	r3, #96	@ 0x60
 8000bf0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	2208      	movs	r2, #8
 8000c02:	4619      	mov	r1, r3
 8000c04:	4807      	ldr	r0, [pc, #28]	@ (8000c24 <MX_TIM3_Init+0xe8>)
 8000c06:	f002 f97d 	bl	8002f04 <HAL_TIM_PWM_ConfigChannel>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000c10:	f000 f882 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c14:	4803      	ldr	r0, [pc, #12]	@ (8000c24 <MX_TIM3_Init+0xe8>)
 8000c16:	f000 f927 	bl	8000e68 <HAL_TIM_MspPostInit>

}
 8000c1a:	bf00      	nop
 8000c1c:	3738      	adds	r7, #56	@ 0x38
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	200000d8 	.word	0x200000d8
 8000c28:	40000400 	.word	0x40000400

08000c2c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c30:	4b11      	ldr	r3, [pc, #68]	@ (8000c78 <MX_USART1_UART_Init+0x4c>)
 8000c32:	4a12      	ldr	r2, [pc, #72]	@ (8000c7c <MX_USART1_UART_Init+0x50>)
 8000c34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c36:	4b10      	ldr	r3, [pc, #64]	@ (8000c78 <MX_USART1_UART_Init+0x4c>)
 8000c38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c78 <MX_USART1_UART_Init+0x4c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c44:	4b0c      	ldr	r3, [pc, #48]	@ (8000c78 <MX_USART1_UART_Init+0x4c>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c78 <MX_USART1_UART_Init+0x4c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8000c50:	4b09      	ldr	r3, [pc, #36]	@ (8000c78 <MX_USART1_UART_Init+0x4c>)
 8000c52:	2208      	movs	r2, #8
 8000c54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c56:	4b08      	ldr	r3, [pc, #32]	@ (8000c78 <MX_USART1_UART_Init+0x4c>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c5c:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <MX_USART1_UART_Init+0x4c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c62:	4805      	ldr	r0, [pc, #20]	@ (8000c78 <MX_USART1_UART_Init+0x4c>)
 8000c64:	f002 fdb6 	bl	80037d4 <HAL_UART_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c6e:	f000 f853 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000120 	.word	0x20000120
 8000c7c:	40013800 	.word	0x40013800

08000c80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c86:	f107 0308 	add.w	r3, r7, #8
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
 8000c92:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c94:	4b1d      	ldr	r3, [pc, #116]	@ (8000d0c <MX_GPIO_Init+0x8c>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	4a1c      	ldr	r2, [pc, #112]	@ (8000d0c <MX_GPIO_Init+0x8c>)
 8000c9a:	f043 0304 	orr.w	r3, r3, #4
 8000c9e:	6193      	str	r3, [r2, #24]
 8000ca0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d0c <MX_GPIO_Init+0x8c>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	f003 0304 	and.w	r3, r3, #4
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cac:	4b17      	ldr	r3, [pc, #92]	@ (8000d0c <MX_GPIO_Init+0x8c>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	4a16      	ldr	r2, [pc, #88]	@ (8000d0c <MX_GPIO_Init+0x8c>)
 8000cb2:	f043 0308 	orr.w	r3, r3, #8
 8000cb6:	6193      	str	r3, [r2, #24]
 8000cb8:	4b14      	ldr	r3, [pc, #80]	@ (8000d0c <MX_GPIO_Init+0x8c>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	f003 0308 	and.w	r3, r3, #8
 8000cc0:	603b      	str	r3, [r7, #0]
 8000cc2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSN_Pin|CE_Pin, GPIO_PIN_RESET);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2118      	movs	r1, #24
 8000cc8:	4811      	ldr	r0, [pc, #68]	@ (8000d10 <MX_GPIO_Init+0x90>)
 8000cca:	f000 fdbf 	bl	800184c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cd2:	4b10      	ldr	r3, [pc, #64]	@ (8000d14 <MX_GPIO_Init+0x94>)
 8000cd4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cda:	f107 0308 	add.w	r3, r7, #8
 8000cde:	4619      	mov	r1, r3
 8000ce0:	480b      	ldr	r0, [pc, #44]	@ (8000d10 <MX_GPIO_Init+0x90>)
 8000ce2:	f000 fc2f 	bl	8001544 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSN_Pin CE_Pin */
  GPIO_InitStruct.Pin = CSN_Pin|CE_Pin;
 8000ce6:	2318      	movs	r3, #24
 8000ce8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cea:	2301      	movs	r3, #1
 8000cec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf6:	f107 0308 	add.w	r3, r7, #8
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4804      	ldr	r0, [pc, #16]	@ (8000d10 <MX_GPIO_Init+0x90>)
 8000cfe:	f000 fc21 	bl	8001544 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d02:	bf00      	nop
 8000d04:	3718      	adds	r7, #24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	40010800 	.word	0x40010800
 8000d14:	10210000 	.word	0x10210000

08000d18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d1c:	b672      	cpsid	i
}
 8000d1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d20:	bf00      	nop
 8000d22:	e7fd      	b.n	8000d20 <Error_Handler+0x8>

08000d24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d2a:	4b15      	ldr	r3, [pc, #84]	@ (8000d80 <HAL_MspInit+0x5c>)
 8000d2c:	699b      	ldr	r3, [r3, #24]
 8000d2e:	4a14      	ldr	r2, [pc, #80]	@ (8000d80 <HAL_MspInit+0x5c>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	6193      	str	r3, [r2, #24]
 8000d36:	4b12      	ldr	r3, [pc, #72]	@ (8000d80 <HAL_MspInit+0x5c>)
 8000d38:	699b      	ldr	r3, [r3, #24]
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	60bb      	str	r3, [r7, #8]
 8000d40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d42:	4b0f      	ldr	r3, [pc, #60]	@ (8000d80 <HAL_MspInit+0x5c>)
 8000d44:	69db      	ldr	r3, [r3, #28]
 8000d46:	4a0e      	ldr	r2, [pc, #56]	@ (8000d80 <HAL_MspInit+0x5c>)
 8000d48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d4c:	61d3      	str	r3, [r2, #28]
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d80 <HAL_MspInit+0x5c>)
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d84 <HAL_MspInit+0x60>)
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	4a04      	ldr	r2, [pc, #16]	@ (8000d84 <HAL_MspInit+0x60>)
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d76:	bf00      	nop
 8000d78:	3714      	adds	r7, #20
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr
 8000d80:	40021000 	.word	0x40021000
 8000d84:	40010000 	.word	0x40010000

08000d88 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b088      	sub	sp, #32
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 0310 	add.w	r3, r7, #16
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a1f      	ldr	r2, [pc, #124]	@ (8000e20 <HAL_SPI_MspInit+0x98>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d137      	bne.n	8000e18 <HAL_SPI_MspInit+0x90>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000da8:	4b1e      	ldr	r3, [pc, #120]	@ (8000e24 <HAL_SPI_MspInit+0x9c>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	4a1d      	ldr	r2, [pc, #116]	@ (8000e24 <HAL_SPI_MspInit+0x9c>)
 8000dae:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000db2:	6193      	str	r3, [r2, #24]
 8000db4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e24 <HAL_SPI_MspInit+0x9c>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc0:	4b18      	ldr	r3, [pc, #96]	@ (8000e24 <HAL_SPI_MspInit+0x9c>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	4a17      	ldr	r2, [pc, #92]	@ (8000e24 <HAL_SPI_MspInit+0x9c>)
 8000dc6:	f043 0304 	orr.w	r3, r3, #4
 8000dca:	6193      	str	r3, [r2, #24]
 8000dcc:	4b15      	ldr	r3, [pc, #84]	@ (8000e24 <HAL_SPI_MspInit+0x9c>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	f003 0304 	and.w	r3, r3, #4
 8000dd4:	60bb      	str	r3, [r7, #8]
 8000dd6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000dd8:	23a0      	movs	r3, #160	@ 0xa0
 8000dda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000de0:	2303      	movs	r3, #3
 8000de2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de4:	f107 0310 	add.w	r3, r7, #16
 8000de8:	4619      	mov	r1, r3
 8000dea:	480f      	ldr	r0, [pc, #60]	@ (8000e28 <HAL_SPI_MspInit+0xa0>)
 8000dec:	f000 fbaa 	bl	8001544 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000df0:	2340      	movs	r3, #64	@ 0x40
 8000df2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfc:	f107 0310 	add.w	r3, r7, #16
 8000e00:	4619      	mov	r1, r3
 8000e02:	4809      	ldr	r0, [pc, #36]	@ (8000e28 <HAL_SPI_MspInit+0xa0>)
 8000e04:	f000 fb9e 	bl	8001544 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	2023      	movs	r0, #35	@ 0x23
 8000e0e:	f000 fab0 	bl	8001372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000e12:	2023      	movs	r0, #35	@ 0x23
 8000e14:	f000 fac9 	bl	80013aa <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000e18:	bf00      	nop
 8000e1a:	3720      	adds	r7, #32
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40013000 	.word	0x40013000
 8000e24:	40021000 	.word	0x40021000
 8000e28:	40010800 	.word	0x40010800

08000e2c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a09      	ldr	r2, [pc, #36]	@ (8000e60 <HAL_TIM_Base_MspInit+0x34>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d10b      	bne.n	8000e56 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e3e:	4b09      	ldr	r3, [pc, #36]	@ (8000e64 <HAL_TIM_Base_MspInit+0x38>)
 8000e40:	69db      	ldr	r3, [r3, #28]
 8000e42:	4a08      	ldr	r2, [pc, #32]	@ (8000e64 <HAL_TIM_Base_MspInit+0x38>)
 8000e44:	f043 0302 	orr.w	r3, r3, #2
 8000e48:	61d3      	str	r3, [r2, #28]
 8000e4a:	4b06      	ldr	r3, [pc, #24]	@ (8000e64 <HAL_TIM_Base_MspInit+0x38>)
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	f003 0302 	and.w	r3, r3, #2
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000e56:	bf00      	nop
 8000e58:	3714      	adds	r7, #20
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc80      	pop	{r7}
 8000e5e:	4770      	bx	lr
 8000e60:	40000400 	.word	0x40000400
 8000e64:	40021000 	.word	0x40021000

08000e68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b088      	sub	sp, #32
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 0310 	add.w	r3, r7, #16
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a0f      	ldr	r2, [pc, #60]	@ (8000ec0 <HAL_TIM_MspPostInit+0x58>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d117      	bne.n	8000eb8 <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e88:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec4 <HAL_TIM_MspPostInit+0x5c>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec4 <HAL_TIM_MspPostInit+0x5c>)
 8000e8e:	f043 0308 	orr.w	r3, r3, #8
 8000e92:	6193      	str	r3, [r2, #24]
 8000e94:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec4 <HAL_TIM_MspPostInit+0x5c>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	f003 0308 	and.w	r3, r3, #8
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eac:	f107 0310 	add.w	r3, r7, #16
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4805      	ldr	r0, [pc, #20]	@ (8000ec8 <HAL_TIM_MspPostInit+0x60>)
 8000eb4:	f000 fb46 	bl	8001544 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000eb8:	bf00      	nop
 8000eba:	3720      	adds	r7, #32
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40000400 	.word	0x40000400
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	40010c00 	.word	0x40010c00

08000ecc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b088      	sub	sp, #32
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 0310 	add.w	r3, r7, #16
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a20      	ldr	r2, [pc, #128]	@ (8000f68 <HAL_UART_MspInit+0x9c>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d139      	bne.n	8000f60 <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000eec:	4b1f      	ldr	r3, [pc, #124]	@ (8000f6c <HAL_UART_MspInit+0xa0>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	4a1e      	ldr	r2, [pc, #120]	@ (8000f6c <HAL_UART_MspInit+0xa0>)
 8000ef2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ef6:	6193      	str	r3, [r2, #24]
 8000ef8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f6c <HAL_UART_MspInit+0xa0>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f04:	4b19      	ldr	r3, [pc, #100]	@ (8000f6c <HAL_UART_MspInit+0xa0>)
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	4a18      	ldr	r2, [pc, #96]	@ (8000f6c <HAL_UART_MspInit+0xa0>)
 8000f0a:	f043 0304 	orr.w	r3, r3, #4
 8000f0e:	6193      	str	r3, [r2, #24]
 8000f10:	4b16      	ldr	r3, [pc, #88]	@ (8000f6c <HAL_UART_MspInit+0xa0>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	f003 0304 	and.w	r3, r3, #4
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f22:	2302      	movs	r3, #2
 8000f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f26:	2303      	movs	r3, #3
 8000f28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2a:	f107 0310 	add.w	r3, r7, #16
 8000f2e:	4619      	mov	r1, r3
 8000f30:	480f      	ldr	r0, [pc, #60]	@ (8000f70 <HAL_UART_MspInit+0xa4>)
 8000f32:	f000 fb07 	bl	8001544 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f44:	f107 0310 	add.w	r3, r7, #16
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4809      	ldr	r0, [pc, #36]	@ (8000f70 <HAL_UART_MspInit+0xa4>)
 8000f4c:	f000 fafa 	bl	8001544 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2100      	movs	r1, #0
 8000f54:	2025      	movs	r0, #37	@ 0x25
 8000f56:	f000 fa0c 	bl	8001372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f5a:	2025      	movs	r0, #37	@ 0x25
 8000f5c:	f000 fa25 	bl	80013aa <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000f60:	bf00      	nop
 8000f62:	3720      	adds	r7, #32
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40013800 	.word	0x40013800
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	40010800 	.word	0x40010800

08000f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <NMI_Handler+0x4>

08000f7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <HardFault_Handler+0x4>

08000f84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <MemManage_Handler+0x4>

08000f8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f90:	bf00      	nop
 8000f92:	e7fd      	b.n	8000f90 <BusFault_Handler+0x4>

08000f94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <UsageFault_Handler+0x4>

08000f9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr

08000fa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr

08000fb4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr

08000fc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc4:	f000 f8be 	bl	8001144 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000fd0:	4802      	ldr	r0, [pc, #8]	@ (8000fdc <SPI1_IRQHandler+0x10>)
 8000fd2:	f001 fcf3 	bl	80029bc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000080 	.word	0x20000080

08000fe0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fe4:	4802      	ldr	r0, [pc, #8]	@ (8000ff0 <USART1_IRQHandler+0x10>)
 8000fe6:	f002 fcc9 	bl	800397c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000120 	.word	0x20000120

08000ff4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ffc:	4a14      	ldr	r2, [pc, #80]	@ (8001050 <_sbrk+0x5c>)
 8000ffe:	4b15      	ldr	r3, [pc, #84]	@ (8001054 <_sbrk+0x60>)
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001008:	4b13      	ldr	r3, [pc, #76]	@ (8001058 <_sbrk+0x64>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d102      	bne.n	8001016 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001010:	4b11      	ldr	r3, [pc, #68]	@ (8001058 <_sbrk+0x64>)
 8001012:	4a12      	ldr	r2, [pc, #72]	@ (800105c <_sbrk+0x68>)
 8001014:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001016:	4b10      	ldr	r3, [pc, #64]	@ (8001058 <_sbrk+0x64>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4413      	add	r3, r2
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	429a      	cmp	r2, r3
 8001022:	d207      	bcs.n	8001034 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001024:	f003 fa38 	bl	8004498 <__errno>
 8001028:	4603      	mov	r3, r0
 800102a:	220c      	movs	r2, #12
 800102c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800102e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001032:	e009      	b.n	8001048 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001034:	4b08      	ldr	r3, [pc, #32]	@ (8001058 <_sbrk+0x64>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800103a:	4b07      	ldr	r3, [pc, #28]	@ (8001058 <_sbrk+0x64>)
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4413      	add	r3, r2
 8001042:	4a05      	ldr	r2, [pc, #20]	@ (8001058 <_sbrk+0x64>)
 8001044:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001046:	68fb      	ldr	r3, [r7, #12]
}
 8001048:	4618      	mov	r0, r3
 800104a:	3718      	adds	r7, #24
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20005000 	.word	0x20005000
 8001054:	00000400 	.word	0x00000400
 8001058:	2000016c 	.word	0x2000016c
 800105c:	200002c0 	.word	0x200002c0

08001060 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr

0800106c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800106c:	f7ff fff8 	bl	8001060 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001070:	480b      	ldr	r0, [pc, #44]	@ (80010a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001072:	490c      	ldr	r1, [pc, #48]	@ (80010a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001074:	4a0c      	ldr	r2, [pc, #48]	@ (80010a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001078:	e002      	b.n	8001080 <LoopCopyDataInit>

0800107a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800107c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800107e:	3304      	adds	r3, #4

08001080 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001080:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001082:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001084:	d3f9      	bcc.n	800107a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001086:	4a09      	ldr	r2, [pc, #36]	@ (80010ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001088:	4c09      	ldr	r4, [pc, #36]	@ (80010b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800108c:	e001      	b.n	8001092 <LoopFillZerobss>

0800108e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800108e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001090:	3204      	adds	r2, #4

08001092 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001092:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001094:	d3fb      	bcc.n	800108e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001096:	f003 fa05 	bl	80044a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800109a:	f7ff fc5b 	bl	8000954 <main>
  bx lr
 800109e:	4770      	bx	lr
  ldr r0, =_sdata
 80010a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80010a8:	08004e78 	.word	0x08004e78
  ldr r2, =_sbss
 80010ac:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80010b0:	200002bc 	.word	0x200002bc

080010b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010b4:	e7fe      	b.n	80010b4 <ADC1_2_IRQHandler>
	...

080010b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010bc:	4b08      	ldr	r3, [pc, #32]	@ (80010e0 <HAL_Init+0x28>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a07      	ldr	r2, [pc, #28]	@ (80010e0 <HAL_Init+0x28>)
 80010c2:	f043 0310 	orr.w	r3, r3, #16
 80010c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c8:	2003      	movs	r0, #3
 80010ca:	f000 f947 	bl	800135c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ce:	200f      	movs	r0, #15
 80010d0:	f000 f808 	bl	80010e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010d4:	f7ff fe26 	bl	8000d24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40022000 	.word	0x40022000

080010e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010ec:	4b12      	ldr	r3, [pc, #72]	@ (8001138 <HAL_InitTick+0x54>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4b12      	ldr	r3, [pc, #72]	@ (800113c <HAL_InitTick+0x58>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	4619      	mov	r1, r3
 80010f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80010fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001102:	4618      	mov	r0, r3
 8001104:	f000 f95f 	bl	80013c6 <HAL_SYSTICK_Config>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e00e      	b.n	8001130 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2b0f      	cmp	r3, #15
 8001116:	d80a      	bhi.n	800112e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001118:	2200      	movs	r2, #0
 800111a:	6879      	ldr	r1, [r7, #4]
 800111c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001120:	f000 f927 	bl	8001372 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001124:	4a06      	ldr	r2, [pc, #24]	@ (8001140 <HAL_InitTick+0x5c>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800112a:	2300      	movs	r3, #0
 800112c:	e000      	b.n	8001130 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
}
 8001130:	4618      	mov	r0, r3
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000008 	.word	0x20000008
 800113c:	20000010 	.word	0x20000010
 8001140:	2000000c 	.word	0x2000000c

08001144 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001148:	4b05      	ldr	r3, [pc, #20]	@ (8001160 <HAL_IncTick+0x1c>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	461a      	mov	r2, r3
 800114e:	4b05      	ldr	r3, [pc, #20]	@ (8001164 <HAL_IncTick+0x20>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4413      	add	r3, r2
 8001154:	4a03      	ldr	r2, [pc, #12]	@ (8001164 <HAL_IncTick+0x20>)
 8001156:	6013      	str	r3, [r2, #0]
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr
 8001160:	20000010 	.word	0x20000010
 8001164:	20000170 	.word	0x20000170

08001168 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return uwTick;
 800116c:	4b02      	ldr	r3, [pc, #8]	@ (8001178 <HAL_GetTick+0x10>)
 800116e:	681b      	ldr	r3, [r3, #0]
}
 8001170:	4618      	mov	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr
 8001178:	20000170 	.word	0x20000170

0800117c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001184:	f7ff fff0 	bl	8001168 <HAL_GetTick>
 8001188:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001194:	d005      	beq.n	80011a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001196:	4b0a      	ldr	r3, [pc, #40]	@ (80011c0 <HAL_Delay+0x44>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	461a      	mov	r2, r3
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4413      	add	r3, r2
 80011a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011a2:	bf00      	nop
 80011a4:	f7ff ffe0 	bl	8001168 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	68fa      	ldr	r2, [r7, #12]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d8f7      	bhi.n	80011a4 <HAL_Delay+0x28>
  {
  }
}
 80011b4:	bf00      	nop
 80011b6:	bf00      	nop
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000010 	.word	0x20000010

080011c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001208 <__NVIC_SetPriorityGrouping+0x44>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011da:	68ba      	ldr	r2, [r7, #8]
 80011dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011e0:	4013      	ands	r3, r2
 80011e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011f6:	4a04      	ldr	r2, [pc, #16]	@ (8001208 <__NVIC_SetPriorityGrouping+0x44>)
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	60d3      	str	r3, [r2, #12]
}
 80011fc:	bf00      	nop
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001210:	4b04      	ldr	r3, [pc, #16]	@ (8001224 <__NVIC_GetPriorityGrouping+0x18>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	0a1b      	lsrs	r3, r3, #8
 8001216:	f003 0307 	and.w	r3, r3, #7
}
 800121a:	4618      	mov	r0, r3
 800121c:	46bd      	mov	sp, r7
 800121e:	bc80      	pop	{r7}
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	2b00      	cmp	r3, #0
 8001238:	db0b      	blt.n	8001252 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	f003 021f 	and.w	r2, r3, #31
 8001240:	4906      	ldr	r1, [pc, #24]	@ (800125c <__NVIC_EnableIRQ+0x34>)
 8001242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001246:	095b      	lsrs	r3, r3, #5
 8001248:	2001      	movs	r0, #1
 800124a:	fa00 f202 	lsl.w	r2, r0, r2
 800124e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr
 800125c:	e000e100 	.word	0xe000e100

08001260 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	6039      	str	r1, [r7, #0]
 800126a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800126c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001270:	2b00      	cmp	r3, #0
 8001272:	db0a      	blt.n	800128a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	b2da      	uxtb	r2, r3
 8001278:	490c      	ldr	r1, [pc, #48]	@ (80012ac <__NVIC_SetPriority+0x4c>)
 800127a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127e:	0112      	lsls	r2, r2, #4
 8001280:	b2d2      	uxtb	r2, r2
 8001282:	440b      	add	r3, r1
 8001284:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001288:	e00a      	b.n	80012a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4908      	ldr	r1, [pc, #32]	@ (80012b0 <__NVIC_SetPriority+0x50>)
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	f003 030f 	and.w	r3, r3, #15
 8001296:	3b04      	subs	r3, #4
 8001298:	0112      	lsls	r2, r2, #4
 800129a:	b2d2      	uxtb	r2, r2
 800129c:	440b      	add	r3, r1
 800129e:	761a      	strb	r2, [r3, #24]
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bc80      	pop	{r7}
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	e000e100 	.word	0xe000e100
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b089      	sub	sp, #36	@ 0x24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	f1c3 0307 	rsb	r3, r3, #7
 80012ce:	2b04      	cmp	r3, #4
 80012d0:	bf28      	it	cs
 80012d2:	2304      	movcs	r3, #4
 80012d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	3304      	adds	r3, #4
 80012da:	2b06      	cmp	r3, #6
 80012dc:	d902      	bls.n	80012e4 <NVIC_EncodePriority+0x30>
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3b03      	subs	r3, #3
 80012e2:	e000      	b.n	80012e6 <NVIC_EncodePriority+0x32>
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43da      	mvns	r2, r3
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	401a      	ands	r2, r3
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012fc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	fa01 f303 	lsl.w	r3, r1, r3
 8001306:	43d9      	mvns	r1, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800130c:	4313      	orrs	r3, r2
         );
}
 800130e:	4618      	mov	r0, r3
 8001310:	3724      	adds	r7, #36	@ 0x24
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr

08001318 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3b01      	subs	r3, #1
 8001324:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001328:	d301      	bcc.n	800132e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800132a:	2301      	movs	r3, #1
 800132c:	e00f      	b.n	800134e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800132e:	4a0a      	ldr	r2, [pc, #40]	@ (8001358 <SysTick_Config+0x40>)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3b01      	subs	r3, #1
 8001334:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001336:	210f      	movs	r1, #15
 8001338:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800133c:	f7ff ff90 	bl	8001260 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001340:	4b05      	ldr	r3, [pc, #20]	@ (8001358 <SysTick_Config+0x40>)
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001346:	4b04      	ldr	r3, [pc, #16]	@ (8001358 <SysTick_Config+0x40>)
 8001348:	2207      	movs	r2, #7
 800134a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	e000e010 	.word	0xe000e010

0800135c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff ff2d 	bl	80011c4 <__NVIC_SetPriorityGrouping>
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001372:	b580      	push	{r7, lr}
 8001374:	b086      	sub	sp, #24
 8001376:	af00      	add	r7, sp, #0
 8001378:	4603      	mov	r3, r0
 800137a:	60b9      	str	r1, [r7, #8]
 800137c:	607a      	str	r2, [r7, #4]
 800137e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001384:	f7ff ff42 	bl	800120c <__NVIC_GetPriorityGrouping>
 8001388:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	68b9      	ldr	r1, [r7, #8]
 800138e:	6978      	ldr	r0, [r7, #20]
 8001390:	f7ff ff90 	bl	80012b4 <NVIC_EncodePriority>
 8001394:	4602      	mov	r2, r0
 8001396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800139a:	4611      	mov	r1, r2
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff ff5f 	bl	8001260 <__NVIC_SetPriority>
}
 80013a2:	bf00      	nop
 80013a4:	3718      	adds	r7, #24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b082      	sub	sp, #8
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	4603      	mov	r3, r0
 80013b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff ff35 	bl	8001228 <__NVIC_EnableIRQ>
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b082      	sub	sp, #8
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f7ff ffa2 	bl	8001318 <SysTick_Config>
 80013d4:	4603      	mov	r3, r0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013de:	b480      	push	{r7}
 80013e0:	b085      	sub	sp, #20
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013e6:	2300      	movs	r3, #0
 80013e8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d008      	beq.n	8001408 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2204      	movs	r2, #4
 80013fa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e020      	b.n	800144a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f022 020e 	bic.w	r2, r2, #14
 8001416:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f022 0201 	bic.w	r2, r2, #1
 8001426:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001430:	2101      	movs	r1, #1
 8001432:	fa01 f202 	lsl.w	r2, r1, r2
 8001436:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2201      	movs	r2, #1
 800143c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001448:	7bfb      	ldrb	r3, [r7, #15]
}
 800144a:	4618      	mov	r0, r3
 800144c:	3714      	adds	r7, #20
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr

08001454 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800145c:	2300      	movs	r3, #0
 800145e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001466:	b2db      	uxtb	r3, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d005      	beq.n	8001478 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2204      	movs	r2, #4
 8001470:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	73fb      	strb	r3, [r7, #15]
 8001476:	e051      	b.n	800151c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f022 020e 	bic.w	r2, r2, #14
 8001486:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 0201 	bic.w	r2, r2, #1
 8001496:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a22      	ldr	r2, [pc, #136]	@ (8001528 <HAL_DMA_Abort_IT+0xd4>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d029      	beq.n	80014f6 <HAL_DMA_Abort_IT+0xa2>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a21      	ldr	r2, [pc, #132]	@ (800152c <HAL_DMA_Abort_IT+0xd8>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d022      	beq.n	80014f2 <HAL_DMA_Abort_IT+0x9e>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a1f      	ldr	r2, [pc, #124]	@ (8001530 <HAL_DMA_Abort_IT+0xdc>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d01a      	beq.n	80014ec <HAL_DMA_Abort_IT+0x98>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a1e      	ldr	r2, [pc, #120]	@ (8001534 <HAL_DMA_Abort_IT+0xe0>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d012      	beq.n	80014e6 <HAL_DMA_Abort_IT+0x92>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a1c      	ldr	r2, [pc, #112]	@ (8001538 <HAL_DMA_Abort_IT+0xe4>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d00a      	beq.n	80014e0 <HAL_DMA_Abort_IT+0x8c>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a1b      	ldr	r2, [pc, #108]	@ (800153c <HAL_DMA_Abort_IT+0xe8>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d102      	bne.n	80014da <HAL_DMA_Abort_IT+0x86>
 80014d4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80014d8:	e00e      	b.n	80014f8 <HAL_DMA_Abort_IT+0xa4>
 80014da:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80014de:	e00b      	b.n	80014f8 <HAL_DMA_Abort_IT+0xa4>
 80014e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014e4:	e008      	b.n	80014f8 <HAL_DMA_Abort_IT+0xa4>
 80014e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014ea:	e005      	b.n	80014f8 <HAL_DMA_Abort_IT+0xa4>
 80014ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014f0:	e002      	b.n	80014f8 <HAL_DMA_Abort_IT+0xa4>
 80014f2:	2310      	movs	r3, #16
 80014f4:	e000      	b.n	80014f8 <HAL_DMA_Abort_IT+0xa4>
 80014f6:	2301      	movs	r3, #1
 80014f8:	4a11      	ldr	r2, [pc, #68]	@ (8001540 <HAL_DMA_Abort_IT+0xec>)
 80014fa:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2201      	movs	r2, #1
 8001500:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001510:	2b00      	cmp	r3, #0
 8001512:	d003      	beq.n	800151c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	4798      	blx	r3
    } 
  }
  return status;
 800151c:	7bfb      	ldrb	r3, [r7, #15]
}
 800151e:	4618      	mov	r0, r3
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40020008 	.word	0x40020008
 800152c:	4002001c 	.word	0x4002001c
 8001530:	40020030 	.word	0x40020030
 8001534:	40020044 	.word	0x40020044
 8001538:	40020058 	.word	0x40020058
 800153c:	4002006c 	.word	0x4002006c
 8001540:	40020000 	.word	0x40020000

08001544 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001544:	b480      	push	{r7}
 8001546:	b08b      	sub	sp, #44	@ 0x2c
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800154e:	2300      	movs	r3, #0
 8001550:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001552:	2300      	movs	r3, #0
 8001554:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001556:	e169      	b.n	800182c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001558:	2201      	movs	r2, #1
 800155a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	69fa      	ldr	r2, [r7, #28]
 8001568:	4013      	ands	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	429a      	cmp	r2, r3
 8001572:	f040 8158 	bne.w	8001826 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	4a9a      	ldr	r2, [pc, #616]	@ (80017e4 <HAL_GPIO_Init+0x2a0>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d05e      	beq.n	800163e <HAL_GPIO_Init+0xfa>
 8001580:	4a98      	ldr	r2, [pc, #608]	@ (80017e4 <HAL_GPIO_Init+0x2a0>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d875      	bhi.n	8001672 <HAL_GPIO_Init+0x12e>
 8001586:	4a98      	ldr	r2, [pc, #608]	@ (80017e8 <HAL_GPIO_Init+0x2a4>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d058      	beq.n	800163e <HAL_GPIO_Init+0xfa>
 800158c:	4a96      	ldr	r2, [pc, #600]	@ (80017e8 <HAL_GPIO_Init+0x2a4>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d86f      	bhi.n	8001672 <HAL_GPIO_Init+0x12e>
 8001592:	4a96      	ldr	r2, [pc, #600]	@ (80017ec <HAL_GPIO_Init+0x2a8>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d052      	beq.n	800163e <HAL_GPIO_Init+0xfa>
 8001598:	4a94      	ldr	r2, [pc, #592]	@ (80017ec <HAL_GPIO_Init+0x2a8>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d869      	bhi.n	8001672 <HAL_GPIO_Init+0x12e>
 800159e:	4a94      	ldr	r2, [pc, #592]	@ (80017f0 <HAL_GPIO_Init+0x2ac>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d04c      	beq.n	800163e <HAL_GPIO_Init+0xfa>
 80015a4:	4a92      	ldr	r2, [pc, #584]	@ (80017f0 <HAL_GPIO_Init+0x2ac>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d863      	bhi.n	8001672 <HAL_GPIO_Init+0x12e>
 80015aa:	4a92      	ldr	r2, [pc, #584]	@ (80017f4 <HAL_GPIO_Init+0x2b0>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d046      	beq.n	800163e <HAL_GPIO_Init+0xfa>
 80015b0:	4a90      	ldr	r2, [pc, #576]	@ (80017f4 <HAL_GPIO_Init+0x2b0>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d85d      	bhi.n	8001672 <HAL_GPIO_Init+0x12e>
 80015b6:	2b12      	cmp	r3, #18
 80015b8:	d82a      	bhi.n	8001610 <HAL_GPIO_Init+0xcc>
 80015ba:	2b12      	cmp	r3, #18
 80015bc:	d859      	bhi.n	8001672 <HAL_GPIO_Init+0x12e>
 80015be:	a201      	add	r2, pc, #4	@ (adr r2, 80015c4 <HAL_GPIO_Init+0x80>)
 80015c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c4:	0800163f 	.word	0x0800163f
 80015c8:	08001619 	.word	0x08001619
 80015cc:	0800162b 	.word	0x0800162b
 80015d0:	0800166d 	.word	0x0800166d
 80015d4:	08001673 	.word	0x08001673
 80015d8:	08001673 	.word	0x08001673
 80015dc:	08001673 	.word	0x08001673
 80015e0:	08001673 	.word	0x08001673
 80015e4:	08001673 	.word	0x08001673
 80015e8:	08001673 	.word	0x08001673
 80015ec:	08001673 	.word	0x08001673
 80015f0:	08001673 	.word	0x08001673
 80015f4:	08001673 	.word	0x08001673
 80015f8:	08001673 	.word	0x08001673
 80015fc:	08001673 	.word	0x08001673
 8001600:	08001673 	.word	0x08001673
 8001604:	08001673 	.word	0x08001673
 8001608:	08001621 	.word	0x08001621
 800160c:	08001635 	.word	0x08001635
 8001610:	4a79      	ldr	r2, [pc, #484]	@ (80017f8 <HAL_GPIO_Init+0x2b4>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d013      	beq.n	800163e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001616:	e02c      	b.n	8001672 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	623b      	str	r3, [r7, #32]
          break;
 800161e:	e029      	b.n	8001674 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	3304      	adds	r3, #4
 8001626:	623b      	str	r3, [r7, #32]
          break;
 8001628:	e024      	b.n	8001674 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	3308      	adds	r3, #8
 8001630:	623b      	str	r3, [r7, #32]
          break;
 8001632:	e01f      	b.n	8001674 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	330c      	adds	r3, #12
 800163a:	623b      	str	r3, [r7, #32]
          break;
 800163c:	e01a      	b.n	8001674 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d102      	bne.n	800164c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001646:	2304      	movs	r3, #4
 8001648:	623b      	str	r3, [r7, #32]
          break;
 800164a:	e013      	b.n	8001674 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d105      	bne.n	8001660 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001654:	2308      	movs	r3, #8
 8001656:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	69fa      	ldr	r2, [r7, #28]
 800165c:	611a      	str	r2, [r3, #16]
          break;
 800165e:	e009      	b.n	8001674 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001660:	2308      	movs	r3, #8
 8001662:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	69fa      	ldr	r2, [r7, #28]
 8001668:	615a      	str	r2, [r3, #20]
          break;
 800166a:	e003      	b.n	8001674 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800166c:	2300      	movs	r3, #0
 800166e:	623b      	str	r3, [r7, #32]
          break;
 8001670:	e000      	b.n	8001674 <HAL_GPIO_Init+0x130>
          break;
 8001672:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	2bff      	cmp	r3, #255	@ 0xff
 8001678:	d801      	bhi.n	800167e <HAL_GPIO_Init+0x13a>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	e001      	b.n	8001682 <HAL_GPIO_Init+0x13e>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	3304      	adds	r3, #4
 8001682:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	2bff      	cmp	r3, #255	@ 0xff
 8001688:	d802      	bhi.n	8001690 <HAL_GPIO_Init+0x14c>
 800168a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	e002      	b.n	8001696 <HAL_GPIO_Init+0x152>
 8001690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001692:	3b08      	subs	r3, #8
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	210f      	movs	r1, #15
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	fa01 f303 	lsl.w	r3, r1, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	401a      	ands	r2, r3
 80016a8:	6a39      	ldr	r1, [r7, #32]
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	fa01 f303 	lsl.w	r3, r1, r3
 80016b0:	431a      	orrs	r2, r3
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f000 80b1 	beq.w	8001826 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016c4:	4b4d      	ldr	r3, [pc, #308]	@ (80017fc <HAL_GPIO_Init+0x2b8>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	4a4c      	ldr	r2, [pc, #304]	@ (80017fc <HAL_GPIO_Init+0x2b8>)
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	6193      	str	r3, [r2, #24]
 80016d0:	4b4a      	ldr	r3, [pc, #296]	@ (80017fc <HAL_GPIO_Init+0x2b8>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	60bb      	str	r3, [r7, #8]
 80016da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016dc:	4a48      	ldr	r2, [pc, #288]	@ (8001800 <HAL_GPIO_Init+0x2bc>)
 80016de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e0:	089b      	lsrs	r3, r3, #2
 80016e2:	3302      	adds	r3, #2
 80016e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ec:	f003 0303 	and.w	r3, r3, #3
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	220f      	movs	r2, #15
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	43db      	mvns	r3, r3
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	4013      	ands	r3, r2
 80016fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a40      	ldr	r2, [pc, #256]	@ (8001804 <HAL_GPIO_Init+0x2c0>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d013      	beq.n	8001730 <HAL_GPIO_Init+0x1ec>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4a3f      	ldr	r2, [pc, #252]	@ (8001808 <HAL_GPIO_Init+0x2c4>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d00d      	beq.n	800172c <HAL_GPIO_Init+0x1e8>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a3e      	ldr	r2, [pc, #248]	@ (800180c <HAL_GPIO_Init+0x2c8>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d007      	beq.n	8001728 <HAL_GPIO_Init+0x1e4>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a3d      	ldr	r2, [pc, #244]	@ (8001810 <HAL_GPIO_Init+0x2cc>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d101      	bne.n	8001724 <HAL_GPIO_Init+0x1e0>
 8001720:	2303      	movs	r3, #3
 8001722:	e006      	b.n	8001732 <HAL_GPIO_Init+0x1ee>
 8001724:	2304      	movs	r3, #4
 8001726:	e004      	b.n	8001732 <HAL_GPIO_Init+0x1ee>
 8001728:	2302      	movs	r3, #2
 800172a:	e002      	b.n	8001732 <HAL_GPIO_Init+0x1ee>
 800172c:	2301      	movs	r3, #1
 800172e:	e000      	b.n	8001732 <HAL_GPIO_Init+0x1ee>
 8001730:	2300      	movs	r3, #0
 8001732:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001734:	f002 0203 	and.w	r2, r2, #3
 8001738:	0092      	lsls	r2, r2, #2
 800173a:	4093      	lsls	r3, r2
 800173c:	68fa      	ldr	r2, [r7, #12]
 800173e:	4313      	orrs	r3, r2
 8001740:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001742:	492f      	ldr	r1, [pc, #188]	@ (8001800 <HAL_GPIO_Init+0x2bc>)
 8001744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001746:	089b      	lsrs	r3, r3, #2
 8001748:	3302      	adds	r3, #2
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d006      	beq.n	800176a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800175c:	4b2d      	ldr	r3, [pc, #180]	@ (8001814 <HAL_GPIO_Init+0x2d0>)
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	492c      	ldr	r1, [pc, #176]	@ (8001814 <HAL_GPIO_Init+0x2d0>)
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	4313      	orrs	r3, r2
 8001766:	608b      	str	r3, [r1, #8]
 8001768:	e006      	b.n	8001778 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800176a:	4b2a      	ldr	r3, [pc, #168]	@ (8001814 <HAL_GPIO_Init+0x2d0>)
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	43db      	mvns	r3, r3
 8001772:	4928      	ldr	r1, [pc, #160]	@ (8001814 <HAL_GPIO_Init+0x2d0>)
 8001774:	4013      	ands	r3, r2
 8001776:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d006      	beq.n	8001792 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001784:	4b23      	ldr	r3, [pc, #140]	@ (8001814 <HAL_GPIO_Init+0x2d0>)
 8001786:	68da      	ldr	r2, [r3, #12]
 8001788:	4922      	ldr	r1, [pc, #136]	@ (8001814 <HAL_GPIO_Init+0x2d0>)
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	4313      	orrs	r3, r2
 800178e:	60cb      	str	r3, [r1, #12]
 8001790:	e006      	b.n	80017a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001792:	4b20      	ldr	r3, [pc, #128]	@ (8001814 <HAL_GPIO_Init+0x2d0>)
 8001794:	68da      	ldr	r2, [r3, #12]
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	43db      	mvns	r3, r3
 800179a:	491e      	ldr	r1, [pc, #120]	@ (8001814 <HAL_GPIO_Init+0x2d0>)
 800179c:	4013      	ands	r3, r2
 800179e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d006      	beq.n	80017ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017ac:	4b19      	ldr	r3, [pc, #100]	@ (8001814 <HAL_GPIO_Init+0x2d0>)
 80017ae:	685a      	ldr	r2, [r3, #4]
 80017b0:	4918      	ldr	r1, [pc, #96]	@ (8001814 <HAL_GPIO_Init+0x2d0>)
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	604b      	str	r3, [r1, #4]
 80017b8:	e006      	b.n	80017c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017ba:	4b16      	ldr	r3, [pc, #88]	@ (8001814 <HAL_GPIO_Init+0x2d0>)
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	43db      	mvns	r3, r3
 80017c2:	4914      	ldr	r1, [pc, #80]	@ (8001814 <HAL_GPIO_Init+0x2d0>)
 80017c4:	4013      	ands	r3, r2
 80017c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d021      	beq.n	8001818 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001814 <HAL_GPIO_Init+0x2d0>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	490e      	ldr	r1, [pc, #56]	@ (8001814 <HAL_GPIO_Init+0x2d0>)
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	4313      	orrs	r3, r2
 80017de:	600b      	str	r3, [r1, #0]
 80017e0:	e021      	b.n	8001826 <HAL_GPIO_Init+0x2e2>
 80017e2:	bf00      	nop
 80017e4:	10320000 	.word	0x10320000
 80017e8:	10310000 	.word	0x10310000
 80017ec:	10220000 	.word	0x10220000
 80017f0:	10210000 	.word	0x10210000
 80017f4:	10120000 	.word	0x10120000
 80017f8:	10110000 	.word	0x10110000
 80017fc:	40021000 	.word	0x40021000
 8001800:	40010000 	.word	0x40010000
 8001804:	40010800 	.word	0x40010800
 8001808:	40010c00 	.word	0x40010c00
 800180c:	40011000 	.word	0x40011000
 8001810:	40011400 	.word	0x40011400
 8001814:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001818:	4b0b      	ldr	r3, [pc, #44]	@ (8001848 <HAL_GPIO_Init+0x304>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	43db      	mvns	r3, r3
 8001820:	4909      	ldr	r1, [pc, #36]	@ (8001848 <HAL_GPIO_Init+0x304>)
 8001822:	4013      	ands	r3, r2
 8001824:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001828:	3301      	adds	r3, #1
 800182a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001832:	fa22 f303 	lsr.w	r3, r2, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	f47f ae8e 	bne.w	8001558 <HAL_GPIO_Init+0x14>
  }
}
 800183c:	bf00      	nop
 800183e:	bf00      	nop
 8001840:	372c      	adds	r7, #44	@ 0x2c
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr
 8001848:	40010400 	.word	0x40010400

0800184c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	460b      	mov	r3, r1
 8001856:	807b      	strh	r3, [r7, #2]
 8001858:	4613      	mov	r3, r2
 800185a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800185c:	787b      	ldrb	r3, [r7, #1]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d003      	beq.n	800186a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001862:	887a      	ldrh	r2, [r7, #2]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001868:	e003      	b.n	8001872 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800186a:	887b      	ldrh	r3, [r7, #2]
 800186c:	041a      	lsls	r2, r3, #16
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	611a      	str	r2, [r3, #16]
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr

0800187c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e272      	b.n	8001d74 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	2b00      	cmp	r3, #0
 8001898:	f000 8087 	beq.w	80019aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800189c:	4b92      	ldr	r3, [pc, #584]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f003 030c 	and.w	r3, r3, #12
 80018a4:	2b04      	cmp	r3, #4
 80018a6:	d00c      	beq.n	80018c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018a8:	4b8f      	ldr	r3, [pc, #572]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f003 030c 	and.w	r3, r3, #12
 80018b0:	2b08      	cmp	r3, #8
 80018b2:	d112      	bne.n	80018da <HAL_RCC_OscConfig+0x5e>
 80018b4:	4b8c      	ldr	r3, [pc, #560]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018c0:	d10b      	bne.n	80018da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c2:	4b89      	ldr	r3, [pc, #548]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d06c      	beq.n	80019a8 <HAL_RCC_OscConfig+0x12c>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d168      	bne.n	80019a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e24c      	b.n	8001d74 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018e2:	d106      	bne.n	80018f2 <HAL_RCC_OscConfig+0x76>
 80018e4:	4b80      	ldr	r3, [pc, #512]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a7f      	ldr	r2, [pc, #508]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 80018ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018ee:	6013      	str	r3, [r2, #0]
 80018f0:	e02e      	b.n	8001950 <HAL_RCC_OscConfig+0xd4>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d10c      	bne.n	8001914 <HAL_RCC_OscConfig+0x98>
 80018fa:	4b7b      	ldr	r3, [pc, #492]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a7a      	ldr	r2, [pc, #488]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 8001900:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001904:	6013      	str	r3, [r2, #0]
 8001906:	4b78      	ldr	r3, [pc, #480]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a77      	ldr	r2, [pc, #476]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 800190c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	e01d      	b.n	8001950 <HAL_RCC_OscConfig+0xd4>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800191c:	d10c      	bne.n	8001938 <HAL_RCC_OscConfig+0xbc>
 800191e:	4b72      	ldr	r3, [pc, #456]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a71      	ldr	r2, [pc, #452]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 8001924:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	4b6f      	ldr	r3, [pc, #444]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a6e      	ldr	r2, [pc, #440]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 8001930:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	e00b      	b.n	8001950 <HAL_RCC_OscConfig+0xd4>
 8001938:	4b6b      	ldr	r3, [pc, #428]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a6a      	ldr	r2, [pc, #424]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 800193e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001942:	6013      	str	r3, [r2, #0]
 8001944:	4b68      	ldr	r3, [pc, #416]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a67      	ldr	r2, [pc, #412]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 800194a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800194e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d013      	beq.n	8001980 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001958:	f7ff fc06 	bl	8001168 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001960:	f7ff fc02 	bl	8001168 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b64      	cmp	r3, #100	@ 0x64
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e200      	b.n	8001d74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001972:	4b5d      	ldr	r3, [pc, #372]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0f0      	beq.n	8001960 <HAL_RCC_OscConfig+0xe4>
 800197e:	e014      	b.n	80019aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001980:	f7ff fbf2 	bl	8001168 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001988:	f7ff fbee 	bl	8001168 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b64      	cmp	r3, #100	@ 0x64
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e1ec      	b.n	8001d74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800199a:	4b53      	ldr	r3, [pc, #332]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1f0      	bne.n	8001988 <HAL_RCC_OscConfig+0x10c>
 80019a6:	e000      	b.n	80019aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d063      	beq.n	8001a7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019b6:	4b4c      	ldr	r3, [pc, #304]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f003 030c 	and.w	r3, r3, #12
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d00b      	beq.n	80019da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019c2:	4b49      	ldr	r3, [pc, #292]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f003 030c 	and.w	r3, r3, #12
 80019ca:	2b08      	cmp	r3, #8
 80019cc:	d11c      	bne.n	8001a08 <HAL_RCC_OscConfig+0x18c>
 80019ce:	4b46      	ldr	r3, [pc, #280]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d116      	bne.n	8001a08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019da:	4b43      	ldr	r3, [pc, #268]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d005      	beq.n	80019f2 <HAL_RCC_OscConfig+0x176>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	691b      	ldr	r3, [r3, #16]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d001      	beq.n	80019f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e1c0      	b.n	8001d74 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	4939      	ldr	r1, [pc, #228]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 8001a02:	4313      	orrs	r3, r2
 8001a04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a06:	e03a      	b.n	8001a7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	691b      	ldr	r3, [r3, #16]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d020      	beq.n	8001a52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a10:	4b36      	ldr	r3, [pc, #216]	@ (8001aec <HAL_RCC_OscConfig+0x270>)
 8001a12:	2201      	movs	r2, #1
 8001a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a16:	f7ff fba7 	bl	8001168 <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a1c:	e008      	b.n	8001a30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a1e:	f7ff fba3 	bl	8001168 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e1a1      	b.n	8001d74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a30:	4b2d      	ldr	r3, [pc, #180]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d0f0      	beq.n	8001a1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a3c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	4927      	ldr	r1, [pc, #156]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	600b      	str	r3, [r1, #0]
 8001a50:	e015      	b.n	8001a7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a52:	4b26      	ldr	r3, [pc, #152]	@ (8001aec <HAL_RCC_OscConfig+0x270>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a58:	f7ff fb86 	bl	8001168 <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a60:	f7ff fb82 	bl	8001168 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e180      	b.n	8001d74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a72:	4b1d      	ldr	r3, [pc, #116]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1f0      	bne.n	8001a60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0308 	and.w	r3, r3, #8
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d03a      	beq.n	8001b00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d019      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a92:	4b17      	ldr	r3, [pc, #92]	@ (8001af0 <HAL_RCC_OscConfig+0x274>)
 8001a94:	2201      	movs	r2, #1
 8001a96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a98:	f7ff fb66 	bl	8001168 <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aa0:	f7ff fb62 	bl	8001168 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e160      	b.n	8001d74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae8 <HAL_RCC_OscConfig+0x26c>)
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d0f0      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001abe:	2001      	movs	r0, #1
 8001ac0:	f000 face 	bl	8002060 <RCC_Delay>
 8001ac4:	e01c      	b.n	8001b00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8001af0 <HAL_RCC_OscConfig+0x274>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001acc:	f7ff fb4c 	bl	8001168 <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad2:	e00f      	b.n	8001af4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ad4:	f7ff fb48 	bl	8001168 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d908      	bls.n	8001af4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e146      	b.n	8001d74 <HAL_RCC_OscConfig+0x4f8>
 8001ae6:	bf00      	nop
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	42420000 	.word	0x42420000
 8001af0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001af4:	4b92      	ldr	r3, [pc, #584]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1e9      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0304 	and.w	r3, r3, #4
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f000 80a6 	beq.w	8001c5a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b12:	4b8b      	ldr	r3, [pc, #556]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d10d      	bne.n	8001b3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b1e:	4b88      	ldr	r3, [pc, #544]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	4a87      	ldr	r2, [pc, #540]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001b24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b28:	61d3      	str	r3, [r2, #28]
 8001b2a:	4b85      	ldr	r3, [pc, #532]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b32:	60bb      	str	r3, [r7, #8]
 8001b34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b36:	2301      	movs	r3, #1
 8001b38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b3a:	4b82      	ldr	r3, [pc, #520]	@ (8001d44 <HAL_RCC_OscConfig+0x4c8>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d118      	bne.n	8001b78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b46:	4b7f      	ldr	r3, [pc, #508]	@ (8001d44 <HAL_RCC_OscConfig+0x4c8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a7e      	ldr	r2, [pc, #504]	@ (8001d44 <HAL_RCC_OscConfig+0x4c8>)
 8001b4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b52:	f7ff fb09 	bl	8001168 <HAL_GetTick>
 8001b56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b58:	e008      	b.n	8001b6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b5a:	f7ff fb05 	bl	8001168 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b64      	cmp	r3, #100	@ 0x64
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e103      	b.n	8001d74 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b6c:	4b75      	ldr	r3, [pc, #468]	@ (8001d44 <HAL_RCC_OscConfig+0x4c8>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d0f0      	beq.n	8001b5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d106      	bne.n	8001b8e <HAL_RCC_OscConfig+0x312>
 8001b80:	4b6f      	ldr	r3, [pc, #444]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	4a6e      	ldr	r2, [pc, #440]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	6213      	str	r3, [r2, #32]
 8001b8c:	e02d      	b.n	8001bea <HAL_RCC_OscConfig+0x36e>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d10c      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x334>
 8001b96:	4b6a      	ldr	r3, [pc, #424]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001b98:	6a1b      	ldr	r3, [r3, #32]
 8001b9a:	4a69      	ldr	r2, [pc, #420]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001b9c:	f023 0301 	bic.w	r3, r3, #1
 8001ba0:	6213      	str	r3, [r2, #32]
 8001ba2:	4b67      	ldr	r3, [pc, #412]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001ba4:	6a1b      	ldr	r3, [r3, #32]
 8001ba6:	4a66      	ldr	r2, [pc, #408]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001ba8:	f023 0304 	bic.w	r3, r3, #4
 8001bac:	6213      	str	r3, [r2, #32]
 8001bae:	e01c      	b.n	8001bea <HAL_RCC_OscConfig+0x36e>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	2b05      	cmp	r3, #5
 8001bb6:	d10c      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x356>
 8001bb8:	4b61      	ldr	r3, [pc, #388]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	4a60      	ldr	r2, [pc, #384]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001bbe:	f043 0304 	orr.w	r3, r3, #4
 8001bc2:	6213      	str	r3, [r2, #32]
 8001bc4:	4b5e      	ldr	r3, [pc, #376]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001bc6:	6a1b      	ldr	r3, [r3, #32]
 8001bc8:	4a5d      	ldr	r2, [pc, #372]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001bca:	f043 0301 	orr.w	r3, r3, #1
 8001bce:	6213      	str	r3, [r2, #32]
 8001bd0:	e00b      	b.n	8001bea <HAL_RCC_OscConfig+0x36e>
 8001bd2:	4b5b      	ldr	r3, [pc, #364]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001bd4:	6a1b      	ldr	r3, [r3, #32]
 8001bd6:	4a5a      	ldr	r2, [pc, #360]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001bd8:	f023 0301 	bic.w	r3, r3, #1
 8001bdc:	6213      	str	r3, [r2, #32]
 8001bde:	4b58      	ldr	r3, [pc, #352]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001be0:	6a1b      	ldr	r3, [r3, #32]
 8001be2:	4a57      	ldr	r2, [pc, #348]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001be4:	f023 0304 	bic.w	r3, r3, #4
 8001be8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d015      	beq.n	8001c1e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf2:	f7ff fab9 	bl	8001168 <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bf8:	e00a      	b.n	8001c10 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bfa:	f7ff fab5 	bl	8001168 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e0b1      	b.n	8001d74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c10:	4b4b      	ldr	r3, [pc, #300]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0ee      	beq.n	8001bfa <HAL_RCC_OscConfig+0x37e>
 8001c1c:	e014      	b.n	8001c48 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c1e:	f7ff faa3 	bl	8001168 <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c24:	e00a      	b.n	8001c3c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c26:	f7ff fa9f 	bl	8001168 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e09b      	b.n	8001d74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c3c:	4b40      	ldr	r3, [pc, #256]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1ee      	bne.n	8001c26 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c48:	7dfb      	ldrb	r3, [r7, #23]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d105      	bne.n	8001c5a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c4e:	4b3c      	ldr	r3, [pc, #240]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	4a3b      	ldr	r2, [pc, #236]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001c54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c58:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f000 8087 	beq.w	8001d72 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c64:	4b36      	ldr	r3, [pc, #216]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 030c 	and.w	r3, r3, #12
 8001c6c:	2b08      	cmp	r3, #8
 8001c6e:	d061      	beq.n	8001d34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	69db      	ldr	r3, [r3, #28]
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d146      	bne.n	8001d06 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c78:	4b33      	ldr	r3, [pc, #204]	@ (8001d48 <HAL_RCC_OscConfig+0x4cc>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7e:	f7ff fa73 	bl	8001168 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c86:	f7ff fa6f 	bl	8001168 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e06d      	b.n	8001d74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c98:	4b29      	ldr	r3, [pc, #164]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1f0      	bne.n	8001c86 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a1b      	ldr	r3, [r3, #32]
 8001ca8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cac:	d108      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cae:	4b24      	ldr	r3, [pc, #144]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	4921      	ldr	r1, [pc, #132]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cc0:	4b1f      	ldr	r3, [pc, #124]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a19      	ldr	r1, [r3, #32]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd0:	430b      	orrs	r3, r1
 8001cd2:	491b      	ldr	r1, [pc, #108]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cd8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d48 <HAL_RCC_OscConfig+0x4cc>)
 8001cda:	2201      	movs	r2, #1
 8001cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cde:	f7ff fa43 	bl	8001168 <HAL_GetTick>
 8001ce2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce6:	f7ff fa3f 	bl	8001168 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e03d      	b.n	8001d74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cf8:	4b11      	ldr	r3, [pc, #68]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d0f0      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x46a>
 8001d04:	e035      	b.n	8001d72 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d06:	4b10      	ldr	r3, [pc, #64]	@ (8001d48 <HAL_RCC_OscConfig+0x4cc>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0c:	f7ff fa2c 	bl	8001168 <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d14:	f7ff fa28 	bl	8001168 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e026      	b.n	8001d74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d26:	4b06      	ldr	r3, [pc, #24]	@ (8001d40 <HAL_RCC_OscConfig+0x4c4>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1f0      	bne.n	8001d14 <HAL_RCC_OscConfig+0x498>
 8001d32:	e01e      	b.n	8001d72 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	69db      	ldr	r3, [r3, #28]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d107      	bne.n	8001d4c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e019      	b.n	8001d74 <HAL_RCC_OscConfig+0x4f8>
 8001d40:	40021000 	.word	0x40021000
 8001d44:	40007000 	.word	0x40007000
 8001d48:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d7c <HAL_RCC_OscConfig+0x500>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d106      	bne.n	8001d6e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d001      	beq.n	8001d72 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3718      	adds	r7, #24
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40021000 	.word	0x40021000

08001d80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d101      	bne.n	8001d94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e0d0      	b.n	8001f36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d94:	4b6a      	ldr	r3, [pc, #424]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c0>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d910      	bls.n	8001dc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001da2:	4b67      	ldr	r3, [pc, #412]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c0>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f023 0207 	bic.w	r2, r3, #7
 8001daa:	4965      	ldr	r1, [pc, #404]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c0>)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001db2:	4b63      	ldr	r3, [pc, #396]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c0>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d001      	beq.n	8001dc4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e0b8      	b.n	8001f36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d020      	beq.n	8001e12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0304 	and.w	r3, r3, #4
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d005      	beq.n	8001de8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ddc:	4b59      	ldr	r3, [pc, #356]	@ (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	4a58      	ldr	r2, [pc, #352]	@ (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001de2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001de6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0308 	and.w	r3, r3, #8
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d005      	beq.n	8001e00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001df4:	4b53      	ldr	r3, [pc, #332]	@ (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	4a52      	ldr	r2, [pc, #328]	@ (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001dfe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e00:	4b50      	ldr	r3, [pc, #320]	@ (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	494d      	ldr	r1, [pc, #308]	@ (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d040      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d107      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e26:	4b47      	ldr	r3, [pc, #284]	@ (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d115      	bne.n	8001e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e07f      	b.n	8001f36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d107      	bne.n	8001e4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e3e:	4b41      	ldr	r3, [pc, #260]	@ (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d109      	bne.n	8001e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e073      	b.n	8001f36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e4e:	4b3d      	ldr	r3, [pc, #244]	@ (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e06b      	b.n	8001f36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e5e:	4b39      	ldr	r3, [pc, #228]	@ (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f023 0203 	bic.w	r2, r3, #3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	4936      	ldr	r1, [pc, #216]	@ (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e70:	f7ff f97a 	bl	8001168 <HAL_GetTick>
 8001e74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e76:	e00a      	b.n	8001e8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e78:	f7ff f976 	bl	8001168 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e053      	b.n	8001f36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e8e:	4b2d      	ldr	r3, [pc, #180]	@ (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f003 020c 	and.w	r2, r3, #12
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d1eb      	bne.n	8001e78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ea0:	4b27      	ldr	r3, [pc, #156]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c0>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d210      	bcs.n	8001ed0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eae:	4b24      	ldr	r3, [pc, #144]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f023 0207 	bic.w	r2, r3, #7
 8001eb6:	4922      	ldr	r1, [pc, #136]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ebe:	4b20      	ldr	r3, [pc, #128]	@ (8001f40 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d001      	beq.n	8001ed0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e032      	b.n	8001f36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0304 	and.w	r3, r3, #4
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d008      	beq.n	8001eee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001edc:	4b19      	ldr	r3, [pc, #100]	@ (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	4916      	ldr	r1, [pc, #88]	@ (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d009      	beq.n	8001f0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001efa:	4b12      	ldr	r3, [pc, #72]	@ (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	490e      	ldr	r1, [pc, #56]	@ (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f0e:	f000 f821 	bl	8001f54 <HAL_RCC_GetSysClockFreq>
 8001f12:	4602      	mov	r2, r0
 8001f14:	4b0b      	ldr	r3, [pc, #44]	@ (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	091b      	lsrs	r3, r3, #4
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	490a      	ldr	r1, [pc, #40]	@ (8001f48 <HAL_RCC_ClockConfig+0x1c8>)
 8001f20:	5ccb      	ldrb	r3, [r1, r3]
 8001f22:	fa22 f303 	lsr.w	r3, r2, r3
 8001f26:	4a09      	ldr	r2, [pc, #36]	@ (8001f4c <HAL_RCC_ClockConfig+0x1cc>)
 8001f28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f2a:	4b09      	ldr	r3, [pc, #36]	@ (8001f50 <HAL_RCC_ClockConfig+0x1d0>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff f8d8 	bl	80010e4 <HAL_InitTick>

  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40022000 	.word	0x40022000
 8001f44:	40021000 	.word	0x40021000
 8001f48:	08004e08 	.word	0x08004e08
 8001f4c:	20000008 	.word	0x20000008
 8001f50:	2000000c 	.word	0x2000000c

08001f54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b087      	sub	sp, #28
 8001f58:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60bb      	str	r3, [r7, #8]
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	2300      	movs	r3, #0
 8001f68:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001fe8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f003 030c 	and.w	r3, r3, #12
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	d002      	beq.n	8001f84 <HAL_RCC_GetSysClockFreq+0x30>
 8001f7e:	2b08      	cmp	r3, #8
 8001f80:	d003      	beq.n	8001f8a <HAL_RCC_GetSysClockFreq+0x36>
 8001f82:	e027      	b.n	8001fd4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f84:	4b19      	ldr	r3, [pc, #100]	@ (8001fec <HAL_RCC_GetSysClockFreq+0x98>)
 8001f86:	613b      	str	r3, [r7, #16]
      break;
 8001f88:	e027      	b.n	8001fda <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	0c9b      	lsrs	r3, r3, #18
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	4a17      	ldr	r2, [pc, #92]	@ (8001ff0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f94:	5cd3      	ldrb	r3, [r2, r3]
 8001f96:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d010      	beq.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fa2:	4b11      	ldr	r3, [pc, #68]	@ (8001fe8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	0c5b      	lsrs	r3, r3, #17
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	4a11      	ldr	r2, [pc, #68]	@ (8001ff4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001fae:	5cd3      	ldrb	r3, [r2, r3]
 8001fb0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a0d      	ldr	r2, [pc, #52]	@ (8001fec <HAL_RCC_GetSysClockFreq+0x98>)
 8001fb6:	fb03 f202 	mul.w	r2, r3, r2
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc0:	617b      	str	r3, [r7, #20]
 8001fc2:	e004      	b.n	8001fce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a0c      	ldr	r2, [pc, #48]	@ (8001ff8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001fc8:	fb02 f303 	mul.w	r3, r2, r3
 8001fcc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	613b      	str	r3, [r7, #16]
      break;
 8001fd2:	e002      	b.n	8001fda <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fd4:	4b05      	ldr	r3, [pc, #20]	@ (8001fec <HAL_RCC_GetSysClockFreq+0x98>)
 8001fd6:	613b      	str	r3, [r7, #16]
      break;
 8001fd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fda:	693b      	ldr	r3, [r7, #16]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	371c      	adds	r7, #28
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bc80      	pop	{r7}
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	007a1200 	.word	0x007a1200
 8001ff0:	08004e20 	.word	0x08004e20
 8001ff4:	08004e30 	.word	0x08004e30
 8001ff8:	003d0900 	.word	0x003d0900

08001ffc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002000:	4b02      	ldr	r3, [pc, #8]	@ (800200c <HAL_RCC_GetHCLKFreq+0x10>)
 8002002:	681b      	ldr	r3, [r3, #0]
}
 8002004:	4618      	mov	r0, r3
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr
 800200c:	20000008 	.word	0x20000008

08002010 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002014:	f7ff fff2 	bl	8001ffc <HAL_RCC_GetHCLKFreq>
 8002018:	4602      	mov	r2, r0
 800201a:	4b05      	ldr	r3, [pc, #20]	@ (8002030 <HAL_RCC_GetPCLK1Freq+0x20>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	0a1b      	lsrs	r3, r3, #8
 8002020:	f003 0307 	and.w	r3, r3, #7
 8002024:	4903      	ldr	r1, [pc, #12]	@ (8002034 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002026:	5ccb      	ldrb	r3, [r1, r3]
 8002028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800202c:	4618      	mov	r0, r3
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40021000 	.word	0x40021000
 8002034:	08004e18 	.word	0x08004e18

08002038 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800203c:	f7ff ffde 	bl	8001ffc <HAL_RCC_GetHCLKFreq>
 8002040:	4602      	mov	r2, r0
 8002042:	4b05      	ldr	r3, [pc, #20]	@ (8002058 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	0adb      	lsrs	r3, r3, #11
 8002048:	f003 0307 	and.w	r3, r3, #7
 800204c:	4903      	ldr	r1, [pc, #12]	@ (800205c <HAL_RCC_GetPCLK2Freq+0x24>)
 800204e:	5ccb      	ldrb	r3, [r1, r3]
 8002050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002054:	4618      	mov	r0, r3
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40021000 	.word	0x40021000
 800205c:	08004e18 	.word	0x08004e18

08002060 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002068:	4b0a      	ldr	r3, [pc, #40]	@ (8002094 <RCC_Delay+0x34>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a0a      	ldr	r2, [pc, #40]	@ (8002098 <RCC_Delay+0x38>)
 800206e:	fba2 2303 	umull	r2, r3, r2, r3
 8002072:	0a5b      	lsrs	r3, r3, #9
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	fb02 f303 	mul.w	r3, r2, r3
 800207a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800207c:	bf00      	nop
  }
  while (Delay --);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	1e5a      	subs	r2, r3, #1
 8002082:	60fa      	str	r2, [r7, #12]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1f9      	bne.n	800207c <RCC_Delay+0x1c>
}
 8002088:	bf00      	nop
 800208a:	bf00      	nop
 800208c:	3714      	adds	r7, #20
 800208e:	46bd      	mov	sp, r7
 8002090:	bc80      	pop	{r7}
 8002092:	4770      	bx	lr
 8002094:	20000008 	.word	0x20000008
 8002098:	10624dd3 	.word	0x10624dd3

0800209c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e076      	b.n	800219c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d108      	bne.n	80020c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80020be:	d009      	beq.n	80020d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	61da      	str	r2, [r3, #28]
 80020c6:	e005      	b.n	80020d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d106      	bne.n	80020f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7fe fe4a 	bl	8000d88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2202      	movs	r2, #2
 80020f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800210a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800211c:	431a      	orrs	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002126:	431a      	orrs	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	431a      	orrs	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	431a      	orrs	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002144:	431a      	orrs	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800214e:	431a      	orrs	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002158:	ea42 0103 	orr.w	r1, r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002160:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	430a      	orrs	r2, r1
 800216a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	0c1a      	lsrs	r2, r3, #16
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f002 0204 	and.w	r2, r2, #4
 800217a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	69da      	ldr	r2, [r3, #28]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800218a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2201      	movs	r2, #1
 8002196:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b088      	sub	sp, #32
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	603b      	str	r3, [r7, #0]
 80021b0:	4613      	mov	r3, r2
 80021b2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80021b4:	2300      	movs	r3, #0
 80021b6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d101      	bne.n	80021c6 <HAL_SPI_Transmit+0x22>
 80021c2:	2302      	movs	r3, #2
 80021c4:	e12d      	b.n	8002422 <HAL_SPI_Transmit+0x27e>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2201      	movs	r2, #1
 80021ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021ce:	f7fe ffcb 	bl	8001168 <HAL_GetTick>
 80021d2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80021d4:	88fb      	ldrh	r3, [r7, #6]
 80021d6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d002      	beq.n	80021ea <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80021e4:	2302      	movs	r3, #2
 80021e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80021e8:	e116      	b.n	8002418 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d002      	beq.n	80021f6 <HAL_SPI_Transmit+0x52>
 80021f0:	88fb      	ldrh	r3, [r7, #6]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d102      	bne.n	80021fc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80021fa:	e10d      	b.n	8002418 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2203      	movs	r2, #3
 8002200:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	68ba      	ldr	r2, [r7, #8]
 800220e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	88fa      	ldrh	r2, [r7, #6]
 8002214:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	88fa      	ldrh	r2, [r7, #6]
 800221a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002242:	d10f      	bne.n	8002264 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002252:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002262:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800226e:	2b40      	cmp	r3, #64	@ 0x40
 8002270:	d007      	beq.n	8002282 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002280:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800228a:	d14f      	bne.n	800232c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d002      	beq.n	800229a <HAL_SPI_Transmit+0xf6>
 8002294:	8afb      	ldrh	r3, [r7, #22]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d142      	bne.n	8002320 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229e:	881a      	ldrh	r2, [r3, #0]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022aa:	1c9a      	adds	r2, r3, #2
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	3b01      	subs	r3, #1
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80022be:	e02f      	b.n	8002320 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d112      	bne.n	80022f4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d2:	881a      	ldrh	r2, [r3, #0]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022de:	1c9a      	adds	r2, r3, #2
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	3b01      	subs	r3, #1
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80022f2:	e015      	b.n	8002320 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022f4:	f7fe ff38 	bl	8001168 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	429a      	cmp	r2, r3
 8002302:	d803      	bhi.n	800230c <HAL_SPI_Transmit+0x168>
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800230a:	d102      	bne.n	8002312 <HAL_SPI_Transmit+0x16e>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d106      	bne.n	8002320 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2201      	movs	r2, #1
 800231a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800231e:	e07b      	b.n	8002418 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002324:	b29b      	uxth	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1ca      	bne.n	80022c0 <HAL_SPI_Transmit+0x11c>
 800232a:	e050      	b.n	80023ce <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d002      	beq.n	800233a <HAL_SPI_Transmit+0x196>
 8002334:	8afb      	ldrh	r3, [r7, #22]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d144      	bne.n	80023c4 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	330c      	adds	r3, #12
 8002344:	7812      	ldrb	r2, [r2, #0]
 8002346:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234c:	1c5a      	adds	r2, r3, #1
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002356:	b29b      	uxth	r3, r3
 8002358:	3b01      	subs	r3, #1
 800235a:	b29a      	uxth	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002360:	e030      	b.n	80023c4 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b02      	cmp	r3, #2
 800236e:	d113      	bne.n	8002398 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	330c      	adds	r3, #12
 800237a:	7812      	ldrb	r2, [r2, #0]
 800237c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002382:	1c5a      	adds	r2, r3, #1
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800238c:	b29b      	uxth	r3, r3
 800238e:	3b01      	subs	r3, #1
 8002390:	b29a      	uxth	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002396:	e015      	b.n	80023c4 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002398:	f7fe fee6 	bl	8001168 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d803      	bhi.n	80023b0 <HAL_SPI_Transmit+0x20c>
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80023ae:	d102      	bne.n	80023b6 <HAL_SPI_Transmit+0x212>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d106      	bne.n	80023c4 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2201      	movs	r2, #1
 80023be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80023c2:	e029      	b.n	8002418 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1c9      	bne.n	8002362 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	6839      	ldr	r1, [r7, #0]
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f000 fcd0 	bl	8002d78 <SPI_EndRxTxTransaction>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d002      	beq.n	80023e4 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2220      	movs	r2, #32
 80023e2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d10a      	bne.n	8002402 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023ec:	2300      	movs	r3, #0
 80023ee:	613b      	str	r3, [r7, #16]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	613b      	str	r3, [r7, #16]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	613b      	str	r3, [r7, #16]
 8002400:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002406:	2b00      	cmp	r3, #0
 8002408:	d002      	beq.n	8002410 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	77fb      	strb	r3, [r7, #31]
 800240e:	e003      	b.n	8002418 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002420:	7ffb      	ldrb	r3, [r7, #31]
}
 8002422:	4618      	mov	r0, r3
 8002424:	3720      	adds	r7, #32
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b088      	sub	sp, #32
 800242e:	af02      	add	r7, sp, #8
 8002430:	60f8      	str	r0, [r7, #12]
 8002432:	60b9      	str	r1, [r7, #8]
 8002434:	603b      	str	r3, [r7, #0]
 8002436:	4613      	mov	r3, r2
 8002438:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800243a:	2300      	movs	r3, #0
 800243c:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b01      	cmp	r3, #1
 8002448:	d002      	beq.n	8002450 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800244a:	2302      	movs	r3, #2
 800244c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800244e:	e0fb      	b.n	8002648 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002458:	d112      	bne.n	8002480 <HAL_SPI_Receive+0x56>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10e      	bne.n	8002480 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2204      	movs	r2, #4
 8002466:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800246a:	88fa      	ldrh	r2, [r7, #6]
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	4613      	mov	r3, r2
 8002472:	68ba      	ldr	r2, [r7, #8]
 8002474:	68b9      	ldr	r1, [r7, #8]
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f000 f8ef 	bl	800265a <HAL_SPI_TransmitReceive>
 800247c:	4603      	mov	r3, r0
 800247e:	e0e8      	b.n	8002652 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002486:	2b01      	cmp	r3, #1
 8002488:	d101      	bne.n	800248e <HAL_SPI_Receive+0x64>
 800248a:	2302      	movs	r3, #2
 800248c:	e0e1      	b.n	8002652 <HAL_SPI_Receive+0x228>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002496:	f7fe fe67 	bl	8001168 <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d002      	beq.n	80024a8 <HAL_SPI_Receive+0x7e>
 80024a2:	88fb      	ldrh	r3, [r7, #6]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d102      	bne.n	80024ae <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80024ac:	e0cc      	b.n	8002648 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2204      	movs	r2, #4
 80024b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	68ba      	ldr	r2, [r7, #8]
 80024c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	88fa      	ldrh	r2, [r7, #6]
 80024c6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	88fa      	ldrh	r2, [r7, #6]
 80024cc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2200      	movs	r2, #0
 80024d8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2200      	movs	r2, #0
 80024de:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2200      	movs	r2, #0
 80024ea:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024f4:	d10f      	bne.n	8002516 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002504:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002514:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002520:	2b40      	cmp	r3, #64	@ 0x40
 8002522:	d007      	beq.n	8002534 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002532:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d16a      	bne.n	8002612 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800253c:	e032      	b.n	80025a4 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	2b01      	cmp	r3, #1
 800254a:	d115      	bne.n	8002578 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f103 020c 	add.w	r2, r3, #12
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002558:	7812      	ldrb	r2, [r2, #0]
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002562:	1c5a      	adds	r2, r3, #1
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800256c:	b29b      	uxth	r3, r3
 800256e:	3b01      	subs	r3, #1
 8002570:	b29a      	uxth	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002576:	e015      	b.n	80025a4 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002578:	f7fe fdf6 	bl	8001168 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	429a      	cmp	r2, r3
 8002586:	d803      	bhi.n	8002590 <HAL_SPI_Receive+0x166>
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800258e:	d102      	bne.n	8002596 <HAL_SPI_Receive+0x16c>
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d106      	bne.n	80025a4 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80025a2:	e051      	b.n	8002648 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1c7      	bne.n	800253e <HAL_SPI_Receive+0x114>
 80025ae:	e035      	b.n	800261c <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d113      	bne.n	80025e6 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68da      	ldr	r2, [r3, #12]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025c8:	b292      	uxth	r2, r2
 80025ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025d0:	1c9a      	adds	r2, r3, #2
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025da:	b29b      	uxth	r3, r3
 80025dc:	3b01      	subs	r3, #1
 80025de:	b29a      	uxth	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80025e4:	e015      	b.n	8002612 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025e6:	f7fe fdbf 	bl	8001168 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d803      	bhi.n	80025fe <HAL_SPI_Receive+0x1d4>
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80025fc:	d102      	bne.n	8002604 <HAL_SPI_Receive+0x1da>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d106      	bne.n	8002612 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002610:	e01a      	b.n	8002648 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002616:	b29b      	uxth	r3, r3
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1c9      	bne.n	80025b0 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	6839      	ldr	r1, [r7, #0]
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f000 fb57 	bl	8002cd4 <SPI_EndRxTransaction>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d002      	beq.n	8002632 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2220      	movs	r2, #32
 8002630:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002636:	2b00      	cmp	r3, #0
 8002638:	d002      	beq.n	8002640 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	75fb      	strb	r3, [r7, #23]
 800263e:	e003      	b.n	8002648 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002650:	7dfb      	ldrb	r3, [r7, #23]
}
 8002652:	4618      	mov	r0, r3
 8002654:	3718      	adds	r7, #24
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b08c      	sub	sp, #48	@ 0x30
 800265e:	af00      	add	r7, sp, #0
 8002660:	60f8      	str	r0, [r7, #12]
 8002662:	60b9      	str	r1, [r7, #8]
 8002664:	607a      	str	r2, [r7, #4]
 8002666:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002668:	2301      	movs	r3, #1
 800266a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800266c:	2300      	movs	r3, #0
 800266e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002678:	2b01      	cmp	r3, #1
 800267a:	d101      	bne.n	8002680 <HAL_SPI_TransmitReceive+0x26>
 800267c:	2302      	movs	r3, #2
 800267e:	e198      	b.n	80029b2 <HAL_SPI_TransmitReceive+0x358>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002688:	f7fe fd6e 	bl	8001168 <HAL_GetTick>
 800268c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002694:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800269e:	887b      	ldrh	r3, [r7, #2]
 80026a0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80026a2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d00f      	beq.n	80026ca <HAL_SPI_TransmitReceive+0x70>
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80026b0:	d107      	bne.n	80026c2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d103      	bne.n	80026c2 <HAL_SPI_TransmitReceive+0x68>
 80026ba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80026be:	2b04      	cmp	r3, #4
 80026c0:	d003      	beq.n	80026ca <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80026c2:	2302      	movs	r3, #2
 80026c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80026c8:	e16d      	b.n	80029a6 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d005      	beq.n	80026dc <HAL_SPI_TransmitReceive+0x82>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d002      	beq.n	80026dc <HAL_SPI_TransmitReceive+0x82>
 80026d6:	887b      	ldrh	r3, [r7, #2]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d103      	bne.n	80026e4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80026e2:	e160      	b.n	80029a6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2b04      	cmp	r3, #4
 80026ee:	d003      	beq.n	80026f8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2205      	movs	r2, #5
 80026f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	887a      	ldrh	r2, [r7, #2]
 8002708:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	887a      	ldrh	r2, [r7, #2]
 800270e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	887a      	ldrh	r2, [r7, #2]
 800271a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	887a      	ldrh	r2, [r7, #2]
 8002720:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2200      	movs	r2, #0
 800272c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002738:	2b40      	cmp	r3, #64	@ 0x40
 800273a:	d007      	beq.n	800274c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800274a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002754:	d17c      	bne.n	8002850 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d002      	beq.n	8002764 <HAL_SPI_TransmitReceive+0x10a>
 800275e:	8b7b      	ldrh	r3, [r7, #26]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d16a      	bne.n	800283a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002768:	881a      	ldrh	r2, [r3, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002774:	1c9a      	adds	r2, r3, #2
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800277e:	b29b      	uxth	r3, r3
 8002780:	3b01      	subs	r3, #1
 8002782:	b29a      	uxth	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002788:	e057      	b.n	800283a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b02      	cmp	r3, #2
 8002796:	d11b      	bne.n	80027d0 <HAL_SPI_TransmitReceive+0x176>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800279c:	b29b      	uxth	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d016      	beq.n	80027d0 <HAL_SPI_TransmitReceive+0x176>
 80027a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d113      	bne.n	80027d0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ac:	881a      	ldrh	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b8:	1c9a      	adds	r2, r3, #2
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	3b01      	subs	r3, #1
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027cc:	2300      	movs	r3, #0
 80027ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d119      	bne.n	8002812 <HAL_SPI_TransmitReceive+0x1b8>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d014      	beq.n	8002812 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68da      	ldr	r2, [r3, #12]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027f2:	b292      	uxth	r2, r2
 80027f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027fa:	1c9a      	adds	r2, r3, #2
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002804:	b29b      	uxth	r3, r3
 8002806:	3b01      	subs	r3, #1
 8002808:	b29a      	uxth	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800280e:	2301      	movs	r3, #1
 8002810:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002812:	f7fe fca9 	bl	8001168 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800281e:	429a      	cmp	r2, r3
 8002820:	d80b      	bhi.n	800283a <HAL_SPI_TransmitReceive+0x1e0>
 8002822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002824:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002828:	d007      	beq.n	800283a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8002838:	e0b5      	b.n	80029a6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800283e:	b29b      	uxth	r3, r3
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1a2      	bne.n	800278a <HAL_SPI_TransmitReceive+0x130>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002848:	b29b      	uxth	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d19d      	bne.n	800278a <HAL_SPI_TransmitReceive+0x130>
 800284e:	e080      	b.n	8002952 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d002      	beq.n	800285e <HAL_SPI_TransmitReceive+0x204>
 8002858:	8b7b      	ldrh	r3, [r7, #26]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d16f      	bne.n	800293e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	330c      	adds	r3, #12
 8002868:	7812      	ldrb	r2, [r2, #0]
 800286a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002870:	1c5a      	adds	r2, r3, #1
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800287a:	b29b      	uxth	r3, r3
 800287c:	3b01      	subs	r3, #1
 800287e:	b29a      	uxth	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002884:	e05b      	b.n	800293e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b02      	cmp	r3, #2
 8002892:	d11c      	bne.n	80028ce <HAL_SPI_TransmitReceive+0x274>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002898:	b29b      	uxth	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d017      	beq.n	80028ce <HAL_SPI_TransmitReceive+0x274>
 800289e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d114      	bne.n	80028ce <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	330c      	adds	r3, #12
 80028ae:	7812      	ldrb	r2, [r2, #0]
 80028b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b6:	1c5a      	adds	r2, r3, #1
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	3b01      	subs	r3, #1
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80028ca:	2300      	movs	r3, #0
 80028cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d119      	bne.n	8002910 <HAL_SPI_TransmitReceive+0x2b6>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d014      	beq.n	8002910 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68da      	ldr	r2, [r3, #12]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028f0:	b2d2      	uxtb	r2, r2
 80028f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028f8:	1c5a      	adds	r2, r3, #1
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002902:	b29b      	uxth	r3, r3
 8002904:	3b01      	subs	r3, #1
 8002906:	b29a      	uxth	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800290c:	2301      	movs	r3, #1
 800290e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002910:	f7fe fc2a 	bl	8001168 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800291c:	429a      	cmp	r2, r3
 800291e:	d803      	bhi.n	8002928 <HAL_SPI_TransmitReceive+0x2ce>
 8002920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002922:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002926:	d102      	bne.n	800292e <HAL_SPI_TransmitReceive+0x2d4>
 8002928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800292a:	2b00      	cmp	r3, #0
 800292c:	d107      	bne.n	800293e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800293c:	e033      	b.n	80029a6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002942:	b29b      	uxth	r3, r3
 8002944:	2b00      	cmp	r3, #0
 8002946:	d19e      	bne.n	8002886 <HAL_SPI_TransmitReceive+0x22c>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800294c:	b29b      	uxth	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d199      	bne.n	8002886 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002952:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002954:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f000 fa0e 	bl	8002d78 <SPI_EndRxTxTransaction>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d006      	beq.n	8002970 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2220      	movs	r2, #32
 800296c:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800296e:	e01a      	b.n	80029a6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d10a      	bne.n	800298e <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002978:	2300      	movs	r3, #0
 800297a:	617b      	str	r3, [r7, #20]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	617b      	str	r3, [r7, #20]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	617b      	str	r3, [r7, #20]
 800298c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800299c:	e003      	b.n	80029a6 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80029ae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3730      	adds	r7, #48	@ 0x30
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
	...

080029bc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b088      	sub	sp, #32
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	099b      	lsrs	r3, r3, #6
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10f      	bne.n	8002a00 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00a      	beq.n	8002a00 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	099b      	lsrs	r3, r3, #6
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d004      	beq.n	8002a00 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	4798      	blx	r3
    return;
 80029fe:	e0be      	b.n	8002b7e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	085b      	lsrs	r3, r3, #1
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00a      	beq.n	8002a22 <HAL_SPI_IRQHandler+0x66>
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	09db      	lsrs	r3, r3, #7
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d004      	beq.n	8002a22 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	4798      	blx	r3
    return;
 8002a20:	e0ad      	b.n	8002b7e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	095b      	lsrs	r3, r3, #5
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d106      	bne.n	8002a3c <HAL_SPI_IRQHandler+0x80>
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	099b      	lsrs	r3, r3, #6
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f000 80a1 	beq.w	8002b7e <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	095b      	lsrs	r3, r3, #5
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f000 809a 	beq.w	8002b7e <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	099b      	lsrs	r3, r3, #6
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d023      	beq.n	8002a9e <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b03      	cmp	r3, #3
 8002a60:	d011      	beq.n	8002a86 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a66:	f043 0204 	orr.w	r2, r3, #4
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a6e:	2300      	movs	r3, #0
 8002a70:	617b      	str	r3, [r7, #20]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	617b      	str	r3, [r7, #20]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	617b      	str	r3, [r7, #20]
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	e00b      	b.n	8002a9e <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a86:	2300      	movs	r3, #0
 8002a88:	613b      	str	r3, [r7, #16]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	613b      	str	r3, [r7, #16]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	613b      	str	r3, [r7, #16]
 8002a9a:	693b      	ldr	r3, [r7, #16]
        return;
 8002a9c:	e06f      	b.n	8002b7e <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	095b      	lsrs	r3, r3, #5
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d014      	beq.n	8002ad4 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aae:	f043 0201 	orr.w	r2, r3, #1
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60fb      	str	r3, [r7, #12]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d04f      	beq.n	8002b7c <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002aea:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d104      	bne.n	8002b08 <HAL_SPI_IRQHandler+0x14c>
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d034      	beq.n	8002b72 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 0203 	bic.w	r2, r2, #3
 8002b16:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d011      	beq.n	8002b44 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b24:	4a17      	ldr	r2, [pc, #92]	@ (8002b84 <HAL_SPI_IRQHandler+0x1c8>)
 8002b26:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7fe fc91 	bl	8001454 <HAL_DMA_Abort_IT>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d005      	beq.n	8002b44 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b3c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d016      	beq.n	8002b7a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b50:	4a0c      	ldr	r2, [pc, #48]	@ (8002b84 <HAL_SPI_IRQHandler+0x1c8>)
 8002b52:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7fe fc7b 	bl	8001454 <HAL_DMA_Abort_IT>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00a      	beq.n	8002b7a <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b68:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8002b70:	e003      	b.n	8002b7a <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f808 	bl	8002b88 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002b78:	e000      	b.n	8002b7c <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8002b7a:	bf00      	nop
    return;
 8002b7c:	bf00      	nop
  }
}
 8002b7e:	3720      	adds	r7, #32
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	08002b9b 	.word	0x08002b9b

08002b88 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc80      	pop	{r7}
 8002b98:	4770      	bx	lr

08002b9a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b084      	sub	sp, #16
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba6:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f7ff ffe7 	bl	8002b88 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002bba:	bf00      	nop
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
	...

08002bc4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b088      	sub	sp, #32
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	603b      	str	r3, [r7, #0]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002bd4:	f7fe fac8 	bl	8001168 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bdc:	1a9b      	subs	r3, r3, r2
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	4413      	add	r3, r2
 8002be2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002be4:	f7fe fac0 	bl	8001168 <HAL_GetTick>
 8002be8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002bea:	4b39      	ldr	r3, [pc, #228]	@ (8002cd0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	015b      	lsls	r3, r3, #5
 8002bf0:	0d1b      	lsrs	r3, r3, #20
 8002bf2:	69fa      	ldr	r2, [r7, #28]
 8002bf4:	fb02 f303 	mul.w	r3, r2, r3
 8002bf8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bfa:	e054      	b.n	8002ca6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c02:	d050      	beq.n	8002ca6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c04:	f7fe fab0 	bl	8001168 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	69fa      	ldr	r2, [r7, #28]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d902      	bls.n	8002c1a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d13d      	bne.n	8002c96 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002c28:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c32:	d111      	bne.n	8002c58 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c3c:	d004      	beq.n	8002c48 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c46:	d107      	bne.n	8002c58 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c56:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c60:	d10f      	bne.n	8002c82 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c80:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e017      	b.n	8002cc6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	68ba      	ldr	r2, [r7, #8]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	bf0c      	ite	eq
 8002cb6:	2301      	moveq	r3, #1
 8002cb8:	2300      	movne	r3, #0
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	79fb      	ldrb	r3, [r7, #7]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d19b      	bne.n	8002bfc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3720      	adds	r7, #32
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	20000008 	.word	0x20000008

08002cd4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af02      	add	r7, sp, #8
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ce8:	d111      	bne.n	8002d0e <SPI_EndRxTransaction+0x3a>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cf2:	d004      	beq.n	8002cfe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cfc:	d107      	bne.n	8002d0e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d0c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d16:	d117      	bne.n	8002d48 <SPI_EndRxTransaction+0x74>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d20:	d112      	bne.n	8002d48 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	9300      	str	r3, [sp, #0]
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f7ff ff49 	bl	8002bc4 <SPI_WaitFlagStateUntilTimeout>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d01a      	beq.n	8002d6e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d3c:	f043 0220 	orr.w	r2, r3, #32
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e013      	b.n	8002d70 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	2180      	movs	r1, #128	@ 0x80
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f7ff ff36 	bl	8002bc4 <SPI_WaitFlagStateUntilTimeout>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d007      	beq.n	8002d6e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d62:	f043 0220 	orr.w	r2, r3, #32
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e000      	b.n	8002d70 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af02      	add	r7, sp, #8
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	9300      	str	r3, [sp, #0]
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	2180      	movs	r1, #128	@ 0x80
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f7ff ff18 	bl	8002bc4 <SPI_WaitFlagStateUntilTimeout>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d007      	beq.n	8002daa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d9e:	f043 0220 	orr.w	r2, r3, #32
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e000      	b.n	8002dac <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e041      	b.n	8002e4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d106      	bne.n	8002de0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7fe f826 	bl	8000e2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2202      	movs	r2, #2
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	3304      	adds	r3, #4
 8002df0:	4619      	mov	r1, r3
 8002df2:	4610      	mov	r0, r2
 8002df4:	f000 fa10 	bl	8003218 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b082      	sub	sp, #8
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d101      	bne.n	8002e64 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e041      	b.n	8002ee8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d106      	bne.n	8002e7e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 f839 	bl	8002ef0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2202      	movs	r2, #2
 8002e82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	3304      	adds	r3, #4
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4610      	mov	r0, r2
 8002e92:	f000 f9c1 	bl	8003218 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3708      	adds	r7, #8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bc80      	pop	{r7}
 8002f00:	4770      	bx	lr
	...

08002f04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f10:	2300      	movs	r3, #0
 8002f12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d101      	bne.n	8002f22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f1e:	2302      	movs	r3, #2
 8002f20:	e0ae      	b.n	8003080 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2b0c      	cmp	r3, #12
 8002f2e:	f200 809f 	bhi.w	8003070 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f32:	a201      	add	r2, pc, #4	@ (adr r2, 8002f38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f38:	08002f6d 	.word	0x08002f6d
 8002f3c:	08003071 	.word	0x08003071
 8002f40:	08003071 	.word	0x08003071
 8002f44:	08003071 	.word	0x08003071
 8002f48:	08002fad 	.word	0x08002fad
 8002f4c:	08003071 	.word	0x08003071
 8002f50:	08003071 	.word	0x08003071
 8002f54:	08003071 	.word	0x08003071
 8002f58:	08002fef 	.word	0x08002fef
 8002f5c:	08003071 	.word	0x08003071
 8002f60:	08003071 	.word	0x08003071
 8002f64:	08003071 	.word	0x08003071
 8002f68:	0800302f 	.word	0x0800302f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68b9      	ldr	r1, [r7, #8]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f000 f9b2 	bl	80032dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	699a      	ldr	r2, [r3, #24]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f042 0208 	orr.w	r2, r2, #8
 8002f86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	699a      	ldr	r2, [r3, #24]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 0204 	bic.w	r2, r2, #4
 8002f96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6999      	ldr	r1, [r3, #24]
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	691a      	ldr	r2, [r3, #16]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	619a      	str	r2, [r3, #24]
      break;
 8002faa:	e064      	b.n	8003076 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68b9      	ldr	r1, [r7, #8]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f000 f9f8 	bl	80033a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	699a      	ldr	r2, [r3, #24]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	699a      	ldr	r2, [r3, #24]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6999      	ldr	r1, [r3, #24]
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	021a      	lsls	r2, r3, #8
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	619a      	str	r2, [r3, #24]
      break;
 8002fec:	e043      	b.n	8003076 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68b9      	ldr	r1, [r7, #8]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f000 fa41 	bl	800347c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	69da      	ldr	r2, [r3, #28]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f042 0208 	orr.w	r2, r2, #8
 8003008:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	69da      	ldr	r2, [r3, #28]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 0204 	bic.w	r2, r2, #4
 8003018:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	69d9      	ldr	r1, [r3, #28]
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	691a      	ldr	r2, [r3, #16]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	430a      	orrs	r2, r1
 800302a:	61da      	str	r2, [r3, #28]
      break;
 800302c:	e023      	b.n	8003076 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68b9      	ldr	r1, [r7, #8]
 8003034:	4618      	mov	r0, r3
 8003036:	f000 fa8b 	bl	8003550 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	69da      	ldr	r2, [r3, #28]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003048:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	69da      	ldr	r2, [r3, #28]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003058:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	69d9      	ldr	r1, [r3, #28]
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	021a      	lsls	r2, r3, #8
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	61da      	str	r2, [r3, #28]
      break;
 800306e:	e002      	b.n	8003076 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	75fb      	strb	r3, [r7, #23]
      break;
 8003074:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800307e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003080:	4618      	mov	r0, r3
 8003082:	3718      	adds	r7, #24
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003092:	2300      	movs	r3, #0
 8003094:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800309c:	2b01      	cmp	r3, #1
 800309e:	d101      	bne.n	80030a4 <HAL_TIM_ConfigClockSource+0x1c>
 80030a0:	2302      	movs	r3, #2
 80030a2:	e0b4      	b.n	800320e <HAL_TIM_ConfigClockSource+0x186>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2202      	movs	r2, #2
 80030b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80030c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80030ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68ba      	ldr	r2, [r7, #8]
 80030d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030dc:	d03e      	beq.n	800315c <HAL_TIM_ConfigClockSource+0xd4>
 80030de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030e2:	f200 8087 	bhi.w	80031f4 <HAL_TIM_ConfigClockSource+0x16c>
 80030e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030ea:	f000 8086 	beq.w	80031fa <HAL_TIM_ConfigClockSource+0x172>
 80030ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030f2:	d87f      	bhi.n	80031f4 <HAL_TIM_ConfigClockSource+0x16c>
 80030f4:	2b70      	cmp	r3, #112	@ 0x70
 80030f6:	d01a      	beq.n	800312e <HAL_TIM_ConfigClockSource+0xa6>
 80030f8:	2b70      	cmp	r3, #112	@ 0x70
 80030fa:	d87b      	bhi.n	80031f4 <HAL_TIM_ConfigClockSource+0x16c>
 80030fc:	2b60      	cmp	r3, #96	@ 0x60
 80030fe:	d050      	beq.n	80031a2 <HAL_TIM_ConfigClockSource+0x11a>
 8003100:	2b60      	cmp	r3, #96	@ 0x60
 8003102:	d877      	bhi.n	80031f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003104:	2b50      	cmp	r3, #80	@ 0x50
 8003106:	d03c      	beq.n	8003182 <HAL_TIM_ConfigClockSource+0xfa>
 8003108:	2b50      	cmp	r3, #80	@ 0x50
 800310a:	d873      	bhi.n	80031f4 <HAL_TIM_ConfigClockSource+0x16c>
 800310c:	2b40      	cmp	r3, #64	@ 0x40
 800310e:	d058      	beq.n	80031c2 <HAL_TIM_ConfigClockSource+0x13a>
 8003110:	2b40      	cmp	r3, #64	@ 0x40
 8003112:	d86f      	bhi.n	80031f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003114:	2b30      	cmp	r3, #48	@ 0x30
 8003116:	d064      	beq.n	80031e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003118:	2b30      	cmp	r3, #48	@ 0x30
 800311a:	d86b      	bhi.n	80031f4 <HAL_TIM_ConfigClockSource+0x16c>
 800311c:	2b20      	cmp	r3, #32
 800311e:	d060      	beq.n	80031e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003120:	2b20      	cmp	r3, #32
 8003122:	d867      	bhi.n	80031f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003124:	2b00      	cmp	r3, #0
 8003126:	d05c      	beq.n	80031e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003128:	2b10      	cmp	r3, #16
 800312a:	d05a      	beq.n	80031e2 <HAL_TIM_ConfigClockSource+0x15a>
 800312c:	e062      	b.n	80031f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800313e:	f000 facc 	bl	80036da <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003150:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68ba      	ldr	r2, [r7, #8]
 8003158:	609a      	str	r2, [r3, #8]
      break;
 800315a:	e04f      	b.n	80031fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800316c:	f000 fab5 	bl	80036da <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	689a      	ldr	r2, [r3, #8]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800317e:	609a      	str	r2, [r3, #8]
      break;
 8003180:	e03c      	b.n	80031fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800318e:	461a      	mov	r2, r3
 8003190:	f000 fa2c 	bl	80035ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2150      	movs	r1, #80	@ 0x50
 800319a:	4618      	mov	r0, r3
 800319c:	f000 fa83 	bl	80036a6 <TIM_ITRx_SetConfig>
      break;
 80031a0:	e02c      	b.n	80031fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031ae:	461a      	mov	r2, r3
 80031b0:	f000 fa4a 	bl	8003648 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2160      	movs	r1, #96	@ 0x60
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 fa73 	bl	80036a6 <TIM_ITRx_SetConfig>
      break;
 80031c0:	e01c      	b.n	80031fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ce:	461a      	mov	r2, r3
 80031d0:	f000 fa0c 	bl	80035ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2140      	movs	r1, #64	@ 0x40
 80031da:	4618      	mov	r0, r3
 80031dc:	f000 fa63 	bl	80036a6 <TIM_ITRx_SetConfig>
      break;
 80031e0:	e00c      	b.n	80031fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4619      	mov	r1, r3
 80031ec:	4610      	mov	r0, r2
 80031ee:	f000 fa5a 	bl	80036a6 <TIM_ITRx_SetConfig>
      break;
 80031f2:	e003      	b.n	80031fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	73fb      	strb	r3, [r7, #15]
      break;
 80031f8:	e000      	b.n	80031fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80031fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800320c:	7bfb      	ldrb	r3, [r7, #15]
}
 800320e:	4618      	mov	r0, r3
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
	...

08003218 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a29      	ldr	r2, [pc, #164]	@ (80032d0 <TIM_Base_SetConfig+0xb8>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d00b      	beq.n	8003248 <TIM_Base_SetConfig+0x30>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003236:	d007      	beq.n	8003248 <TIM_Base_SetConfig+0x30>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a26      	ldr	r2, [pc, #152]	@ (80032d4 <TIM_Base_SetConfig+0xbc>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d003      	beq.n	8003248 <TIM_Base_SetConfig+0x30>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a25      	ldr	r2, [pc, #148]	@ (80032d8 <TIM_Base_SetConfig+0xc0>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d108      	bne.n	800325a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800324e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	4313      	orrs	r3, r2
 8003258:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a1c      	ldr	r2, [pc, #112]	@ (80032d0 <TIM_Base_SetConfig+0xb8>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d00b      	beq.n	800327a <TIM_Base_SetConfig+0x62>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003268:	d007      	beq.n	800327a <TIM_Base_SetConfig+0x62>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a19      	ldr	r2, [pc, #100]	@ (80032d4 <TIM_Base_SetConfig+0xbc>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d003      	beq.n	800327a <TIM_Base_SetConfig+0x62>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a18      	ldr	r2, [pc, #96]	@ (80032d8 <TIM_Base_SetConfig+0xc0>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d108      	bne.n	800328c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003280:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	4313      	orrs	r3, r2
 800328a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	4313      	orrs	r3, r2
 8003298:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	689a      	ldr	r2, [r3, #8]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a07      	ldr	r2, [pc, #28]	@ (80032d0 <TIM_Base_SetConfig+0xb8>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d103      	bne.n	80032c0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	691a      	ldr	r2, [r3, #16]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	615a      	str	r2, [r3, #20]
}
 80032c6:	bf00      	nop
 80032c8:	3714      	adds	r7, #20
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bc80      	pop	{r7}
 80032ce:	4770      	bx	lr
 80032d0:	40012c00 	.word	0x40012c00
 80032d4:	40000400 	.word	0x40000400
 80032d8:	40000800 	.word	0x40000800

080032dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032dc:	b480      	push	{r7}
 80032de:	b087      	sub	sp, #28
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	f023 0201 	bic.w	r2, r3, #1
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800330a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f023 0303 	bic.w	r3, r3, #3
 8003312:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	4313      	orrs	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	f023 0302 	bic.w	r3, r3, #2
 8003324:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	4313      	orrs	r3, r2
 800332e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a1c      	ldr	r2, [pc, #112]	@ (80033a4 <TIM_OC1_SetConfig+0xc8>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d10c      	bne.n	8003352 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	f023 0308 	bic.w	r3, r3, #8
 800333e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	4313      	orrs	r3, r2
 8003348:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	f023 0304 	bic.w	r3, r3, #4
 8003350:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a13      	ldr	r2, [pc, #76]	@ (80033a4 <TIM_OC1_SetConfig+0xc8>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d111      	bne.n	800337e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003360:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003368:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	4313      	orrs	r3, r2
 8003372:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	4313      	orrs	r3, r2
 800337c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	621a      	str	r2, [r3, #32]
}
 8003398:	bf00      	nop
 800339a:	371c      	adds	r7, #28
 800339c:	46bd      	mov	sp, r7
 800339e:	bc80      	pop	{r7}
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	40012c00 	.word	0x40012c00

080033a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b087      	sub	sp, #28
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	f023 0210 	bic.w	r2, r3, #16
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	021b      	lsls	r3, r3, #8
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	f023 0320 	bic.w	r3, r3, #32
 80033f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	011b      	lsls	r3, r3, #4
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a1d      	ldr	r2, [pc, #116]	@ (8003478 <TIM_OC2_SetConfig+0xd0>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d10d      	bne.n	8003424 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800340e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	011b      	lsls	r3, r3, #4
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	4313      	orrs	r3, r2
 800341a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003422:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a14      	ldr	r2, [pc, #80]	@ (8003478 <TIM_OC2_SetConfig+0xd0>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d113      	bne.n	8003454 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003432:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800343a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	4313      	orrs	r3, r2
 8003446:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	4313      	orrs	r3, r2
 8003452:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	621a      	str	r2, [r3, #32]
}
 800346e:	bf00      	nop
 8003470:	371c      	adds	r7, #28
 8003472:	46bd      	mov	sp, r7
 8003474:	bc80      	pop	{r7}
 8003476:	4770      	bx	lr
 8003478:	40012c00 	.word	0x40012c00

0800347c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800347c:	b480      	push	{r7}
 800347e:	b087      	sub	sp, #28
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f023 0303 	bic.w	r3, r3, #3
 80034b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80034c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	021b      	lsls	r3, r3, #8
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a1d      	ldr	r2, [pc, #116]	@ (800354c <TIM_OC3_SetConfig+0xd0>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d10d      	bne.n	80034f6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80034e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	021b      	lsls	r3, r3, #8
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80034f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a14      	ldr	r2, [pc, #80]	@ (800354c <TIM_OC3_SetConfig+0xd0>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d113      	bne.n	8003526 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003504:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800350c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	011b      	lsls	r3, r3, #4
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	4313      	orrs	r3, r2
 8003518:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	011b      	lsls	r3, r3, #4
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	4313      	orrs	r3, r2
 8003524:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	621a      	str	r2, [r3, #32]
}
 8003540:	bf00      	nop
 8003542:	371c      	adds	r7, #28
 8003544:	46bd      	mov	sp, r7
 8003546:	bc80      	pop	{r7}
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	40012c00 	.word	0x40012c00

08003550 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003550:	b480      	push	{r7}
 8003552:	b087      	sub	sp, #28
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a1b      	ldr	r3, [r3, #32]
 8003564:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800357e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003586:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	021b      	lsls	r3, r3, #8
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	4313      	orrs	r3, r2
 8003592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800359a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	031b      	lsls	r3, r3, #12
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a0f      	ldr	r2, [pc, #60]	@ (80035e8 <TIM_OC4_SetConfig+0x98>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d109      	bne.n	80035c4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80035b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	019b      	lsls	r3, r3, #6
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685a      	ldr	r2, [r3, #4]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	621a      	str	r2, [r3, #32]
}
 80035de:	bf00      	nop
 80035e0:	371c      	adds	r7, #28
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bc80      	pop	{r7}
 80035e6:	4770      	bx	lr
 80035e8:	40012c00 	.word	0x40012c00

080035ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b087      	sub	sp, #28
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6a1b      	ldr	r3, [r3, #32]
 80035fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	f023 0201 	bic.w	r2, r3, #1
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003616:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	011b      	lsls	r3, r3, #4
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	4313      	orrs	r3, r2
 8003620:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f023 030a 	bic.w	r3, r3, #10
 8003628:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	4313      	orrs	r3, r2
 8003630:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	621a      	str	r2, [r3, #32]
}
 800363e:	bf00      	nop
 8003640:	371c      	adds	r7, #28
 8003642:	46bd      	mov	sp, r7
 8003644:	bc80      	pop	{r7}
 8003646:	4770      	bx	lr

08003648 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003648:	b480      	push	{r7}
 800364a:	b087      	sub	sp, #28
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	f023 0210 	bic.w	r2, r3, #16
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003672:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	031b      	lsls	r3, r3, #12
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	4313      	orrs	r3, r2
 800367c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003684:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	011b      	lsls	r3, r3, #4
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	4313      	orrs	r3, r2
 800368e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	621a      	str	r2, [r3, #32]
}
 800369c:	bf00      	nop
 800369e:	371c      	adds	r7, #28
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bc80      	pop	{r7}
 80036a4:	4770      	bx	lr

080036a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036a6:	b480      	push	{r7}
 80036a8:	b085      	sub	sp, #20
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
 80036ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	f043 0307 	orr.w	r3, r3, #7
 80036c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	609a      	str	r2, [r3, #8]
}
 80036d0:	bf00      	nop
 80036d2:	3714      	adds	r7, #20
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bc80      	pop	{r7}
 80036d8:	4770      	bx	lr

080036da <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036da:	b480      	push	{r7}
 80036dc:	b087      	sub	sp, #28
 80036de:	af00      	add	r7, sp, #0
 80036e0:	60f8      	str	r0, [r7, #12]
 80036e2:	60b9      	str	r1, [r7, #8]
 80036e4:	607a      	str	r2, [r7, #4]
 80036e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036f4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	021a      	lsls	r2, r3, #8
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	431a      	orrs	r2, r3
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	4313      	orrs	r3, r2
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	4313      	orrs	r3, r2
 8003706:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	609a      	str	r2, [r3, #8]
}
 800370e:	bf00      	nop
 8003710:	371c      	adds	r7, #28
 8003712:	46bd      	mov	sp, r7
 8003714:	bc80      	pop	{r7}
 8003716:	4770      	bx	lr

08003718 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003728:	2b01      	cmp	r3, #1
 800372a:	d101      	bne.n	8003730 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800372c:	2302      	movs	r3, #2
 800372e:	e046      	b.n	80037be <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2202      	movs	r2, #2
 800373c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003756:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	4313      	orrs	r3, r2
 8003760:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a16      	ldr	r2, [pc, #88]	@ (80037c8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d00e      	beq.n	8003792 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800377c:	d009      	beq.n	8003792 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a12      	ldr	r2, [pc, #72]	@ (80037cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d004      	beq.n	8003792 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a10      	ldr	r2, [pc, #64]	@ (80037d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d10c      	bne.n	80037ac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003798:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3714      	adds	r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bc80      	pop	{r7}
 80037c6:	4770      	bx	lr
 80037c8:	40012c00 	.word	0x40012c00
 80037cc:	40000400 	.word	0x40000400
 80037d0:	40000800 	.word	0x40000800

080037d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e042      	b.n	800386c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d106      	bne.n	8003800 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7fd fb66 	bl	8000ecc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2224      	movs	r2, #36	@ 0x24
 8003804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68da      	ldr	r2, [r3, #12]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003816:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 fd71 	bl	8004300 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	691a      	ldr	r2, [r3, #16]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800382c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	695a      	ldr	r2, [r3, #20]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800383c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68da      	ldr	r2, [r3, #12]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800384c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2220      	movs	r2, #32
 8003858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2220      	movs	r2, #32
 8003860:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b08a      	sub	sp, #40	@ 0x28
 8003878:	af02      	add	r7, sp, #8
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	603b      	str	r3, [r7, #0]
 8003880:	4613      	mov	r3, r2
 8003882:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003884:	2300      	movs	r3, #0
 8003886:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b20      	cmp	r3, #32
 8003892:	d16d      	bne.n	8003970 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d002      	beq.n	80038a0 <HAL_UART_Transmit+0x2c>
 800389a:	88fb      	ldrh	r3, [r7, #6]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d101      	bne.n	80038a4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e066      	b.n	8003972 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2221      	movs	r2, #33	@ 0x21
 80038ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038b2:	f7fd fc59 	bl	8001168 <HAL_GetTick>
 80038b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	88fa      	ldrh	r2, [r7, #6]
 80038bc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	88fa      	ldrh	r2, [r7, #6]
 80038c2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038cc:	d108      	bne.n	80038e0 <HAL_UART_Transmit+0x6c>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d104      	bne.n	80038e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80038d6:	2300      	movs	r3, #0
 80038d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	61bb      	str	r3, [r7, #24]
 80038de:	e003      	b.n	80038e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038e4:	2300      	movs	r3, #0
 80038e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80038e8:	e02a      	b.n	8003940 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	9300      	str	r3, [sp, #0]
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	2200      	movs	r2, #0
 80038f2:	2180      	movs	r1, #128	@ 0x80
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f000 faf9 	bl	8003eec <UART_WaitOnFlagUntilTimeout>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e036      	b.n	8003972 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10b      	bne.n	8003922 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	881b      	ldrh	r3, [r3, #0]
 800390e:	461a      	mov	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003918:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	3302      	adds	r3, #2
 800391e:	61bb      	str	r3, [r7, #24]
 8003920:	e007      	b.n	8003932 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	781a      	ldrb	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	3301      	adds	r3, #1
 8003930:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003936:	b29b      	uxth	r3, r3
 8003938:	3b01      	subs	r3, #1
 800393a:	b29a      	uxth	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003944:	b29b      	uxth	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1cf      	bne.n	80038ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	9300      	str	r3, [sp, #0]
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	2200      	movs	r2, #0
 8003952:	2140      	movs	r1, #64	@ 0x40
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f000 fac9 	bl	8003eec <UART_WaitOnFlagUntilTimeout>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e006      	b.n	8003972 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2220      	movs	r2, #32
 8003968:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800396c:	2300      	movs	r3, #0
 800396e:	e000      	b.n	8003972 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003970:	2302      	movs	r3, #2
  }
}
 8003972:	4618      	mov	r0, r3
 8003974:	3720      	adds	r7, #32
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
	...

0800397c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b0ba      	sub	sp, #232	@ 0xe8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80039a2:	2300      	movs	r3, #0
 80039a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80039ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039b2:	f003 030f 	and.w	r3, r3, #15
 80039b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80039ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10f      	bne.n	80039e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039c6:	f003 0320 	and.w	r3, r3, #32
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d009      	beq.n	80039e2 <HAL_UART_IRQHandler+0x66>
 80039ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039d2:	f003 0320 	and.w	r3, r3, #32
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 fbd1 	bl	8004182 <UART_Receive_IT>
      return;
 80039e0:	e25b      	b.n	8003e9a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80039e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f000 80de 	beq.w	8003ba8 <HAL_UART_IRQHandler+0x22c>
 80039ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d106      	bne.n	8003a06 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039fc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f000 80d1 	beq.w	8003ba8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00b      	beq.n	8003a2a <HAL_UART_IRQHandler+0xae>
 8003a12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d005      	beq.n	8003a2a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a22:	f043 0201 	orr.w	r2, r3, #1
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a2e:	f003 0304 	and.w	r3, r3, #4
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00b      	beq.n	8003a4e <HAL_UART_IRQHandler+0xd2>
 8003a36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d005      	beq.n	8003a4e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a46:	f043 0202 	orr.w	r2, r3, #2
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00b      	beq.n	8003a72 <HAL_UART_IRQHandler+0xf6>
 8003a5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d005      	beq.n	8003a72 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a6a:	f043 0204 	orr.w	r2, r3, #4
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a76:	f003 0308 	and.w	r3, r3, #8
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d011      	beq.n	8003aa2 <HAL_UART_IRQHandler+0x126>
 8003a7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a82:	f003 0320 	and.w	r3, r3, #32
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d105      	bne.n	8003a96 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d005      	beq.n	8003aa2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a9a:	f043 0208 	orr.w	r2, r3, #8
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f000 81f2 	beq.w	8003e90 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ab0:	f003 0320 	and.w	r3, r3, #32
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d008      	beq.n	8003aca <HAL_UART_IRQHandler+0x14e>
 8003ab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003abc:	f003 0320 	and.w	r3, r3, #32
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d002      	beq.n	8003aca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 fb5c 	bl	8004182 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	bf14      	ite	ne
 8003ad8:	2301      	movne	r3, #1
 8003ada:	2300      	moveq	r3, #0
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ae6:	f003 0308 	and.w	r3, r3, #8
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d103      	bne.n	8003af6 <HAL_UART_IRQHandler+0x17a>
 8003aee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d04f      	beq.n	8003b96 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 fa66 	bl	8003fc8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d041      	beq.n	8003b8e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	3314      	adds	r3, #20
 8003b10:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b14:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003b18:	e853 3f00 	ldrex	r3, [r3]
 8003b1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003b20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003b24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	3314      	adds	r3, #20
 8003b32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003b36:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003b3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003b42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003b46:	e841 2300 	strex	r3, r2, [r1]
 8003b4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003b4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1d9      	bne.n	8003b0a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d013      	beq.n	8003b86 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b62:	4a7e      	ldr	r2, [pc, #504]	@ (8003d5c <HAL_UART_IRQHandler+0x3e0>)
 8003b64:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7fd fc72 	bl	8001454 <HAL_DMA_Abort_IT>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d016      	beq.n	8003ba4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003b80:	4610      	mov	r0, r2
 8003b82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b84:	e00e      	b.n	8003ba4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f99c 	bl	8003ec4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b8c:	e00a      	b.n	8003ba4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 f998 	bl	8003ec4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b94:	e006      	b.n	8003ba4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 f994 	bl	8003ec4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003ba2:	e175      	b.n	8003e90 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ba4:	bf00      	nop
    return;
 8003ba6:	e173      	b.n	8003e90 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	f040 814f 	bne.w	8003e50 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bb6:	f003 0310 	and.w	r3, r3, #16
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f000 8148 	beq.w	8003e50 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bc4:	f003 0310 	and.w	r3, r3, #16
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f000 8141 	beq.w	8003e50 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003bce:	2300      	movs	r3, #0
 8003bd0:	60bb      	str	r3, [r7, #8]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	60bb      	str	r3, [r7, #8]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	60bb      	str	r3, [r7, #8]
 8003be2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f000 80b6 	beq.w	8003d60 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f000 8145 	beq.w	8003e94 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003c0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c12:	429a      	cmp	r2, r3
 8003c14:	f080 813e 	bcs.w	8003e94 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c1e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	2b20      	cmp	r3, #32
 8003c28:	f000 8088 	beq.w	8003d3c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	330c      	adds	r3, #12
 8003c32:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c36:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003c3a:	e853 3f00 	ldrex	r3, [r3]
 8003c3e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003c42:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003c46:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c4a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	330c      	adds	r3, #12
 8003c54:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003c58:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c5c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c60:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003c64:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003c68:	e841 2300 	strex	r3, r2, [r1]
 8003c6c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003c70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1d9      	bne.n	8003c2c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	3314      	adds	r3, #20
 8003c7e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c80:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c82:	e853 3f00 	ldrex	r3, [r3]
 8003c86:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003c88:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c8a:	f023 0301 	bic.w	r3, r3, #1
 8003c8e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	3314      	adds	r3, #20
 8003c98:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003c9c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003ca0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003ca4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003ca8:	e841 2300 	strex	r3, r2, [r1]
 8003cac:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003cae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1e1      	bne.n	8003c78 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	3314      	adds	r3, #20
 8003cba:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cbc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003cbe:	e853 3f00 	ldrex	r3, [r3]
 8003cc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003cc4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003cc6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	3314      	adds	r3, #20
 8003cd4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003cd8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003cda:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cdc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003cde:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003ce0:	e841 2300 	strex	r3, r2, [r1]
 8003ce4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003ce6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1e3      	bne.n	8003cb4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	330c      	adds	r3, #12
 8003d00:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d04:	e853 3f00 	ldrex	r3, [r3]
 8003d08:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003d0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d0c:	f023 0310 	bic.w	r3, r3, #16
 8003d10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	330c      	adds	r3, #12
 8003d1a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003d1e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003d20:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d22:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003d24:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003d26:	e841 2300 	strex	r3, r2, [r1]
 8003d2a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003d2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1e3      	bne.n	8003cfa <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7fd fb51 	bl	80013de <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2202      	movs	r2, #2
 8003d40:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	4619      	mov	r1, r3
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 f8bf 	bl	8003ed6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d58:	e09c      	b.n	8003e94 <HAL_UART_IRQHandler+0x518>
 8003d5a:	bf00      	nop
 8003d5c:	0800408d 	.word	0x0800408d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	f000 808e 	beq.w	8003e98 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003d7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f000 8089 	beq.w	8003e98 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	330c      	adds	r3, #12
 8003d8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d90:	e853 3f00 	ldrex	r3, [r3]
 8003d94:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d9c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	330c      	adds	r3, #12
 8003da6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003daa:	647a      	str	r2, [r7, #68]	@ 0x44
 8003dac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003db0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003db2:	e841 2300 	strex	r3, r2, [r1]
 8003db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003db8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1e3      	bne.n	8003d86 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	3314      	adds	r3, #20
 8003dc4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc8:	e853 3f00 	ldrex	r3, [r3]
 8003dcc:	623b      	str	r3, [r7, #32]
   return(result);
 8003dce:	6a3b      	ldr	r3, [r7, #32]
 8003dd0:	f023 0301 	bic.w	r3, r3, #1
 8003dd4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	3314      	adds	r3, #20
 8003dde:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003de2:	633a      	str	r2, [r7, #48]	@ 0x30
 8003de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003de8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dea:	e841 2300 	strex	r3, r2, [r1]
 8003dee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1e3      	bne.n	8003dbe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2220      	movs	r2, #32
 8003dfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	330c      	adds	r3, #12
 8003e0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	e853 3f00 	ldrex	r3, [r3]
 8003e12:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f023 0310 	bic.w	r3, r3, #16
 8003e1a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	330c      	adds	r3, #12
 8003e24:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003e28:	61fa      	str	r2, [r7, #28]
 8003e2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e2c:	69b9      	ldr	r1, [r7, #24]
 8003e2e:	69fa      	ldr	r2, [r7, #28]
 8003e30:	e841 2300 	strex	r3, r2, [r1]
 8003e34:	617b      	str	r3, [r7, #20]
   return(result);
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1e3      	bne.n	8003e04 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2202      	movs	r2, #2
 8003e40:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e42:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003e46:	4619      	mov	r1, r3
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 f844 	bl	8003ed6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e4e:	e023      	b.n	8003e98 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d009      	beq.n	8003e70 <HAL_UART_IRQHandler+0x4f4>
 8003e5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d003      	beq.n	8003e70 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 f923 	bl	80040b4 <UART_Transmit_IT>
    return;
 8003e6e:	e014      	b.n	8003e9a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00e      	beq.n	8003e9a <HAL_UART_IRQHandler+0x51e>
 8003e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d008      	beq.n	8003e9a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 f962 	bl	8004152 <UART_EndTransmit_IT>
    return;
 8003e8e:	e004      	b.n	8003e9a <HAL_UART_IRQHandler+0x51e>
    return;
 8003e90:	bf00      	nop
 8003e92:	e002      	b.n	8003e9a <HAL_UART_IRQHandler+0x51e>
      return;
 8003e94:	bf00      	nop
 8003e96:	e000      	b.n	8003e9a <HAL_UART_IRQHandler+0x51e>
      return;
 8003e98:	bf00      	nop
  }
}
 8003e9a:	37e8      	adds	r7, #232	@ 0xe8
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bc80      	pop	{r7}
 8003eb0:	4770      	bx	lr

08003eb2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bc80      	pop	{r7}
 8003ec2:	4770      	bx	lr

08003ec4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ecc:	bf00      	nop
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bc80      	pop	{r7}
 8003ed4:	4770      	bx	lr

08003ed6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	b083      	sub	sp, #12
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
 8003ede:	460b      	mov	r3, r1
 8003ee0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bc80      	pop	{r7}
 8003eea:	4770      	bx	lr

08003eec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b090      	sub	sp, #64	@ 0x40
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	603b      	str	r3, [r7, #0]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003efc:	e050      	b.n	8003fa0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003efe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f04:	d04c      	beq.n	8003fa0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d007      	beq.n	8003f1c <UART_WaitOnFlagUntilTimeout+0x30>
 8003f0c:	f7fd f92c 	bl	8001168 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d241      	bcs.n	8003fa0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	330c      	adds	r3, #12
 8003f22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f26:	e853 3f00 	ldrex	r3, [r3]
 8003f2a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	330c      	adds	r3, #12
 8003f3a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f3c:	637a      	str	r2, [r7, #52]	@ 0x34
 8003f3e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f40:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003f42:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f44:	e841 2300 	strex	r3, r2, [r1]
 8003f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1e5      	bne.n	8003f1c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	3314      	adds	r3, #20
 8003f56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	e853 3f00 	ldrex	r3, [r3]
 8003f5e:	613b      	str	r3, [r7, #16]
   return(result);
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	f023 0301 	bic.w	r3, r3, #1
 8003f66:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	3314      	adds	r3, #20
 8003f6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003f70:	623a      	str	r2, [r7, #32]
 8003f72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f74:	69f9      	ldr	r1, [r7, #28]
 8003f76:	6a3a      	ldr	r2, [r7, #32]
 8003f78:	e841 2300 	strex	r3, r2, [r1]
 8003f7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1e5      	bne.n	8003f50 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2220      	movs	r2, #32
 8003f88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2220      	movs	r2, #32
 8003f90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e00f      	b.n	8003fc0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	4013      	ands	r3, r2
 8003faa:	68ba      	ldr	r2, [r7, #8]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	bf0c      	ite	eq
 8003fb0:	2301      	moveq	r3, #1
 8003fb2:	2300      	movne	r3, #0
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	79fb      	ldrb	r3, [r7, #7]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d09f      	beq.n	8003efe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3740      	adds	r7, #64	@ 0x40
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b095      	sub	sp, #84	@ 0x54
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	330c      	adds	r3, #12
 8003fd6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fda:	e853 3f00 	ldrex	r3, [r3]
 8003fde:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003fe6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	330c      	adds	r3, #12
 8003fee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ff0:	643a      	str	r2, [r7, #64]	@ 0x40
 8003ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ff6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ff8:	e841 2300 	strex	r3, r2, [r1]
 8003ffc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1e5      	bne.n	8003fd0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	3314      	adds	r3, #20
 800400a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400c:	6a3b      	ldr	r3, [r7, #32]
 800400e:	e853 3f00 	ldrex	r3, [r3]
 8004012:	61fb      	str	r3, [r7, #28]
   return(result);
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	f023 0301 	bic.w	r3, r3, #1
 800401a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	3314      	adds	r3, #20
 8004022:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004024:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004026:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004028:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800402a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800402c:	e841 2300 	strex	r3, r2, [r1]
 8004030:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1e5      	bne.n	8004004 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800403c:	2b01      	cmp	r3, #1
 800403e:	d119      	bne.n	8004074 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	330c      	adds	r3, #12
 8004046:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	e853 3f00 	ldrex	r3, [r3]
 800404e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	f023 0310 	bic.w	r3, r3, #16
 8004056:	647b      	str	r3, [r7, #68]	@ 0x44
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	330c      	adds	r3, #12
 800405e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004060:	61ba      	str	r2, [r7, #24]
 8004062:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004064:	6979      	ldr	r1, [r7, #20]
 8004066:	69ba      	ldr	r2, [r7, #24]
 8004068:	e841 2300 	strex	r3, r2, [r1]
 800406c:	613b      	str	r3, [r7, #16]
   return(result);
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1e5      	bne.n	8004040 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2220      	movs	r2, #32
 8004078:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004082:	bf00      	nop
 8004084:	3754      	adds	r7, #84	@ 0x54
 8004086:	46bd      	mov	sp, r7
 8004088:	bc80      	pop	{r7}
 800408a:	4770      	bx	lr

0800408c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004098:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f7ff ff0c 	bl	8003ec4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040ac:	bf00      	nop
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	2b21      	cmp	r3, #33	@ 0x21
 80040c6:	d13e      	bne.n	8004146 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040d0:	d114      	bne.n	80040fc <UART_Transmit_IT+0x48>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d110      	bne.n	80040fc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	881b      	ldrh	r3, [r3, #0]
 80040e4:	461a      	mov	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040ee:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	1c9a      	adds	r2, r3, #2
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	621a      	str	r2, [r3, #32]
 80040fa:	e008      	b.n	800410e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	1c59      	adds	r1, r3, #1
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	6211      	str	r1, [r2, #32]
 8004106:	781a      	ldrb	r2, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004112:	b29b      	uxth	r3, r3
 8004114:	3b01      	subs	r3, #1
 8004116:	b29b      	uxth	r3, r3
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	4619      	mov	r1, r3
 800411c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10f      	bne.n	8004142 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68da      	ldr	r2, [r3, #12]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004130:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68da      	ldr	r2, [r3, #12]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004140:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004142:	2300      	movs	r3, #0
 8004144:	e000      	b.n	8004148 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004146:	2302      	movs	r3, #2
  }
}
 8004148:	4618      	mov	r0, r3
 800414a:	3714      	adds	r7, #20
 800414c:	46bd      	mov	sp, r7
 800414e:	bc80      	pop	{r7}
 8004150:	4770      	bx	lr

08004152 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b082      	sub	sp, #8
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68da      	ldr	r2, [r3, #12]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004168:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2220      	movs	r2, #32
 800416e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f7ff fe94 	bl	8003ea0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004182:	b580      	push	{r7, lr}
 8004184:	b08c      	sub	sp, #48	@ 0x30
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b22      	cmp	r3, #34	@ 0x22
 8004194:	f040 80ae 	bne.w	80042f4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041a0:	d117      	bne.n	80041d2 <UART_Receive_IT+0x50>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d113      	bne.n	80041d2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80041aa:	2300      	movs	r3, #0
 80041ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ca:	1c9a      	adds	r2, r3, #2
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	629a      	str	r2, [r3, #40]	@ 0x28
 80041d0:	e026      	b.n	8004220 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80041d8:	2300      	movs	r3, #0
 80041da:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041e4:	d007      	beq.n	80041f6 <UART_Receive_IT+0x74>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10a      	bne.n	8004204 <UART_Receive_IT+0x82>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d106      	bne.n	8004204 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	b2da      	uxtb	r2, r3
 80041fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004200:	701a      	strb	r2, [r3, #0]
 8004202:	e008      	b.n	8004216 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	b2db      	uxtb	r3, r3
 800420c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004210:	b2da      	uxtb	r2, r3
 8004212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004214:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800421a:	1c5a      	adds	r2, r3, #1
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004224:	b29b      	uxth	r3, r3
 8004226:	3b01      	subs	r3, #1
 8004228:	b29b      	uxth	r3, r3
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	4619      	mov	r1, r3
 800422e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004230:	2b00      	cmp	r3, #0
 8004232:	d15d      	bne.n	80042f0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68da      	ldr	r2, [r3, #12]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 0220 	bic.w	r2, r2, #32
 8004242:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68da      	ldr	r2, [r3, #12]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004252:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	695a      	ldr	r2, [r3, #20]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f022 0201 	bic.w	r2, r2, #1
 8004262:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2220      	movs	r2, #32
 8004268:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004276:	2b01      	cmp	r3, #1
 8004278:	d135      	bne.n	80042e6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	330c      	adds	r3, #12
 8004286:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	e853 3f00 	ldrex	r3, [r3]
 800428e:	613b      	str	r3, [r7, #16]
   return(result);
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	f023 0310 	bic.w	r3, r3, #16
 8004296:	627b      	str	r3, [r7, #36]	@ 0x24
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	330c      	adds	r3, #12
 800429e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042a0:	623a      	str	r2, [r7, #32]
 80042a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a4:	69f9      	ldr	r1, [r7, #28]
 80042a6:	6a3a      	ldr	r2, [r7, #32]
 80042a8:	e841 2300 	strex	r3, r2, [r1]
 80042ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1e5      	bne.n	8004280 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0310 	and.w	r3, r3, #16
 80042be:	2b10      	cmp	r3, #16
 80042c0:	d10a      	bne.n	80042d8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042c2:	2300      	movs	r3, #0
 80042c4:	60fb      	str	r3, [r7, #12]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	60fb      	str	r3, [r7, #12]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	60fb      	str	r3, [r7, #12]
 80042d6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80042dc:	4619      	mov	r1, r3
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f7ff fdf9 	bl	8003ed6 <HAL_UARTEx_RxEventCallback>
 80042e4:	e002      	b.n	80042ec <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7ff fde3 	bl	8003eb2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80042ec:	2300      	movs	r3, #0
 80042ee:	e002      	b.n	80042f6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80042f0:	2300      	movs	r3, #0
 80042f2:	e000      	b.n	80042f6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80042f4:	2302      	movs	r3, #2
  }
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3730      	adds	r7, #48	@ 0x30
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
	...

08004300 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68da      	ldr	r2, [r3, #12]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	430a      	orrs	r2, r1
 800431c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	689a      	ldr	r2, [r3, #8]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	431a      	orrs	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	4313      	orrs	r3, r2
 800432e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800433a:	f023 030c 	bic.w	r3, r3, #12
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	6812      	ldr	r2, [r2, #0]
 8004342:	68b9      	ldr	r1, [r7, #8]
 8004344:	430b      	orrs	r3, r1
 8004346:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	699a      	ldr	r2, [r3, #24]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	430a      	orrs	r2, r1
 800435c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a2c      	ldr	r2, [pc, #176]	@ (8004414 <UART_SetConfig+0x114>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d103      	bne.n	8004370 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004368:	f7fd fe66 	bl	8002038 <HAL_RCC_GetPCLK2Freq>
 800436c:	60f8      	str	r0, [r7, #12]
 800436e:	e002      	b.n	8004376 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004370:	f7fd fe4e 	bl	8002010 <HAL_RCC_GetPCLK1Freq>
 8004374:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	4613      	mov	r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4413      	add	r3, r2
 800437e:	009a      	lsls	r2, r3, #2
 8004380:	441a      	add	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	fbb2 f3f3 	udiv	r3, r2, r3
 800438c:	4a22      	ldr	r2, [pc, #136]	@ (8004418 <UART_SetConfig+0x118>)
 800438e:	fba2 2303 	umull	r2, r3, r2, r3
 8004392:	095b      	lsrs	r3, r3, #5
 8004394:	0119      	lsls	r1, r3, #4
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	4613      	mov	r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	4413      	add	r3, r2
 800439e:	009a      	lsls	r2, r3, #2
 80043a0:	441a      	add	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80043ac:	4b1a      	ldr	r3, [pc, #104]	@ (8004418 <UART_SetConfig+0x118>)
 80043ae:	fba3 0302 	umull	r0, r3, r3, r2
 80043b2:	095b      	lsrs	r3, r3, #5
 80043b4:	2064      	movs	r0, #100	@ 0x64
 80043b6:	fb00 f303 	mul.w	r3, r0, r3
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	011b      	lsls	r3, r3, #4
 80043be:	3332      	adds	r3, #50	@ 0x32
 80043c0:	4a15      	ldr	r2, [pc, #84]	@ (8004418 <UART_SetConfig+0x118>)
 80043c2:	fba2 2303 	umull	r2, r3, r2, r3
 80043c6:	095b      	lsrs	r3, r3, #5
 80043c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043cc:	4419      	add	r1, r3
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	4613      	mov	r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	4413      	add	r3, r2
 80043d6:	009a      	lsls	r2, r3, #2
 80043d8:	441a      	add	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80043e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004418 <UART_SetConfig+0x118>)
 80043e6:	fba3 0302 	umull	r0, r3, r3, r2
 80043ea:	095b      	lsrs	r3, r3, #5
 80043ec:	2064      	movs	r0, #100	@ 0x64
 80043ee:	fb00 f303 	mul.w	r3, r0, r3
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	011b      	lsls	r3, r3, #4
 80043f6:	3332      	adds	r3, #50	@ 0x32
 80043f8:	4a07      	ldr	r2, [pc, #28]	@ (8004418 <UART_SetConfig+0x118>)
 80043fa:	fba2 2303 	umull	r2, r3, r2, r3
 80043fe:	095b      	lsrs	r3, r3, #5
 8004400:	f003 020f 	and.w	r2, r3, #15
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	440a      	add	r2, r1
 800440a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800440c:	bf00      	nop
 800440e:	3710      	adds	r7, #16
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	40013800 	.word	0x40013800
 8004418:	51eb851f 	.word	0x51eb851f

0800441c <sniprintf>:
 800441c:	b40c      	push	{r2, r3}
 800441e:	b530      	push	{r4, r5, lr}
 8004420:	4b18      	ldr	r3, [pc, #96]	@ (8004484 <sniprintf+0x68>)
 8004422:	1e0c      	subs	r4, r1, #0
 8004424:	681d      	ldr	r5, [r3, #0]
 8004426:	b09d      	sub	sp, #116	@ 0x74
 8004428:	da08      	bge.n	800443c <sniprintf+0x20>
 800442a:	238b      	movs	r3, #139	@ 0x8b
 800442c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004430:	602b      	str	r3, [r5, #0]
 8004432:	b01d      	add	sp, #116	@ 0x74
 8004434:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004438:	b002      	add	sp, #8
 800443a:	4770      	bx	lr
 800443c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004440:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004444:	f04f 0300 	mov.w	r3, #0
 8004448:	931b      	str	r3, [sp, #108]	@ 0x6c
 800444a:	bf0c      	ite	eq
 800444c:	4623      	moveq	r3, r4
 800444e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8004452:	9304      	str	r3, [sp, #16]
 8004454:	9307      	str	r3, [sp, #28]
 8004456:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800445a:	9002      	str	r0, [sp, #8]
 800445c:	9006      	str	r0, [sp, #24]
 800445e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004462:	4628      	mov	r0, r5
 8004464:	ab21      	add	r3, sp, #132	@ 0x84
 8004466:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004468:	a902      	add	r1, sp, #8
 800446a:	9301      	str	r3, [sp, #4]
 800446c:	f000 f992 	bl	8004794 <_svfiprintf_r>
 8004470:	1c43      	adds	r3, r0, #1
 8004472:	bfbc      	itt	lt
 8004474:	238b      	movlt	r3, #139	@ 0x8b
 8004476:	602b      	strlt	r3, [r5, #0]
 8004478:	2c00      	cmp	r4, #0
 800447a:	d0da      	beq.n	8004432 <sniprintf+0x16>
 800447c:	2200      	movs	r2, #0
 800447e:	9b02      	ldr	r3, [sp, #8]
 8004480:	701a      	strb	r2, [r3, #0]
 8004482:	e7d6      	b.n	8004432 <sniprintf+0x16>
 8004484:	20000014 	.word	0x20000014

08004488 <memset>:
 8004488:	4603      	mov	r3, r0
 800448a:	4402      	add	r2, r0
 800448c:	4293      	cmp	r3, r2
 800448e:	d100      	bne.n	8004492 <memset+0xa>
 8004490:	4770      	bx	lr
 8004492:	f803 1b01 	strb.w	r1, [r3], #1
 8004496:	e7f9      	b.n	800448c <memset+0x4>

08004498 <__errno>:
 8004498:	4b01      	ldr	r3, [pc, #4]	@ (80044a0 <__errno+0x8>)
 800449a:	6818      	ldr	r0, [r3, #0]
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	20000014 	.word	0x20000014

080044a4 <__libc_init_array>:
 80044a4:	b570      	push	{r4, r5, r6, lr}
 80044a6:	2600      	movs	r6, #0
 80044a8:	4d0c      	ldr	r5, [pc, #48]	@ (80044dc <__libc_init_array+0x38>)
 80044aa:	4c0d      	ldr	r4, [pc, #52]	@ (80044e0 <__libc_init_array+0x3c>)
 80044ac:	1b64      	subs	r4, r4, r5
 80044ae:	10a4      	asrs	r4, r4, #2
 80044b0:	42a6      	cmp	r6, r4
 80044b2:	d109      	bne.n	80044c8 <__libc_init_array+0x24>
 80044b4:	f000 fc76 	bl	8004da4 <_init>
 80044b8:	2600      	movs	r6, #0
 80044ba:	4d0a      	ldr	r5, [pc, #40]	@ (80044e4 <__libc_init_array+0x40>)
 80044bc:	4c0a      	ldr	r4, [pc, #40]	@ (80044e8 <__libc_init_array+0x44>)
 80044be:	1b64      	subs	r4, r4, r5
 80044c0:	10a4      	asrs	r4, r4, #2
 80044c2:	42a6      	cmp	r6, r4
 80044c4:	d105      	bne.n	80044d2 <__libc_init_array+0x2e>
 80044c6:	bd70      	pop	{r4, r5, r6, pc}
 80044c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80044cc:	4798      	blx	r3
 80044ce:	3601      	adds	r6, #1
 80044d0:	e7ee      	b.n	80044b0 <__libc_init_array+0xc>
 80044d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80044d6:	4798      	blx	r3
 80044d8:	3601      	adds	r6, #1
 80044da:	e7f2      	b.n	80044c2 <__libc_init_array+0x1e>
 80044dc:	08004e70 	.word	0x08004e70
 80044e0:	08004e70 	.word	0x08004e70
 80044e4:	08004e70 	.word	0x08004e70
 80044e8:	08004e74 	.word	0x08004e74

080044ec <__retarget_lock_acquire_recursive>:
 80044ec:	4770      	bx	lr

080044ee <__retarget_lock_release_recursive>:
 80044ee:	4770      	bx	lr

080044f0 <_free_r>:
 80044f0:	b538      	push	{r3, r4, r5, lr}
 80044f2:	4605      	mov	r5, r0
 80044f4:	2900      	cmp	r1, #0
 80044f6:	d040      	beq.n	800457a <_free_r+0x8a>
 80044f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044fc:	1f0c      	subs	r4, r1, #4
 80044fe:	2b00      	cmp	r3, #0
 8004500:	bfb8      	it	lt
 8004502:	18e4      	addlt	r4, r4, r3
 8004504:	f000 f8de 	bl	80046c4 <__malloc_lock>
 8004508:	4a1c      	ldr	r2, [pc, #112]	@ (800457c <_free_r+0x8c>)
 800450a:	6813      	ldr	r3, [r2, #0]
 800450c:	b933      	cbnz	r3, 800451c <_free_r+0x2c>
 800450e:	6063      	str	r3, [r4, #4]
 8004510:	6014      	str	r4, [r2, #0]
 8004512:	4628      	mov	r0, r5
 8004514:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004518:	f000 b8da 	b.w	80046d0 <__malloc_unlock>
 800451c:	42a3      	cmp	r3, r4
 800451e:	d908      	bls.n	8004532 <_free_r+0x42>
 8004520:	6820      	ldr	r0, [r4, #0]
 8004522:	1821      	adds	r1, r4, r0
 8004524:	428b      	cmp	r3, r1
 8004526:	bf01      	itttt	eq
 8004528:	6819      	ldreq	r1, [r3, #0]
 800452a:	685b      	ldreq	r3, [r3, #4]
 800452c:	1809      	addeq	r1, r1, r0
 800452e:	6021      	streq	r1, [r4, #0]
 8004530:	e7ed      	b.n	800450e <_free_r+0x1e>
 8004532:	461a      	mov	r2, r3
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	b10b      	cbz	r3, 800453c <_free_r+0x4c>
 8004538:	42a3      	cmp	r3, r4
 800453a:	d9fa      	bls.n	8004532 <_free_r+0x42>
 800453c:	6811      	ldr	r1, [r2, #0]
 800453e:	1850      	adds	r0, r2, r1
 8004540:	42a0      	cmp	r0, r4
 8004542:	d10b      	bne.n	800455c <_free_r+0x6c>
 8004544:	6820      	ldr	r0, [r4, #0]
 8004546:	4401      	add	r1, r0
 8004548:	1850      	adds	r0, r2, r1
 800454a:	4283      	cmp	r3, r0
 800454c:	6011      	str	r1, [r2, #0]
 800454e:	d1e0      	bne.n	8004512 <_free_r+0x22>
 8004550:	6818      	ldr	r0, [r3, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	4408      	add	r0, r1
 8004556:	6010      	str	r0, [r2, #0]
 8004558:	6053      	str	r3, [r2, #4]
 800455a:	e7da      	b.n	8004512 <_free_r+0x22>
 800455c:	d902      	bls.n	8004564 <_free_r+0x74>
 800455e:	230c      	movs	r3, #12
 8004560:	602b      	str	r3, [r5, #0]
 8004562:	e7d6      	b.n	8004512 <_free_r+0x22>
 8004564:	6820      	ldr	r0, [r4, #0]
 8004566:	1821      	adds	r1, r4, r0
 8004568:	428b      	cmp	r3, r1
 800456a:	bf01      	itttt	eq
 800456c:	6819      	ldreq	r1, [r3, #0]
 800456e:	685b      	ldreq	r3, [r3, #4]
 8004570:	1809      	addeq	r1, r1, r0
 8004572:	6021      	streq	r1, [r4, #0]
 8004574:	6063      	str	r3, [r4, #4]
 8004576:	6054      	str	r4, [r2, #4]
 8004578:	e7cb      	b.n	8004512 <_free_r+0x22>
 800457a:	bd38      	pop	{r3, r4, r5, pc}
 800457c:	200002b8 	.word	0x200002b8

08004580 <sbrk_aligned>:
 8004580:	b570      	push	{r4, r5, r6, lr}
 8004582:	4e0f      	ldr	r6, [pc, #60]	@ (80045c0 <sbrk_aligned+0x40>)
 8004584:	460c      	mov	r4, r1
 8004586:	6831      	ldr	r1, [r6, #0]
 8004588:	4605      	mov	r5, r0
 800458a:	b911      	cbnz	r1, 8004592 <sbrk_aligned+0x12>
 800458c:	f000 fba8 	bl	8004ce0 <_sbrk_r>
 8004590:	6030      	str	r0, [r6, #0]
 8004592:	4621      	mov	r1, r4
 8004594:	4628      	mov	r0, r5
 8004596:	f000 fba3 	bl	8004ce0 <_sbrk_r>
 800459a:	1c43      	adds	r3, r0, #1
 800459c:	d103      	bne.n	80045a6 <sbrk_aligned+0x26>
 800459e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80045a2:	4620      	mov	r0, r4
 80045a4:	bd70      	pop	{r4, r5, r6, pc}
 80045a6:	1cc4      	adds	r4, r0, #3
 80045a8:	f024 0403 	bic.w	r4, r4, #3
 80045ac:	42a0      	cmp	r0, r4
 80045ae:	d0f8      	beq.n	80045a2 <sbrk_aligned+0x22>
 80045b0:	1a21      	subs	r1, r4, r0
 80045b2:	4628      	mov	r0, r5
 80045b4:	f000 fb94 	bl	8004ce0 <_sbrk_r>
 80045b8:	3001      	adds	r0, #1
 80045ba:	d1f2      	bne.n	80045a2 <sbrk_aligned+0x22>
 80045bc:	e7ef      	b.n	800459e <sbrk_aligned+0x1e>
 80045be:	bf00      	nop
 80045c0:	200002b4 	.word	0x200002b4

080045c4 <_malloc_r>:
 80045c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045c8:	1ccd      	adds	r5, r1, #3
 80045ca:	f025 0503 	bic.w	r5, r5, #3
 80045ce:	3508      	adds	r5, #8
 80045d0:	2d0c      	cmp	r5, #12
 80045d2:	bf38      	it	cc
 80045d4:	250c      	movcc	r5, #12
 80045d6:	2d00      	cmp	r5, #0
 80045d8:	4606      	mov	r6, r0
 80045da:	db01      	blt.n	80045e0 <_malloc_r+0x1c>
 80045dc:	42a9      	cmp	r1, r5
 80045de:	d904      	bls.n	80045ea <_malloc_r+0x26>
 80045e0:	230c      	movs	r3, #12
 80045e2:	6033      	str	r3, [r6, #0]
 80045e4:	2000      	movs	r0, #0
 80045e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80046c0 <_malloc_r+0xfc>
 80045ee:	f000 f869 	bl	80046c4 <__malloc_lock>
 80045f2:	f8d8 3000 	ldr.w	r3, [r8]
 80045f6:	461c      	mov	r4, r3
 80045f8:	bb44      	cbnz	r4, 800464c <_malloc_r+0x88>
 80045fa:	4629      	mov	r1, r5
 80045fc:	4630      	mov	r0, r6
 80045fe:	f7ff ffbf 	bl	8004580 <sbrk_aligned>
 8004602:	1c43      	adds	r3, r0, #1
 8004604:	4604      	mov	r4, r0
 8004606:	d158      	bne.n	80046ba <_malloc_r+0xf6>
 8004608:	f8d8 4000 	ldr.w	r4, [r8]
 800460c:	4627      	mov	r7, r4
 800460e:	2f00      	cmp	r7, #0
 8004610:	d143      	bne.n	800469a <_malloc_r+0xd6>
 8004612:	2c00      	cmp	r4, #0
 8004614:	d04b      	beq.n	80046ae <_malloc_r+0xea>
 8004616:	6823      	ldr	r3, [r4, #0]
 8004618:	4639      	mov	r1, r7
 800461a:	4630      	mov	r0, r6
 800461c:	eb04 0903 	add.w	r9, r4, r3
 8004620:	f000 fb5e 	bl	8004ce0 <_sbrk_r>
 8004624:	4581      	cmp	r9, r0
 8004626:	d142      	bne.n	80046ae <_malloc_r+0xea>
 8004628:	6821      	ldr	r1, [r4, #0]
 800462a:	4630      	mov	r0, r6
 800462c:	1a6d      	subs	r5, r5, r1
 800462e:	4629      	mov	r1, r5
 8004630:	f7ff ffa6 	bl	8004580 <sbrk_aligned>
 8004634:	3001      	adds	r0, #1
 8004636:	d03a      	beq.n	80046ae <_malloc_r+0xea>
 8004638:	6823      	ldr	r3, [r4, #0]
 800463a:	442b      	add	r3, r5
 800463c:	6023      	str	r3, [r4, #0]
 800463e:	f8d8 3000 	ldr.w	r3, [r8]
 8004642:	685a      	ldr	r2, [r3, #4]
 8004644:	bb62      	cbnz	r2, 80046a0 <_malloc_r+0xdc>
 8004646:	f8c8 7000 	str.w	r7, [r8]
 800464a:	e00f      	b.n	800466c <_malloc_r+0xa8>
 800464c:	6822      	ldr	r2, [r4, #0]
 800464e:	1b52      	subs	r2, r2, r5
 8004650:	d420      	bmi.n	8004694 <_malloc_r+0xd0>
 8004652:	2a0b      	cmp	r2, #11
 8004654:	d917      	bls.n	8004686 <_malloc_r+0xc2>
 8004656:	1961      	adds	r1, r4, r5
 8004658:	42a3      	cmp	r3, r4
 800465a:	6025      	str	r5, [r4, #0]
 800465c:	bf18      	it	ne
 800465e:	6059      	strne	r1, [r3, #4]
 8004660:	6863      	ldr	r3, [r4, #4]
 8004662:	bf08      	it	eq
 8004664:	f8c8 1000 	streq.w	r1, [r8]
 8004668:	5162      	str	r2, [r4, r5]
 800466a:	604b      	str	r3, [r1, #4]
 800466c:	4630      	mov	r0, r6
 800466e:	f000 f82f 	bl	80046d0 <__malloc_unlock>
 8004672:	f104 000b 	add.w	r0, r4, #11
 8004676:	1d23      	adds	r3, r4, #4
 8004678:	f020 0007 	bic.w	r0, r0, #7
 800467c:	1ac2      	subs	r2, r0, r3
 800467e:	bf1c      	itt	ne
 8004680:	1a1b      	subne	r3, r3, r0
 8004682:	50a3      	strne	r3, [r4, r2]
 8004684:	e7af      	b.n	80045e6 <_malloc_r+0x22>
 8004686:	6862      	ldr	r2, [r4, #4]
 8004688:	42a3      	cmp	r3, r4
 800468a:	bf0c      	ite	eq
 800468c:	f8c8 2000 	streq.w	r2, [r8]
 8004690:	605a      	strne	r2, [r3, #4]
 8004692:	e7eb      	b.n	800466c <_malloc_r+0xa8>
 8004694:	4623      	mov	r3, r4
 8004696:	6864      	ldr	r4, [r4, #4]
 8004698:	e7ae      	b.n	80045f8 <_malloc_r+0x34>
 800469a:	463c      	mov	r4, r7
 800469c:	687f      	ldr	r7, [r7, #4]
 800469e:	e7b6      	b.n	800460e <_malloc_r+0x4a>
 80046a0:	461a      	mov	r2, r3
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	42a3      	cmp	r3, r4
 80046a6:	d1fb      	bne.n	80046a0 <_malloc_r+0xdc>
 80046a8:	2300      	movs	r3, #0
 80046aa:	6053      	str	r3, [r2, #4]
 80046ac:	e7de      	b.n	800466c <_malloc_r+0xa8>
 80046ae:	230c      	movs	r3, #12
 80046b0:	4630      	mov	r0, r6
 80046b2:	6033      	str	r3, [r6, #0]
 80046b4:	f000 f80c 	bl	80046d0 <__malloc_unlock>
 80046b8:	e794      	b.n	80045e4 <_malloc_r+0x20>
 80046ba:	6005      	str	r5, [r0, #0]
 80046bc:	e7d6      	b.n	800466c <_malloc_r+0xa8>
 80046be:	bf00      	nop
 80046c0:	200002b8 	.word	0x200002b8

080046c4 <__malloc_lock>:
 80046c4:	4801      	ldr	r0, [pc, #4]	@ (80046cc <__malloc_lock+0x8>)
 80046c6:	f7ff bf11 	b.w	80044ec <__retarget_lock_acquire_recursive>
 80046ca:	bf00      	nop
 80046cc:	200002b0 	.word	0x200002b0

080046d0 <__malloc_unlock>:
 80046d0:	4801      	ldr	r0, [pc, #4]	@ (80046d8 <__malloc_unlock+0x8>)
 80046d2:	f7ff bf0c 	b.w	80044ee <__retarget_lock_release_recursive>
 80046d6:	bf00      	nop
 80046d8:	200002b0 	.word	0x200002b0

080046dc <__ssputs_r>:
 80046dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046e0:	461f      	mov	r7, r3
 80046e2:	688e      	ldr	r6, [r1, #8]
 80046e4:	4682      	mov	sl, r0
 80046e6:	42be      	cmp	r6, r7
 80046e8:	460c      	mov	r4, r1
 80046ea:	4690      	mov	r8, r2
 80046ec:	680b      	ldr	r3, [r1, #0]
 80046ee:	d82d      	bhi.n	800474c <__ssputs_r+0x70>
 80046f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80046f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80046f8:	d026      	beq.n	8004748 <__ssputs_r+0x6c>
 80046fa:	6965      	ldr	r5, [r4, #20]
 80046fc:	6909      	ldr	r1, [r1, #16]
 80046fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004702:	eba3 0901 	sub.w	r9, r3, r1
 8004706:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800470a:	1c7b      	adds	r3, r7, #1
 800470c:	444b      	add	r3, r9
 800470e:	106d      	asrs	r5, r5, #1
 8004710:	429d      	cmp	r5, r3
 8004712:	bf38      	it	cc
 8004714:	461d      	movcc	r5, r3
 8004716:	0553      	lsls	r3, r2, #21
 8004718:	d527      	bpl.n	800476a <__ssputs_r+0x8e>
 800471a:	4629      	mov	r1, r5
 800471c:	f7ff ff52 	bl	80045c4 <_malloc_r>
 8004720:	4606      	mov	r6, r0
 8004722:	b360      	cbz	r0, 800477e <__ssputs_r+0xa2>
 8004724:	464a      	mov	r2, r9
 8004726:	6921      	ldr	r1, [r4, #16]
 8004728:	f000 faf8 	bl	8004d1c <memcpy>
 800472c:	89a3      	ldrh	r3, [r4, #12]
 800472e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004732:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004736:	81a3      	strh	r3, [r4, #12]
 8004738:	6126      	str	r6, [r4, #16]
 800473a:	444e      	add	r6, r9
 800473c:	6026      	str	r6, [r4, #0]
 800473e:	463e      	mov	r6, r7
 8004740:	6165      	str	r5, [r4, #20]
 8004742:	eba5 0509 	sub.w	r5, r5, r9
 8004746:	60a5      	str	r5, [r4, #8]
 8004748:	42be      	cmp	r6, r7
 800474a:	d900      	bls.n	800474e <__ssputs_r+0x72>
 800474c:	463e      	mov	r6, r7
 800474e:	4632      	mov	r2, r6
 8004750:	4641      	mov	r1, r8
 8004752:	6820      	ldr	r0, [r4, #0]
 8004754:	f000 faaa 	bl	8004cac <memmove>
 8004758:	2000      	movs	r0, #0
 800475a:	68a3      	ldr	r3, [r4, #8]
 800475c:	1b9b      	subs	r3, r3, r6
 800475e:	60a3      	str	r3, [r4, #8]
 8004760:	6823      	ldr	r3, [r4, #0]
 8004762:	4433      	add	r3, r6
 8004764:	6023      	str	r3, [r4, #0]
 8004766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800476a:	462a      	mov	r2, r5
 800476c:	f000 fae4 	bl	8004d38 <_realloc_r>
 8004770:	4606      	mov	r6, r0
 8004772:	2800      	cmp	r0, #0
 8004774:	d1e0      	bne.n	8004738 <__ssputs_r+0x5c>
 8004776:	4650      	mov	r0, sl
 8004778:	6921      	ldr	r1, [r4, #16]
 800477a:	f7ff feb9 	bl	80044f0 <_free_r>
 800477e:	230c      	movs	r3, #12
 8004780:	f8ca 3000 	str.w	r3, [sl]
 8004784:	89a3      	ldrh	r3, [r4, #12]
 8004786:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800478a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800478e:	81a3      	strh	r3, [r4, #12]
 8004790:	e7e9      	b.n	8004766 <__ssputs_r+0x8a>
	...

08004794 <_svfiprintf_r>:
 8004794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004798:	4698      	mov	r8, r3
 800479a:	898b      	ldrh	r3, [r1, #12]
 800479c:	4607      	mov	r7, r0
 800479e:	061b      	lsls	r3, r3, #24
 80047a0:	460d      	mov	r5, r1
 80047a2:	4614      	mov	r4, r2
 80047a4:	b09d      	sub	sp, #116	@ 0x74
 80047a6:	d510      	bpl.n	80047ca <_svfiprintf_r+0x36>
 80047a8:	690b      	ldr	r3, [r1, #16]
 80047aa:	b973      	cbnz	r3, 80047ca <_svfiprintf_r+0x36>
 80047ac:	2140      	movs	r1, #64	@ 0x40
 80047ae:	f7ff ff09 	bl	80045c4 <_malloc_r>
 80047b2:	6028      	str	r0, [r5, #0]
 80047b4:	6128      	str	r0, [r5, #16]
 80047b6:	b930      	cbnz	r0, 80047c6 <_svfiprintf_r+0x32>
 80047b8:	230c      	movs	r3, #12
 80047ba:	603b      	str	r3, [r7, #0]
 80047bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80047c0:	b01d      	add	sp, #116	@ 0x74
 80047c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047c6:	2340      	movs	r3, #64	@ 0x40
 80047c8:	616b      	str	r3, [r5, #20]
 80047ca:	2300      	movs	r3, #0
 80047cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80047ce:	2320      	movs	r3, #32
 80047d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80047d4:	2330      	movs	r3, #48	@ 0x30
 80047d6:	f04f 0901 	mov.w	r9, #1
 80047da:	f8cd 800c 	str.w	r8, [sp, #12]
 80047de:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004978 <_svfiprintf_r+0x1e4>
 80047e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80047e6:	4623      	mov	r3, r4
 80047e8:	469a      	mov	sl, r3
 80047ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047ee:	b10a      	cbz	r2, 80047f4 <_svfiprintf_r+0x60>
 80047f0:	2a25      	cmp	r2, #37	@ 0x25
 80047f2:	d1f9      	bne.n	80047e8 <_svfiprintf_r+0x54>
 80047f4:	ebba 0b04 	subs.w	fp, sl, r4
 80047f8:	d00b      	beq.n	8004812 <_svfiprintf_r+0x7e>
 80047fa:	465b      	mov	r3, fp
 80047fc:	4622      	mov	r2, r4
 80047fe:	4629      	mov	r1, r5
 8004800:	4638      	mov	r0, r7
 8004802:	f7ff ff6b 	bl	80046dc <__ssputs_r>
 8004806:	3001      	adds	r0, #1
 8004808:	f000 80a7 	beq.w	800495a <_svfiprintf_r+0x1c6>
 800480c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800480e:	445a      	add	r2, fp
 8004810:	9209      	str	r2, [sp, #36]	@ 0x24
 8004812:	f89a 3000 	ldrb.w	r3, [sl]
 8004816:	2b00      	cmp	r3, #0
 8004818:	f000 809f 	beq.w	800495a <_svfiprintf_r+0x1c6>
 800481c:	2300      	movs	r3, #0
 800481e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004822:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004826:	f10a 0a01 	add.w	sl, sl, #1
 800482a:	9304      	str	r3, [sp, #16]
 800482c:	9307      	str	r3, [sp, #28]
 800482e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004832:	931a      	str	r3, [sp, #104]	@ 0x68
 8004834:	4654      	mov	r4, sl
 8004836:	2205      	movs	r2, #5
 8004838:	f814 1b01 	ldrb.w	r1, [r4], #1
 800483c:	484e      	ldr	r0, [pc, #312]	@ (8004978 <_svfiprintf_r+0x1e4>)
 800483e:	f000 fa5f 	bl	8004d00 <memchr>
 8004842:	9a04      	ldr	r2, [sp, #16]
 8004844:	b9d8      	cbnz	r0, 800487e <_svfiprintf_r+0xea>
 8004846:	06d0      	lsls	r0, r2, #27
 8004848:	bf44      	itt	mi
 800484a:	2320      	movmi	r3, #32
 800484c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004850:	0711      	lsls	r1, r2, #28
 8004852:	bf44      	itt	mi
 8004854:	232b      	movmi	r3, #43	@ 0x2b
 8004856:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800485a:	f89a 3000 	ldrb.w	r3, [sl]
 800485e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004860:	d015      	beq.n	800488e <_svfiprintf_r+0xfa>
 8004862:	4654      	mov	r4, sl
 8004864:	2000      	movs	r0, #0
 8004866:	f04f 0c0a 	mov.w	ip, #10
 800486a:	9a07      	ldr	r2, [sp, #28]
 800486c:	4621      	mov	r1, r4
 800486e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004872:	3b30      	subs	r3, #48	@ 0x30
 8004874:	2b09      	cmp	r3, #9
 8004876:	d94b      	bls.n	8004910 <_svfiprintf_r+0x17c>
 8004878:	b1b0      	cbz	r0, 80048a8 <_svfiprintf_r+0x114>
 800487a:	9207      	str	r2, [sp, #28]
 800487c:	e014      	b.n	80048a8 <_svfiprintf_r+0x114>
 800487e:	eba0 0308 	sub.w	r3, r0, r8
 8004882:	fa09 f303 	lsl.w	r3, r9, r3
 8004886:	4313      	orrs	r3, r2
 8004888:	46a2      	mov	sl, r4
 800488a:	9304      	str	r3, [sp, #16]
 800488c:	e7d2      	b.n	8004834 <_svfiprintf_r+0xa0>
 800488e:	9b03      	ldr	r3, [sp, #12]
 8004890:	1d19      	adds	r1, r3, #4
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	9103      	str	r1, [sp, #12]
 8004896:	2b00      	cmp	r3, #0
 8004898:	bfbb      	ittet	lt
 800489a:	425b      	neglt	r3, r3
 800489c:	f042 0202 	orrlt.w	r2, r2, #2
 80048a0:	9307      	strge	r3, [sp, #28]
 80048a2:	9307      	strlt	r3, [sp, #28]
 80048a4:	bfb8      	it	lt
 80048a6:	9204      	strlt	r2, [sp, #16]
 80048a8:	7823      	ldrb	r3, [r4, #0]
 80048aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80048ac:	d10a      	bne.n	80048c4 <_svfiprintf_r+0x130>
 80048ae:	7863      	ldrb	r3, [r4, #1]
 80048b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80048b2:	d132      	bne.n	800491a <_svfiprintf_r+0x186>
 80048b4:	9b03      	ldr	r3, [sp, #12]
 80048b6:	3402      	adds	r4, #2
 80048b8:	1d1a      	adds	r2, r3, #4
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	9203      	str	r2, [sp, #12]
 80048be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80048c2:	9305      	str	r3, [sp, #20]
 80048c4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800497c <_svfiprintf_r+0x1e8>
 80048c8:	2203      	movs	r2, #3
 80048ca:	4650      	mov	r0, sl
 80048cc:	7821      	ldrb	r1, [r4, #0]
 80048ce:	f000 fa17 	bl	8004d00 <memchr>
 80048d2:	b138      	cbz	r0, 80048e4 <_svfiprintf_r+0x150>
 80048d4:	2240      	movs	r2, #64	@ 0x40
 80048d6:	9b04      	ldr	r3, [sp, #16]
 80048d8:	eba0 000a 	sub.w	r0, r0, sl
 80048dc:	4082      	lsls	r2, r0
 80048de:	4313      	orrs	r3, r2
 80048e0:	3401      	adds	r4, #1
 80048e2:	9304      	str	r3, [sp, #16]
 80048e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048e8:	2206      	movs	r2, #6
 80048ea:	4825      	ldr	r0, [pc, #148]	@ (8004980 <_svfiprintf_r+0x1ec>)
 80048ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80048f0:	f000 fa06 	bl	8004d00 <memchr>
 80048f4:	2800      	cmp	r0, #0
 80048f6:	d036      	beq.n	8004966 <_svfiprintf_r+0x1d2>
 80048f8:	4b22      	ldr	r3, [pc, #136]	@ (8004984 <_svfiprintf_r+0x1f0>)
 80048fa:	bb1b      	cbnz	r3, 8004944 <_svfiprintf_r+0x1b0>
 80048fc:	9b03      	ldr	r3, [sp, #12]
 80048fe:	3307      	adds	r3, #7
 8004900:	f023 0307 	bic.w	r3, r3, #7
 8004904:	3308      	adds	r3, #8
 8004906:	9303      	str	r3, [sp, #12]
 8004908:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800490a:	4433      	add	r3, r6
 800490c:	9309      	str	r3, [sp, #36]	@ 0x24
 800490e:	e76a      	b.n	80047e6 <_svfiprintf_r+0x52>
 8004910:	460c      	mov	r4, r1
 8004912:	2001      	movs	r0, #1
 8004914:	fb0c 3202 	mla	r2, ip, r2, r3
 8004918:	e7a8      	b.n	800486c <_svfiprintf_r+0xd8>
 800491a:	2300      	movs	r3, #0
 800491c:	f04f 0c0a 	mov.w	ip, #10
 8004920:	4619      	mov	r1, r3
 8004922:	3401      	adds	r4, #1
 8004924:	9305      	str	r3, [sp, #20]
 8004926:	4620      	mov	r0, r4
 8004928:	f810 2b01 	ldrb.w	r2, [r0], #1
 800492c:	3a30      	subs	r2, #48	@ 0x30
 800492e:	2a09      	cmp	r2, #9
 8004930:	d903      	bls.n	800493a <_svfiprintf_r+0x1a6>
 8004932:	2b00      	cmp	r3, #0
 8004934:	d0c6      	beq.n	80048c4 <_svfiprintf_r+0x130>
 8004936:	9105      	str	r1, [sp, #20]
 8004938:	e7c4      	b.n	80048c4 <_svfiprintf_r+0x130>
 800493a:	4604      	mov	r4, r0
 800493c:	2301      	movs	r3, #1
 800493e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004942:	e7f0      	b.n	8004926 <_svfiprintf_r+0x192>
 8004944:	ab03      	add	r3, sp, #12
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	462a      	mov	r2, r5
 800494a:	4638      	mov	r0, r7
 800494c:	4b0e      	ldr	r3, [pc, #56]	@ (8004988 <_svfiprintf_r+0x1f4>)
 800494e:	a904      	add	r1, sp, #16
 8004950:	f3af 8000 	nop.w
 8004954:	1c42      	adds	r2, r0, #1
 8004956:	4606      	mov	r6, r0
 8004958:	d1d6      	bne.n	8004908 <_svfiprintf_r+0x174>
 800495a:	89ab      	ldrh	r3, [r5, #12]
 800495c:	065b      	lsls	r3, r3, #25
 800495e:	f53f af2d 	bmi.w	80047bc <_svfiprintf_r+0x28>
 8004962:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004964:	e72c      	b.n	80047c0 <_svfiprintf_r+0x2c>
 8004966:	ab03      	add	r3, sp, #12
 8004968:	9300      	str	r3, [sp, #0]
 800496a:	462a      	mov	r2, r5
 800496c:	4638      	mov	r0, r7
 800496e:	4b06      	ldr	r3, [pc, #24]	@ (8004988 <_svfiprintf_r+0x1f4>)
 8004970:	a904      	add	r1, sp, #16
 8004972:	f000 f87d 	bl	8004a70 <_printf_i>
 8004976:	e7ed      	b.n	8004954 <_svfiprintf_r+0x1c0>
 8004978:	08004e32 	.word	0x08004e32
 800497c:	08004e38 	.word	0x08004e38
 8004980:	08004e3c 	.word	0x08004e3c
 8004984:	00000000 	.word	0x00000000
 8004988:	080046dd 	.word	0x080046dd

0800498c <_printf_common>:
 800498c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004990:	4616      	mov	r6, r2
 8004992:	4698      	mov	r8, r3
 8004994:	688a      	ldr	r2, [r1, #8]
 8004996:	690b      	ldr	r3, [r1, #16]
 8004998:	4607      	mov	r7, r0
 800499a:	4293      	cmp	r3, r2
 800499c:	bfb8      	it	lt
 800499e:	4613      	movlt	r3, r2
 80049a0:	6033      	str	r3, [r6, #0]
 80049a2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80049a6:	460c      	mov	r4, r1
 80049a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80049ac:	b10a      	cbz	r2, 80049b2 <_printf_common+0x26>
 80049ae:	3301      	adds	r3, #1
 80049b0:	6033      	str	r3, [r6, #0]
 80049b2:	6823      	ldr	r3, [r4, #0]
 80049b4:	0699      	lsls	r1, r3, #26
 80049b6:	bf42      	ittt	mi
 80049b8:	6833      	ldrmi	r3, [r6, #0]
 80049ba:	3302      	addmi	r3, #2
 80049bc:	6033      	strmi	r3, [r6, #0]
 80049be:	6825      	ldr	r5, [r4, #0]
 80049c0:	f015 0506 	ands.w	r5, r5, #6
 80049c4:	d106      	bne.n	80049d4 <_printf_common+0x48>
 80049c6:	f104 0a19 	add.w	sl, r4, #25
 80049ca:	68e3      	ldr	r3, [r4, #12]
 80049cc:	6832      	ldr	r2, [r6, #0]
 80049ce:	1a9b      	subs	r3, r3, r2
 80049d0:	42ab      	cmp	r3, r5
 80049d2:	dc2b      	bgt.n	8004a2c <_printf_common+0xa0>
 80049d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80049d8:	6822      	ldr	r2, [r4, #0]
 80049da:	3b00      	subs	r3, #0
 80049dc:	bf18      	it	ne
 80049de:	2301      	movne	r3, #1
 80049e0:	0692      	lsls	r2, r2, #26
 80049e2:	d430      	bmi.n	8004a46 <_printf_common+0xba>
 80049e4:	4641      	mov	r1, r8
 80049e6:	4638      	mov	r0, r7
 80049e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80049ec:	47c8      	blx	r9
 80049ee:	3001      	adds	r0, #1
 80049f0:	d023      	beq.n	8004a3a <_printf_common+0xae>
 80049f2:	6823      	ldr	r3, [r4, #0]
 80049f4:	6922      	ldr	r2, [r4, #16]
 80049f6:	f003 0306 	and.w	r3, r3, #6
 80049fa:	2b04      	cmp	r3, #4
 80049fc:	bf14      	ite	ne
 80049fe:	2500      	movne	r5, #0
 8004a00:	6833      	ldreq	r3, [r6, #0]
 8004a02:	f04f 0600 	mov.w	r6, #0
 8004a06:	bf08      	it	eq
 8004a08:	68e5      	ldreq	r5, [r4, #12]
 8004a0a:	f104 041a 	add.w	r4, r4, #26
 8004a0e:	bf08      	it	eq
 8004a10:	1aed      	subeq	r5, r5, r3
 8004a12:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004a16:	bf08      	it	eq
 8004a18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	bfc4      	itt	gt
 8004a20:	1a9b      	subgt	r3, r3, r2
 8004a22:	18ed      	addgt	r5, r5, r3
 8004a24:	42b5      	cmp	r5, r6
 8004a26:	d11a      	bne.n	8004a5e <_printf_common+0xd2>
 8004a28:	2000      	movs	r0, #0
 8004a2a:	e008      	b.n	8004a3e <_printf_common+0xb2>
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	4652      	mov	r2, sl
 8004a30:	4641      	mov	r1, r8
 8004a32:	4638      	mov	r0, r7
 8004a34:	47c8      	blx	r9
 8004a36:	3001      	adds	r0, #1
 8004a38:	d103      	bne.n	8004a42 <_printf_common+0xb6>
 8004a3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a42:	3501      	adds	r5, #1
 8004a44:	e7c1      	b.n	80049ca <_printf_common+0x3e>
 8004a46:	2030      	movs	r0, #48	@ 0x30
 8004a48:	18e1      	adds	r1, r4, r3
 8004a4a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004a4e:	1c5a      	adds	r2, r3, #1
 8004a50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004a54:	4422      	add	r2, r4
 8004a56:	3302      	adds	r3, #2
 8004a58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004a5c:	e7c2      	b.n	80049e4 <_printf_common+0x58>
 8004a5e:	2301      	movs	r3, #1
 8004a60:	4622      	mov	r2, r4
 8004a62:	4641      	mov	r1, r8
 8004a64:	4638      	mov	r0, r7
 8004a66:	47c8      	blx	r9
 8004a68:	3001      	adds	r0, #1
 8004a6a:	d0e6      	beq.n	8004a3a <_printf_common+0xae>
 8004a6c:	3601      	adds	r6, #1
 8004a6e:	e7d9      	b.n	8004a24 <_printf_common+0x98>

08004a70 <_printf_i>:
 8004a70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a74:	7e0f      	ldrb	r7, [r1, #24]
 8004a76:	4691      	mov	r9, r2
 8004a78:	2f78      	cmp	r7, #120	@ 0x78
 8004a7a:	4680      	mov	r8, r0
 8004a7c:	460c      	mov	r4, r1
 8004a7e:	469a      	mov	sl, r3
 8004a80:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004a82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004a86:	d807      	bhi.n	8004a98 <_printf_i+0x28>
 8004a88:	2f62      	cmp	r7, #98	@ 0x62
 8004a8a:	d80a      	bhi.n	8004aa2 <_printf_i+0x32>
 8004a8c:	2f00      	cmp	r7, #0
 8004a8e:	f000 80d1 	beq.w	8004c34 <_printf_i+0x1c4>
 8004a92:	2f58      	cmp	r7, #88	@ 0x58
 8004a94:	f000 80b8 	beq.w	8004c08 <_printf_i+0x198>
 8004a98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004aa0:	e03a      	b.n	8004b18 <_printf_i+0xa8>
 8004aa2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004aa6:	2b15      	cmp	r3, #21
 8004aa8:	d8f6      	bhi.n	8004a98 <_printf_i+0x28>
 8004aaa:	a101      	add	r1, pc, #4	@ (adr r1, 8004ab0 <_printf_i+0x40>)
 8004aac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ab0:	08004b09 	.word	0x08004b09
 8004ab4:	08004b1d 	.word	0x08004b1d
 8004ab8:	08004a99 	.word	0x08004a99
 8004abc:	08004a99 	.word	0x08004a99
 8004ac0:	08004a99 	.word	0x08004a99
 8004ac4:	08004a99 	.word	0x08004a99
 8004ac8:	08004b1d 	.word	0x08004b1d
 8004acc:	08004a99 	.word	0x08004a99
 8004ad0:	08004a99 	.word	0x08004a99
 8004ad4:	08004a99 	.word	0x08004a99
 8004ad8:	08004a99 	.word	0x08004a99
 8004adc:	08004c1b 	.word	0x08004c1b
 8004ae0:	08004b47 	.word	0x08004b47
 8004ae4:	08004bd5 	.word	0x08004bd5
 8004ae8:	08004a99 	.word	0x08004a99
 8004aec:	08004a99 	.word	0x08004a99
 8004af0:	08004c3d 	.word	0x08004c3d
 8004af4:	08004a99 	.word	0x08004a99
 8004af8:	08004b47 	.word	0x08004b47
 8004afc:	08004a99 	.word	0x08004a99
 8004b00:	08004a99 	.word	0x08004a99
 8004b04:	08004bdd 	.word	0x08004bdd
 8004b08:	6833      	ldr	r3, [r6, #0]
 8004b0a:	1d1a      	adds	r2, r3, #4
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	6032      	str	r2, [r6, #0]
 8004b10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e09c      	b.n	8004c56 <_printf_i+0x1e6>
 8004b1c:	6833      	ldr	r3, [r6, #0]
 8004b1e:	6820      	ldr	r0, [r4, #0]
 8004b20:	1d19      	adds	r1, r3, #4
 8004b22:	6031      	str	r1, [r6, #0]
 8004b24:	0606      	lsls	r6, r0, #24
 8004b26:	d501      	bpl.n	8004b2c <_printf_i+0xbc>
 8004b28:	681d      	ldr	r5, [r3, #0]
 8004b2a:	e003      	b.n	8004b34 <_printf_i+0xc4>
 8004b2c:	0645      	lsls	r5, r0, #25
 8004b2e:	d5fb      	bpl.n	8004b28 <_printf_i+0xb8>
 8004b30:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004b34:	2d00      	cmp	r5, #0
 8004b36:	da03      	bge.n	8004b40 <_printf_i+0xd0>
 8004b38:	232d      	movs	r3, #45	@ 0x2d
 8004b3a:	426d      	negs	r5, r5
 8004b3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b40:	230a      	movs	r3, #10
 8004b42:	4858      	ldr	r0, [pc, #352]	@ (8004ca4 <_printf_i+0x234>)
 8004b44:	e011      	b.n	8004b6a <_printf_i+0xfa>
 8004b46:	6821      	ldr	r1, [r4, #0]
 8004b48:	6833      	ldr	r3, [r6, #0]
 8004b4a:	0608      	lsls	r0, r1, #24
 8004b4c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004b50:	d402      	bmi.n	8004b58 <_printf_i+0xe8>
 8004b52:	0649      	lsls	r1, r1, #25
 8004b54:	bf48      	it	mi
 8004b56:	b2ad      	uxthmi	r5, r5
 8004b58:	2f6f      	cmp	r7, #111	@ 0x6f
 8004b5a:	6033      	str	r3, [r6, #0]
 8004b5c:	bf14      	ite	ne
 8004b5e:	230a      	movne	r3, #10
 8004b60:	2308      	moveq	r3, #8
 8004b62:	4850      	ldr	r0, [pc, #320]	@ (8004ca4 <_printf_i+0x234>)
 8004b64:	2100      	movs	r1, #0
 8004b66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004b6a:	6866      	ldr	r6, [r4, #4]
 8004b6c:	2e00      	cmp	r6, #0
 8004b6e:	60a6      	str	r6, [r4, #8]
 8004b70:	db05      	blt.n	8004b7e <_printf_i+0x10e>
 8004b72:	6821      	ldr	r1, [r4, #0]
 8004b74:	432e      	orrs	r6, r5
 8004b76:	f021 0104 	bic.w	r1, r1, #4
 8004b7a:	6021      	str	r1, [r4, #0]
 8004b7c:	d04b      	beq.n	8004c16 <_printf_i+0x1a6>
 8004b7e:	4616      	mov	r6, r2
 8004b80:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b84:	fb03 5711 	mls	r7, r3, r1, r5
 8004b88:	5dc7      	ldrb	r7, [r0, r7]
 8004b8a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b8e:	462f      	mov	r7, r5
 8004b90:	42bb      	cmp	r3, r7
 8004b92:	460d      	mov	r5, r1
 8004b94:	d9f4      	bls.n	8004b80 <_printf_i+0x110>
 8004b96:	2b08      	cmp	r3, #8
 8004b98:	d10b      	bne.n	8004bb2 <_printf_i+0x142>
 8004b9a:	6823      	ldr	r3, [r4, #0]
 8004b9c:	07df      	lsls	r7, r3, #31
 8004b9e:	d508      	bpl.n	8004bb2 <_printf_i+0x142>
 8004ba0:	6923      	ldr	r3, [r4, #16]
 8004ba2:	6861      	ldr	r1, [r4, #4]
 8004ba4:	4299      	cmp	r1, r3
 8004ba6:	bfde      	ittt	le
 8004ba8:	2330      	movle	r3, #48	@ 0x30
 8004baa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004bae:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004bb2:	1b92      	subs	r2, r2, r6
 8004bb4:	6122      	str	r2, [r4, #16]
 8004bb6:	464b      	mov	r3, r9
 8004bb8:	4621      	mov	r1, r4
 8004bba:	4640      	mov	r0, r8
 8004bbc:	f8cd a000 	str.w	sl, [sp]
 8004bc0:	aa03      	add	r2, sp, #12
 8004bc2:	f7ff fee3 	bl	800498c <_printf_common>
 8004bc6:	3001      	adds	r0, #1
 8004bc8:	d14a      	bne.n	8004c60 <_printf_i+0x1f0>
 8004bca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004bce:	b004      	add	sp, #16
 8004bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bd4:	6823      	ldr	r3, [r4, #0]
 8004bd6:	f043 0320 	orr.w	r3, r3, #32
 8004bda:	6023      	str	r3, [r4, #0]
 8004bdc:	2778      	movs	r7, #120	@ 0x78
 8004bde:	4832      	ldr	r0, [pc, #200]	@ (8004ca8 <_printf_i+0x238>)
 8004be0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004be4:	6823      	ldr	r3, [r4, #0]
 8004be6:	6831      	ldr	r1, [r6, #0]
 8004be8:	061f      	lsls	r7, r3, #24
 8004bea:	f851 5b04 	ldr.w	r5, [r1], #4
 8004bee:	d402      	bmi.n	8004bf6 <_printf_i+0x186>
 8004bf0:	065f      	lsls	r7, r3, #25
 8004bf2:	bf48      	it	mi
 8004bf4:	b2ad      	uxthmi	r5, r5
 8004bf6:	6031      	str	r1, [r6, #0]
 8004bf8:	07d9      	lsls	r1, r3, #31
 8004bfa:	bf44      	itt	mi
 8004bfc:	f043 0320 	orrmi.w	r3, r3, #32
 8004c00:	6023      	strmi	r3, [r4, #0]
 8004c02:	b11d      	cbz	r5, 8004c0c <_printf_i+0x19c>
 8004c04:	2310      	movs	r3, #16
 8004c06:	e7ad      	b.n	8004b64 <_printf_i+0xf4>
 8004c08:	4826      	ldr	r0, [pc, #152]	@ (8004ca4 <_printf_i+0x234>)
 8004c0a:	e7e9      	b.n	8004be0 <_printf_i+0x170>
 8004c0c:	6823      	ldr	r3, [r4, #0]
 8004c0e:	f023 0320 	bic.w	r3, r3, #32
 8004c12:	6023      	str	r3, [r4, #0]
 8004c14:	e7f6      	b.n	8004c04 <_printf_i+0x194>
 8004c16:	4616      	mov	r6, r2
 8004c18:	e7bd      	b.n	8004b96 <_printf_i+0x126>
 8004c1a:	6833      	ldr	r3, [r6, #0]
 8004c1c:	6825      	ldr	r5, [r4, #0]
 8004c1e:	1d18      	adds	r0, r3, #4
 8004c20:	6961      	ldr	r1, [r4, #20]
 8004c22:	6030      	str	r0, [r6, #0]
 8004c24:	062e      	lsls	r6, r5, #24
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	d501      	bpl.n	8004c2e <_printf_i+0x1be>
 8004c2a:	6019      	str	r1, [r3, #0]
 8004c2c:	e002      	b.n	8004c34 <_printf_i+0x1c4>
 8004c2e:	0668      	lsls	r0, r5, #25
 8004c30:	d5fb      	bpl.n	8004c2a <_printf_i+0x1ba>
 8004c32:	8019      	strh	r1, [r3, #0]
 8004c34:	2300      	movs	r3, #0
 8004c36:	4616      	mov	r6, r2
 8004c38:	6123      	str	r3, [r4, #16]
 8004c3a:	e7bc      	b.n	8004bb6 <_printf_i+0x146>
 8004c3c:	6833      	ldr	r3, [r6, #0]
 8004c3e:	2100      	movs	r1, #0
 8004c40:	1d1a      	adds	r2, r3, #4
 8004c42:	6032      	str	r2, [r6, #0]
 8004c44:	681e      	ldr	r6, [r3, #0]
 8004c46:	6862      	ldr	r2, [r4, #4]
 8004c48:	4630      	mov	r0, r6
 8004c4a:	f000 f859 	bl	8004d00 <memchr>
 8004c4e:	b108      	cbz	r0, 8004c54 <_printf_i+0x1e4>
 8004c50:	1b80      	subs	r0, r0, r6
 8004c52:	6060      	str	r0, [r4, #4]
 8004c54:	6863      	ldr	r3, [r4, #4]
 8004c56:	6123      	str	r3, [r4, #16]
 8004c58:	2300      	movs	r3, #0
 8004c5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c5e:	e7aa      	b.n	8004bb6 <_printf_i+0x146>
 8004c60:	4632      	mov	r2, r6
 8004c62:	4649      	mov	r1, r9
 8004c64:	4640      	mov	r0, r8
 8004c66:	6923      	ldr	r3, [r4, #16]
 8004c68:	47d0      	blx	sl
 8004c6a:	3001      	adds	r0, #1
 8004c6c:	d0ad      	beq.n	8004bca <_printf_i+0x15a>
 8004c6e:	6823      	ldr	r3, [r4, #0]
 8004c70:	079b      	lsls	r3, r3, #30
 8004c72:	d413      	bmi.n	8004c9c <_printf_i+0x22c>
 8004c74:	68e0      	ldr	r0, [r4, #12]
 8004c76:	9b03      	ldr	r3, [sp, #12]
 8004c78:	4298      	cmp	r0, r3
 8004c7a:	bfb8      	it	lt
 8004c7c:	4618      	movlt	r0, r3
 8004c7e:	e7a6      	b.n	8004bce <_printf_i+0x15e>
 8004c80:	2301      	movs	r3, #1
 8004c82:	4632      	mov	r2, r6
 8004c84:	4649      	mov	r1, r9
 8004c86:	4640      	mov	r0, r8
 8004c88:	47d0      	blx	sl
 8004c8a:	3001      	adds	r0, #1
 8004c8c:	d09d      	beq.n	8004bca <_printf_i+0x15a>
 8004c8e:	3501      	adds	r5, #1
 8004c90:	68e3      	ldr	r3, [r4, #12]
 8004c92:	9903      	ldr	r1, [sp, #12]
 8004c94:	1a5b      	subs	r3, r3, r1
 8004c96:	42ab      	cmp	r3, r5
 8004c98:	dcf2      	bgt.n	8004c80 <_printf_i+0x210>
 8004c9a:	e7eb      	b.n	8004c74 <_printf_i+0x204>
 8004c9c:	2500      	movs	r5, #0
 8004c9e:	f104 0619 	add.w	r6, r4, #25
 8004ca2:	e7f5      	b.n	8004c90 <_printf_i+0x220>
 8004ca4:	08004e43 	.word	0x08004e43
 8004ca8:	08004e54 	.word	0x08004e54

08004cac <memmove>:
 8004cac:	4288      	cmp	r0, r1
 8004cae:	b510      	push	{r4, lr}
 8004cb0:	eb01 0402 	add.w	r4, r1, r2
 8004cb4:	d902      	bls.n	8004cbc <memmove+0x10>
 8004cb6:	4284      	cmp	r4, r0
 8004cb8:	4623      	mov	r3, r4
 8004cba:	d807      	bhi.n	8004ccc <memmove+0x20>
 8004cbc:	1e43      	subs	r3, r0, #1
 8004cbe:	42a1      	cmp	r1, r4
 8004cc0:	d008      	beq.n	8004cd4 <memmove+0x28>
 8004cc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004cc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004cca:	e7f8      	b.n	8004cbe <memmove+0x12>
 8004ccc:	4601      	mov	r1, r0
 8004cce:	4402      	add	r2, r0
 8004cd0:	428a      	cmp	r2, r1
 8004cd2:	d100      	bne.n	8004cd6 <memmove+0x2a>
 8004cd4:	bd10      	pop	{r4, pc}
 8004cd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004cda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004cde:	e7f7      	b.n	8004cd0 <memmove+0x24>

08004ce0 <_sbrk_r>:
 8004ce0:	b538      	push	{r3, r4, r5, lr}
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	4d05      	ldr	r5, [pc, #20]	@ (8004cfc <_sbrk_r+0x1c>)
 8004ce6:	4604      	mov	r4, r0
 8004ce8:	4608      	mov	r0, r1
 8004cea:	602b      	str	r3, [r5, #0]
 8004cec:	f7fc f982 	bl	8000ff4 <_sbrk>
 8004cf0:	1c43      	adds	r3, r0, #1
 8004cf2:	d102      	bne.n	8004cfa <_sbrk_r+0x1a>
 8004cf4:	682b      	ldr	r3, [r5, #0]
 8004cf6:	b103      	cbz	r3, 8004cfa <_sbrk_r+0x1a>
 8004cf8:	6023      	str	r3, [r4, #0]
 8004cfa:	bd38      	pop	{r3, r4, r5, pc}
 8004cfc:	200002ac 	.word	0x200002ac

08004d00 <memchr>:
 8004d00:	4603      	mov	r3, r0
 8004d02:	b510      	push	{r4, lr}
 8004d04:	b2c9      	uxtb	r1, r1
 8004d06:	4402      	add	r2, r0
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	d101      	bne.n	8004d12 <memchr+0x12>
 8004d0e:	2000      	movs	r0, #0
 8004d10:	e003      	b.n	8004d1a <memchr+0x1a>
 8004d12:	7804      	ldrb	r4, [r0, #0]
 8004d14:	3301      	adds	r3, #1
 8004d16:	428c      	cmp	r4, r1
 8004d18:	d1f6      	bne.n	8004d08 <memchr+0x8>
 8004d1a:	bd10      	pop	{r4, pc}

08004d1c <memcpy>:
 8004d1c:	440a      	add	r2, r1
 8004d1e:	4291      	cmp	r1, r2
 8004d20:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004d24:	d100      	bne.n	8004d28 <memcpy+0xc>
 8004d26:	4770      	bx	lr
 8004d28:	b510      	push	{r4, lr}
 8004d2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d2e:	4291      	cmp	r1, r2
 8004d30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d34:	d1f9      	bne.n	8004d2a <memcpy+0xe>
 8004d36:	bd10      	pop	{r4, pc}

08004d38 <_realloc_r>:
 8004d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d3c:	4607      	mov	r7, r0
 8004d3e:	4614      	mov	r4, r2
 8004d40:	460d      	mov	r5, r1
 8004d42:	b921      	cbnz	r1, 8004d4e <_realloc_r+0x16>
 8004d44:	4611      	mov	r1, r2
 8004d46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d4a:	f7ff bc3b 	b.w	80045c4 <_malloc_r>
 8004d4e:	b92a      	cbnz	r2, 8004d5c <_realloc_r+0x24>
 8004d50:	f7ff fbce 	bl	80044f0 <_free_r>
 8004d54:	4625      	mov	r5, r4
 8004d56:	4628      	mov	r0, r5
 8004d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d5c:	f000 f81a 	bl	8004d94 <_malloc_usable_size_r>
 8004d60:	4284      	cmp	r4, r0
 8004d62:	4606      	mov	r6, r0
 8004d64:	d802      	bhi.n	8004d6c <_realloc_r+0x34>
 8004d66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004d6a:	d8f4      	bhi.n	8004d56 <_realloc_r+0x1e>
 8004d6c:	4621      	mov	r1, r4
 8004d6e:	4638      	mov	r0, r7
 8004d70:	f7ff fc28 	bl	80045c4 <_malloc_r>
 8004d74:	4680      	mov	r8, r0
 8004d76:	b908      	cbnz	r0, 8004d7c <_realloc_r+0x44>
 8004d78:	4645      	mov	r5, r8
 8004d7a:	e7ec      	b.n	8004d56 <_realloc_r+0x1e>
 8004d7c:	42b4      	cmp	r4, r6
 8004d7e:	4622      	mov	r2, r4
 8004d80:	4629      	mov	r1, r5
 8004d82:	bf28      	it	cs
 8004d84:	4632      	movcs	r2, r6
 8004d86:	f7ff ffc9 	bl	8004d1c <memcpy>
 8004d8a:	4629      	mov	r1, r5
 8004d8c:	4638      	mov	r0, r7
 8004d8e:	f7ff fbaf 	bl	80044f0 <_free_r>
 8004d92:	e7f1      	b.n	8004d78 <_realloc_r+0x40>

08004d94 <_malloc_usable_size_r>:
 8004d94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d98:	1f18      	subs	r0, r3, #4
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	bfbc      	itt	lt
 8004d9e:	580b      	ldrlt	r3, [r1, r0]
 8004da0:	18c0      	addlt	r0, r0, r3
 8004da2:	4770      	bx	lr

08004da4 <_init>:
 8004da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004da6:	bf00      	nop
 8004da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004daa:	bc08      	pop	{r3}
 8004dac:	469e      	mov	lr, r3
 8004dae:	4770      	bx	lr

08004db0 <_fini>:
 8004db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004db2:	bf00      	nop
 8004db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004db6:	bc08      	pop	{r3}
 8004db8:	469e      	mov	lr, r3
 8004dba:	4770      	bx	lr
